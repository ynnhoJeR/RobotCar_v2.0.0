
RobotCar_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800c528  0800c528  0001c528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbb4  0800cbb4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbb4  0800cbb4  0001cbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbbc  0800cbbc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbc0  0800cbc0  0001cbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  200001f8  0800cdbc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800cdbc  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016def  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8b  00000000  00000000  0003705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109f  00000000  00000000  0003b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d50  00000000  00000000  0003c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019898  00000000  00000000  0006520f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8e70  00000000  00000000  0007eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ae8  00000000  00000000  00177918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c510 	.word	0x0800c510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800c510 	.word	0x0800c510

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <GET_TOF_DATA>:

/**
 * Auswertung der TOF-Sensoren
 */
static void GET_TOF_DATA(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
	uint32_t delayTOF = 10;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	607b      	str	r3, [r7, #4]
	printf("\n");
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f009 fb02 	bl	800a4b8 <putchar>

	for(int i = 1; i < TOF_COUNT; i++)		// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor vorhanden
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e089      	b.n	8000fce <GET_TOF_DATA+0x12a>
	{

		status[i] = VL53L4CD_StartRanging(deviceTOF[i]);
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f008 fb2f 	bl	8009526 <VL53L4CD_StartRanging>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <GET_TOF_DATA+0x140>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]

		if(status[i] == 0)
 8000ed6:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <GET_TOF_DATA+0x140>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d161      	bne.n	8000fa6 <GET_TOF_DATA+0x102>
		{
			uint8_t messungen = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	72fb      	strb	r3, [r7, #11]
			// Jeden Messung zwei mal um Genauigkeit zu erhöhen
			while(messungen < 2)
 8000ee6:	e05b      	b.n	8000fa0 <GET_TOF_DATA+0xfc>
			{
				//Polling um zu pruefen ob eine neue Messung abgeschlossen ist
					HAL_Delay(delayTOF);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f002 f881 	bl	8002ff0 <HAL_Delay>
					status[i] = VL53L4CD_CheckForDataReady(deviceTOF[i], &isReady[i]);
 8000eee:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	493b      	ldr	r1, [pc, #236]	; (8000fe8 <GET_TOF_DATA+0x144>)
 8000efa:	440b      	add	r3, r1
 8000efc:	4619      	mov	r1, r3
 8000efe:	4610      	mov	r0, r2
 8000f00:	f008 fb5a 	bl	80095b8 <VL53L4CD_CheckForDataReady>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <GET_TOF_DATA+0x140>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	460a      	mov	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]

					if(isReady[i])
 8000f12:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <GET_TOF_DATA+0x144>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d035      	beq.n	8000f8a <GET_TOF_DATA+0xe6>
					{
						HAL_Delay(delayTOF);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f002 f866 	bl	8002ff0 <HAL_Delay>

						//Hardwareinterrupt des Sensors löschen, sonst kann keine weitere Messung erfolgen
						VL53L4CD_ClearInterrupt(deviceTOF[i]);
 8000f24:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f008 fae3 	bl	80094f8 <VL53L4CD_ClearInterrupt>

						//Entfernung auslesen
						//Die Entfernung wird immer direkt nach dem auslesen wieder gespeichert!
						HAL_Delay(delayTOF);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f002 f85c 	bl	8002ff0 <HAL_Delay>
						VL53L4CD_GetResult(deviceTOF[i], &result[i]);
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	4929      	ldr	r1, [pc, #164]	; (8000fec <GET_TOF_DATA+0x148>)
 8000f46:	440b      	add	r3, r1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f008 fc96 	bl	800987c <VL53L4CD_GetResult>
						if(result[i].range_status == 0)
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <GET_TOF_DATA+0x148>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d115      	bne.n	8000f8a <GET_TOF_DATA+0xe6>
						{
							distance_TOF[i] = result[i].distance_mm;
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <GET_TOF_DATA+0x148>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	3302      	adds	r3, #2
 8000f68:	8819      	ldrh	r1, [r3, #0]
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <GET_TOF_DATA+0x14c>)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							printf("%s	-> Distance = %5d mm\n",TofDevStr[i], distance_TOF[i]);
 8000f72:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <GET_TOF_DATA+0x150>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <GET_TOF_DATA+0x14c>)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f82:	461a      	mov	r2, r3
 8000f84:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <GET_TOF_DATA+0x154>)
 8000f86:	f009 fa85 	bl	800a494 <iprintf>
						}
					}
					messungen++;
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	72fb      	strb	r3, [r7, #11]
					WaitMs(deviceTOF[i], delayTOF);
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fa72 	bl	8002484 <WaitMs>
			while(messungen < 2)
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d9a0      	bls.n	8000ee8 <GET_TOF_DATA+0x44>
			}
		}
		HAL_Delay(delayTOF);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 f822 	bl	8002ff0 <HAL_Delay>
		status[i] = VL53L4CD_StopRanging(deviceTOF[i]);
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <GET_TOF_DATA+0x13c>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 fae8 	bl	800958a <VL53L4CD_StopRanging>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <GET_TOF_DATA+0x140>)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < TOF_COUNT; i++)		// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor vorhanden
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b06      	cmp	r3, #6
 8000fd2:	f67f af72 	bls.w	8000eba <GET_TOF_DATA+0x16>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000214 	.word	0x20000214
 8000fe4:	20000224 	.word	0x20000224
 8000fe8:	2000022c 	.word	0x2000022c
 8000fec:	20000244 	.word	0x20000244
 8000ff0:	200002b4 	.word	0x200002b4
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	0800c574 	.word	0x0800c574

08000ffc <TOF_INIT>:
 * Allerdings wird der Sensor 0 (0x52) zwar richtig initialisiert und eine ID zugewiesen, dennoch kann die erste I2C Adresse nicht genutzt werden, da es sonst zu Problemen bei folgenden Sensoren kommt.
 * Lösung: Variable TOF_COUNT um eins erhöhen um bei 6 Sensoren 7 I2C Adressen zu generieren, dabei die erste nicht nutzen und auswertnen. Sensoren belgen den Bus auf Device[1-7], Device [0] wird nicht genutzt.
 *
 */
static void TOF_INIT(void)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
	 uint8_t i;

	RESET_ALL_TOF_SEN();
 8001002:	f000 f8cb 	bl	800119c <RESET_ALL_TOF_SEN>

	  for (i = 0; i < TOF_COUNT; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	e06d      	b.n	80010e8 <TOF_INIT+0xec>
	  {
		  SET_TOF_PIN(i);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f888 	bl	8001124 <SET_TOF_PIN>

		  Dev_t i2cAddr = 0x52;		// !!! Wichtig !!! defaultAdress nicht ändern, führt zu I2C Problemen
 8001014:	2352      	movs	r3, #82	; 0x52
 8001016:	80bb      	strh	r3, [r7, #4]
		  deviceTOF[i]  = (i2cAddr + i*2);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b29b      	uxth	r3, r3
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b299      	uxth	r1, r3
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	88ba      	ldrh	r2, [r7, #4]
 8001024:	440a      	add	r2, r1
 8001026:	b291      	uxth	r1, r2
 8001028:	4a36      	ldr	r2, [pc, #216]	; (8001104 <TOF_INIT+0x108>)
 800102a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  // Setzen der neuen I2C Adressen und auslesen der Sensor ID (0xEBAA)
		  VL53L4CD_SetI2CAddress(i2cAddr, deviceTOF[i]);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a34      	ldr	r2, [pc, #208]	; (8001104 <TOF_INIT+0x108>)
 8001032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f008 f962 	bl	8009306 <VL53L4CD_SetI2CAddress>
		  VL53L4CD_GetSensorId(deviceTOF[i], &sensor_id[i]);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <TOF_INIT+0x108>)
 8001046:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	492e      	ldr	r1, [pc, #184]	; (8001108 <TOF_INIT+0x10c>)
 8001050:	440b      	add	r3, r1
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f008 f972 	bl	800933e <VL53L4CD_GetSensorId>

		  if (deviceTOF[i] != 0x52)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <TOF_INIT+0x108>)
 800105e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001062:	2b52      	cmp	r3, #82	; 0x52
 8001064:	d010      	beq.n	8001088 <TOF_INIT+0x8c>
		  {
			  printf("Init [ToF: %d]: Device -> %s 	ID: %04lX\n", deviceTOF[i], TofDevStr[i], (unsigned long)sensor_id[i]);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <TOF_INIT+0x108>)
 800106a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106e:	4618      	mov	r0, r3
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <TOF_INIT+0x110>)
 8001074:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4923      	ldr	r1, [pc, #140]	; (8001108 <TOF_INIT+0x10c>)
 800107c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001080:	4601      	mov	r1, r0
 8001082:	4823      	ldr	r0, [pc, #140]	; (8001110 <TOF_INIT+0x114>)
 8001084:	f009 fa06 	bl	800a494 <iprintf>
		  }

		  if((status[i] || (sensor_id[i] != 0xEBAA)) && (i != 0))
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <TOF_INIT+0x118>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d107      	bne.n	80010a2 <TOF_INIT+0xa6>
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <TOF_INIT+0x10c>)
 8001096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109a:	f64e 32aa 	movw	r2, #60330	; 0xebaa
 800109e:	4293      	cmp	r3, r2
 80010a0:	d005      	beq.n	80010ae <TOF_INIT+0xb2>
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <TOF_INIT+0xb2>
		  	{
		  		printf("VL53L4CD not detected at requested address\n");
 80010a8:	481b      	ldr	r0, [pc, #108]	; (8001118 <TOF_INIT+0x11c>)
 80010aa:	f009 fa61 	bl	800a570 <puts>
		  	}

		  //Sensor initialisieren
		  if (deviceTOF[i] != 0x52)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <TOF_INIT+0x108>)
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	2b52      	cmp	r3, #82	; 0x52
 80010b8:	d00b      	beq.n	80010d2 <TOF_INIT+0xd6>
		  		  {
			  	  	  status[i] = VL53L4CD_SensorInit(deviceTOF[i]);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4a11      	ldr	r2, [pc, #68]	; (8001104 <TOF_INIT+0x108>)
 80010be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c2:	79fc      	ldrb	r4, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 f953 	bl	8009370 <VL53L4CD_SensorInit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <TOF_INIT+0x118>)
 80010d0:	551a      	strb	r2, [r3, r4]
		  		  }

		  	if(status[i])
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <TOF_INIT+0x118>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <TOF_INIT+0xe6>
		  	{
		  		printf("VL53L4CD ULD Loading failed\n");
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <TOF_INIT+0x120>)
 80010de:	f009 fa47 	bl	800a570 <puts>
	  for (i = 0; i < TOF_COUNT; i++)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	3301      	adds	r3, #1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d98e      	bls.n	800100c <TOF_INIT+0x10>
		  	}
	  	}

	  	printf("\n");
 80010ee:	200a      	movs	r0, #10
 80010f0:	f009 f9e2 	bl	800a4b8 <putchar>
	  	printf("VL53L4CD: Ultra Light Driver ready!\n");
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <TOF_INIT+0x124>)
 80010f6:	f009 fa3b 	bl	800a570 <puts>
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	20000214 	.word	0x20000214
 8001108:	20000234 	.word	0x20000234
 800110c:	20000000 	.word	0x20000000
 8001110:	0800c590 	.word	0x0800c590
 8001114:	20000224 	.word	0x20000224
 8001118:	0800c5bc 	.word	0x0800c5bc
 800111c:	0800c5e8 	.word	0x0800c5e8
 8001120:	0800c604 	.word	0x0800c604

08001124 <SET_TOF_PIN>:
/**
 *	PIN Set der ToF Sensoren (jeden Sonsor einzeln)
 *	Set der Pins über Register (ohne HAL-Funktion)
 */
static void SET_TOF_PIN(uint8_t device)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	switch (device)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d829      	bhi.n	8001188 <SET_TOF_PIN+0x64>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <SET_TOF_PIN+0x18>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	08001155 	.word	0x08001155
 8001140:	0800115d 	.word	0x0800115d
 8001144:	08001165 	.word	0x08001165
 8001148:	0800116d 	.word	0x0800116d
 800114c:	08001175 	.word	0x08001175
 8001150:	0800117f 	.word	0x0800117f
	{
		case 0:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_4;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <SET_TOF_PIN+0x74>)
 8001156:	2210      	movs	r2, #16
 8001158:	619a      	str	r2, [r3, #24]
			break;
 800115a:	e016      	b.n	800118a <SET_TOF_PIN+0x66>
		case 1:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_5;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <SET_TOF_PIN+0x74>)
 800115e:	2220      	movs	r2, #32
 8001160:	619a      	str	r2, [r3, #24]
			break;
 8001162:	e012      	b.n	800118a <SET_TOF_PIN+0x66>
		case 2:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_6;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <SET_TOF_PIN+0x74>)
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	619a      	str	r2, [r3, #24]
			break;
 800116a:	e00e      	b.n	800118a <SET_TOF_PIN+0x66>
		case 3:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_7;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <SET_TOF_PIN+0x74>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	619a      	str	r2, [r3, #24]
			break;
 8001172:	e00a      	b.n	800118a <SET_TOF_PIN+0x66>
		case 4:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_8;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <SET_TOF_PIN+0x74>)
 8001176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117a:	619a      	str	r2, [r3, #24]
			break;
 800117c:	e005      	b.n	800118a <SET_TOF_PIN+0x66>
		case 5:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_9;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SET_TOF_PIN+0x74>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	619a      	str	r2, [r3, #24]
			break;
 8001186:	e000      	b.n	800118a <SET_TOF_PIN+0x66>

		default:
			break;
 8001188:	bf00      	nop
	}
	usDelay(3);
 800118a:	2003      	movs	r0, #3
 800118c:	f000 f98a 	bl	80014a4 <usDelay>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	48000800 	.word	0x48000800

0800119c <RESET_ALL_TOF_SEN>:
/**
 *	PIN Reset aller ToF Sensoren (GPIOC)
 *	Reset der Pins über Register (ohne HAL-Funktion)
 */
static void RESET_ALL_TOF_SEN(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	  GPIOC->BRR = (uint32_t)GPIO_PIN_4;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_5;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011a8:	2220      	movs	r2, #32
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_6;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_7;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_8;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_9;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <RESET_ALL_TOF_SEN+0x38>)
 80011c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
	  usDelay(3);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f96b 	bl	80014a4 <usDelay>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	48000800 	.word	0x48000800

080011d8 <SET_OFFSET>:
 *
 * Falls eine Glasabdeckung für die Sensoren benutzt wird, muss zusätzlich eine Crosstalk kalibrierung erfolgen. Glas reflektiert eventuell Licht, was zu falschen Messungen führen kann
 *
 */
static void SET_OFFSET(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	int16_t offsetvalue;

	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 80011de:	2301      	movs	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	e03b      	b.n	800125c <SET_OFFSET+0x84>
	{
		switch (i) /* Offsetparameter in mm für jeden Sensor */
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d827      	bhi.n	800123c <SET_OFFSET+0x64>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <SET_OFFSET+0x1c>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	08001215 	.word	0x08001215
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	08001225 	.word	0x08001225
 8001204:	0800122d 	.word	0x0800122d
 8001208:	08001235 	.word	0x08001235
		{
			case 1:	//CENTER_LEFT	(PC04)
				offsetvalue = -10;
 800120c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001210:	80fb      	strh	r3, [r7, #6]
				break;
 8001212:	e013      	b.n	800123c <SET_OFFSET+0x64>
			case 2:	//FRONT_LEFT	(PC05)
				offsetvalue = -12;
 8001214:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8001218:	80fb      	strh	r3, [r7, #6]
				break;
 800121a:	e00f      	b.n	800123c <SET_OFFSET+0x64>
			case 3:	//FRONT_RIGHT	(PC06)
				offsetvalue = -10;
 800121c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001220:	80fb      	strh	r3, [r7, #6]
				break;
 8001222:	e00b      	b.n	800123c <SET_OFFSET+0x64>
			case 4:	//BACK_LEFT		(PC07)
				offsetvalue = -10;
 8001224:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001228:	80fb      	strh	r3, [r7, #6]
				break;
 800122a:	e007      	b.n	800123c <SET_OFFSET+0x64>
			case 5:	//BACK_RIGHT	(PC08)
				offsetvalue = -8;
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	80fb      	strh	r3, [r7, #6]
				break;
 8001232:	e003      	b.n	800123c <SET_OFFSET+0x64>
			case 6:	//CENTER_RIGHT	(PC09)
				offsetvalue = -15;
 8001234:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8001238:	80fb      	strh	r3, [r7, #6]
				break;
 800123a:	bf00      	nop
		}

		VL53L4CD_SetOffset(deviceTOF[i], offsetvalue);
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <SET_OFFSET+0x94>)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001244:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f008 fbc6 	bl	80099dc <VL53L4CD_SetOffset>
		usDelay(3);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f927 	bl	80014a4 <usDelay>
	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d9c0      	bls.n	80011e4 <SET_OFFSET+0xc>
	}
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000214 	.word	0x20000214

08001270 <GET_US_DATA>:
 *	Die Timer messen die Ticks der steigenden und fallenden Flanke der Internal-Clock. (= Distanz)
 *	Flankenzeit * speedofsound/2 = Distance
 *
 */
static void GET_US_DATA(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	    /* USER CODE END WHILE */
	printf("\n");
 8001276:	200a      	movs	r0, #10
 8001278:	f009 f91e 	bl	800a4b8 <putchar>

	for(int i = 0; i < US_COUNT; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e050      	b.n	8001324 <GET_US_DATA+0xb4>
		{
			uint8_t messungen = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	70fb      	strb	r3, [r7, #3]

			while(messungen < 2)
 8001286:	e047      	b.n	8001318 <GET_US_DATA+0xa8>
			{
				RESET_ALL_US_PIN();
 8001288:	f000 f8ce 	bl	8001428 <RESET_ALL_US_PIN>
				SET_US_PULSE(deviceUS[i]);	//Trigger-Signal 10us
 800128c:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <GET_US_DATA+0xc8>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f89e 	bl	80013d8 <SET_US_PULSE>

				if(i == 0)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d104      	bne.n	80012ac <GET_US_DATA+0x3c>
				{
					START_IC_TIMER(&htim5, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <GET_US_DATA+0xcc>)
 80012a6:	f000 f8d1 	bl	800144c <START_IC_TIMER>
 80012aa:	e003      	b.n	80012b4 <GET_US_DATA+0x44>
				}
				else
				{
					START_IC_TIMER(&htim15, TIM_CHANNEL_2);
 80012ac:	2104      	movs	r1, #4
 80012ae:	4824      	ldr	r0, [pc, #144]	; (8001340 <GET_US_DATA+0xd0>)
 80012b0:	f000 f8cc 	bl	800144c <START_IC_TIMER>
				}

				if(edge2Time > edge1Time)
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <GET_US_DATA+0xd4>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <GET_US_DATA+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d92b      	bls.n	8001318 <GET_US_DATA+0xa8>
				{
					distance_US[i] = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <GET_US_DATA+0xd4>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <GET_US_DATA+0xd8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800134c <GET_US_DATA+0xdc>
 80012d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001350 <GET_US_DATA+0xe0>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	b299      	uxth	r1, r3
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <GET_US_DATA+0xe4>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					printf("%s	-> Distance =	%5d mm\n", USDevStr[i], distance_US[i]);
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <GET_US_DATA+0xe8>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <GET_US_DATA+0xe4>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	461a      	mov	r2, r3
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <GET_US_DATA+0xec>)
 8001308:	f009 f8c4 	bl	800a494 <iprintf>
					messungen++;
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	3301      	adds	r3, #1
 8001310:	70fb      	strb	r3, [r7, #3]
					HAL_Delay(25);
 8001312:	2019      	movs	r0, #25
 8001314:	f001 fe6c 	bl	8002ff0 <HAL_Delay>
			while(messungen < 2)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d9b4      	bls.n	8001288 <GET_US_DATA+0x18>
	for(int i = 0; i < US_COUNT; i++)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3301      	adds	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b01      	cmp	r3, #1
 8001328:	ddab      	ble.n	8001282 <GET_US_DATA+0x12>
				{
					;
				}
			}
		}
		HAL_Delay(25);
 800132a:	2019      	movs	r0, #25
 800132c:	f001 fe60 	bl	8002ff0 <HAL_Delay>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200003a8 	.word	0x200003a8
 800133c:	20000310 	.word	0x20000310
 8001340:	2000035c 	.word	0x2000035c
 8001344:	200003b4 	.word	0x200003b4
 8001348:	200003b0 	.word	0x200003b0
 800134c:	00000000 	.word	0x00000000
 8001350:	3e2f9db2 	.word	0x3e2f9db2
 8001354:	200003bc 	.word	0x200003bc
 8001358:	2000001c 	.word	0x2000001c
 800135c:	0800c640 	.word	0x0800c640

08001360 <HAL_TIM_IC_CaptureCallback>:

/**
 * Zählt die Tick zwischen steigende und fellender Flanke
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	uint32_t Channel;

	if(htim == &htim5)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x64>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d102      	bne.n	8001376 <HAL_TIM_IC_CaptureCallback+0x16>
	{
		Channel = TIM_CHANNEL_1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e001      	b.n	800137a <HAL_TIM_IC_CaptureCallback+0x1a>
	}
	else
	{
		Channel = TIM_CHANNEL_2;
 8001376:	2304      	movs	r3, #4
 8001378:	60fb      	str	r3, [r7, #12]
	}

	if(captureIdx == 0 ) //First edge
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x68>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10a      	bne.n	8001398 <HAL_TIM_IC_CaptureCallback+0x38>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, Channel); //__HAL_TIM_GetCounter;//
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f005 fd6d 	bl	8006e64 <HAL_TIM_ReadCapturedValue>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_TIM_IC_CaptureCallback+0x6c>)
 800138e:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
			edge2Time = HAL_TIM_ReadCapturedValue(htim, Channel);

			captureIdx = 0;
			icFlag = 1;
		}
}
 8001396:	e010      	b.n	80013ba <HAL_TIM_IC_CaptureCallback+0x5a>
		else if(captureIdx == 1) //Second edge
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x68>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10c      	bne.n	80013ba <HAL_TIM_IC_CaptureCallback+0x5a>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, Channel);
 80013a0:	68f9      	ldr	r1, [r7, #12]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f005 fd5e 	bl	8006e64 <HAL_TIM_ReadCapturedValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x70>)
 80013ac:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x68>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x74>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000310 	.word	0x20000310
 80013c8:	200003ad 	.word	0x200003ad
 80013cc:	200003b0 	.word	0x200003b0
 80013d0:	200003b4 	.word	0x200003b4
 80013d4:	200003ac 	.word	0x200003ac

080013d8 <SET_US_PULSE>:

/**
 * Funktion senden einen 10 us Puls auf den Trigger-Pin der US-Sensoren
 */
static void SET_US_PULSE(uint8_t device)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	switch (device)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <SET_US_PULSE+0x16>
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d00b      	beq.n	8001404 <SET_US_PULSE+0x2c>
			//1. Output 10 usec TRIGGER2
			GPIOB->BSRR = (uint32_t)GPIO_PIN_13;
			usDelay(10);
			GPIOB->BRR = (uint32_t)GPIO_PIN_13;
	}
}
 80013ec:	e015      	b.n	800141a <SET_US_PULSE+0x42>
			GPIOB->BSRR = (uint32_t)GPIO_PIN_12;	//Pin_Set
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <SET_US_PULSE+0x4c>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	619a      	str	r2, [r3, #24]
			usDelay(10);							//10us Pulse
 80013f6:	200a      	movs	r0, #10
 80013f8:	f000 f854 	bl	80014a4 <usDelay>
			GPIOB->BRR = (uint32_t)GPIO_PIN_12;		//Pin_Reset
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <SET_US_PULSE+0x4c>)
 80013fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
			GPIOB->BSRR = (uint32_t)GPIO_PIN_13;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <SET_US_PULSE+0x4c>)
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	619a      	str	r2, [r3, #24]
			usDelay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f000 f849 	bl	80014a4 <usDelay>
			GPIOB->BRR = (uint32_t)GPIO_PIN_13;
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SET_US_PULSE+0x4c>)
 8001414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	48000400 	.word	0x48000400

08001428 <RESET_ALL_US_PIN>:
/**
 * TRIGGER_PIN Reset
 *
 */
static void RESET_ALL_US_PIN(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	GPIOB->BRR = (uint32_t)GPIO_PIN_12;	//Pin_Reset
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <RESET_ALL_US_PIN+0x20>)
 800142e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOB->BRR = (uint32_t)GPIO_PIN_13;	//Pin_Reset
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <RESET_ALL_US_PIN+0x20>)
 8001436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
	usDelay(3);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f831 	bl	80014a4 <usDelay>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	48000400 	.word	0x48000400

0800144c <START_IC_TIMER>:

/**
 * Funktion startet den Timer und wartet bis icFlag = 1 (fallende Flanke) um Timer zu stoppen
 */
static void START_IC_TIMER(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	//Start IC timer
	HAL_TIM_IC_Start_IT(htim, Channel);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f004 fe4b 	bl	80060f4 <HAL_TIM_IC_Start_IT>

	//Wait for IC flag
	startTick = HAL_GetTick();
 800145e:	f001 fdbb 	bl	8002fd8 <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <START_IC_TIMER+0x50>)
 8001466:	6013      	str	r3, [r2, #0]
	do
	{
		if(icFlag) break;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <START_IC_TIMER+0x54>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d109      	bne.n	8001484 <START_IC_TIMER+0x38>
	}
	while((HAL_GetTick() - startTick) < 500);  //500ms
 8001470:	f001 fdb2 	bl	8002fd8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <START_IC_TIMER+0x50>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001480:	d3f2      	bcc.n	8001468 <START_IC_TIMER+0x1c>
 8001482:	e000      	b.n	8001486 <START_IC_TIMER+0x3a>
		if(icFlag) break;
 8001484:	bf00      	nop
	icFlag = 0;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <START_IC_TIMER+0x54>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(htim, Channel);
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f004 ff7a 	bl	8006388 <HAL_TIM_IC_Stop_IT>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200003b8 	.word	0x200003b8
 80014a0:	200003ac 	.word	0x200003ac

080014a4 <usDelay>:
/**
 *	Funktion stellt einen us Delay über die Internal Clock von TIM4 bereit
 *	us Delay wird für zum senden des Pulses an GPIO Pins der US-Sensoren benötigt
 */
void usDelay(uint32_t uSec)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d801      	bhi.n	80014b6 <usDelay+0x12>
 80014b2:	2302      	movs	r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
		usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <usDelay+0x60>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	62d3      	str	r3, [r2, #44]	; 0x2c
		usTIM->EGR = 1; 		/*Re-initialises the timer*/
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <usDelay+0x60>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
		usTIM->SR &= ~1; 		//Resets the flag
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <usDelay+0x60>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <usDelay+0x60>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6113      	str	r3, [r2, #16]
		usTIM->CR1 |= 1; 		//Enables the counter
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <usDelay+0x60>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <usDelay+0x60>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]
		while((usTIM->SR&0x0001) != 1);
 80014dc:	bf00      	nop
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <usDelay+0x60>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d1f9      	bne.n	80014de <usDelay+0x3a>
		usTIM->SR &= ~(0x0001);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <usDelay+0x60>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <usDelay+0x60>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6113      	str	r3, [r2, #16]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40000800 	.word	0x40000800

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f001 fcf3 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001512:	f000 fa43 	bl	800199c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 fdeb 	bl	80020f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800151a:	f000 fdb3 	bl	8002084 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800151e:	f000 fd81 	bl	8002024 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001522:	f000 fa8d 	bl	8001a40 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001526:	f000 fb25 	bl	8001b74 <MX_TIM2_Init>
  MX_TIM1_Init();
 800152a:	f000 fac9 	bl	8001ac0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800152e:	f000 fb99 	bl	8001c64 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001532:	f000 fd47 	bl	8001fc4 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001536:	f000 fc5f 	bl	8001df8 <MX_TIM5_Init>
  MX_TIM15_Init();
 800153a:	f000 fccf 	bl	8001edc <MX_TIM15_Init>
  MX_TIM4_Init();
 800153e:	f000 fc0d 	bl	8001d5c <MX_TIM4_Init>

  TOF_INIT();
 8001542:	f7ff fd5b 	bl	8000ffc <TOF_INIT>
  SET_OFFSET();
 8001546:	f7ff fe47 	bl	80011d8 <SET_OFFSET>
  /* USER CODE BEGIN 2 */

  //UART
//  uint8_t tx_buff[10]={11,12,13,14,15,16,17,18,19};
  uint8_t rx_buff[10]={0};
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	809a      	strh	r2, [r3, #4]
//  uint8_t rx_buff2[10]={0};
  state = STOP;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <main+0x138>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart1,rx_buff,10);
 800155c:	463b      	mov	r3, r7
 800155e:	220a      	movs	r2, #10
 8001560:	4619      	mov	r1, r3
 8001562:	4838      	ldr	r0, [pc, #224]	; (8001644 <main+0x13c>)
 8001564:	f006 fc38 	bl	8007dd8 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart2,"System Startup from Reset State\n",32);
 8001568:	2220      	movs	r2, #32
 800156a:	4937      	ldr	r1, [pc, #220]	; (8001648 <main+0x140>)
 800156c:	4837      	ldr	r0, [pc, #220]	; (800164c <main+0x144>)
 800156e:	f006 fbb7 	bl	8007ce0 <HAL_UART_Transmit_DMA>
  int UART_Tick = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]


  //PWM Servo Lenkung
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 8001576:	2104      	movs	r1, #4
 8001578:	4835      	ldr	r0, [pc, #212]	; (8001650 <main+0x148>)
 800157a:	f004 fc53 	bl	8005e24 <HAL_TIM_PWM_Start>
  rx_buff[8]=0;
 800157e:	2300      	movs	r3, #0
 8001580:	723b      	strb	r3, [r7, #8]
  //50Hz==20ms (PA1)

  //PWM Motor Antrieb
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 8001582:	2100      	movs	r1, #0
 8001584:	4833      	ldr	r0, [pc, #204]	; (8001654 <main+0x14c>)
 8001586:	f004 fc4d 	bl	8005e24 <HAL_TIM_PWM_Start>
  //Encoder
//  uint32_t timer_counter=0;
//  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);

  //Hier wird das Neutralsignal für den Fahrtregler ausgegeben.
  SET_PWM_MOTOR(75); 	// Set zero position of motor driver (TIM3 PWM Motor)
 800158a:	204b      	movs	r0, #75	; 0x4b
 800158c:	f000 f88c 	bl	80016a8 <SET_PWM_MOTOR>
  HAL_Delay(2000);		// Wait for motor driver to get zero position
 8001590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001594:	f001 fd2c 	bl	8002ff0 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (state) {
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <main+0x138>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d048      	beq.n	8001632 <main+0x12a>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	dc49      	bgt.n	8001638 <main+0x130>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <main+0xa6>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00c      	beq.n	80015c6 <main+0xbe>
		case PARK:
			START_PARKING();
			break;

		default:
			break;
 80015ac:	e044      	b.n	8001638 <main+0x130>
			SET_PWM_LENKUNG(75); //Set Duty Cycle of TIM2 PWM Lenkung
 80015ae:	204b      	movs	r0, #75	; 0x4b
 80015b0:	f000 f88c 	bl	80016cc <SET_PWM_LENKUNG>
			SET_PWM_MOTOR(75); //Set Duty Cycle of TIM3 PWM Motor
 80015b4:	204b      	movs	r0, #75	; 0x4b
 80015b6:	f000 f877 	bl	80016a8 <SET_PWM_MOTOR>
			HAL_Delay(1000);
 80015ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015be:	f001 fd17 	bl	8002ff0 <HAL_Delay>
			CHECK_STATE();	//Checkt den aktuellen Fahrmodus (durch blauen Knopf änderbar) | einmal drücken DRIVE, kurz gedrückt halten PARK
 80015c2:	f000 f895 	bl	80016f0 <CHECK_STATE>
			HAL_UART_Receive_DMA(&huart1,rx_buff,10); //Achtung Uart1 bei L476 TX(D8/PA9) RX(D2/PA10) nach beschriftung entsprechen diese Pins Uart0!
 80015c6:	463b      	mov	r3, r7
 80015c8:	220a      	movs	r2, #10
 80015ca:	4619      	mov	r1, r3
 80015cc:	481d      	ldr	r0, [pc, #116]	; (8001644 <main+0x13c>)
 80015ce:	f006 fc03 	bl	8007dd8 <HAL_UART_Receive_DMA>
				 if((SysTickGetTickcount()-UART_Tick)>=1000)
 80015d2:	f001 fb7f 	bl	8002cd4 <SysTickGetTickcount>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e0:	db2c      	blt.n	800163c <main+0x134>
					UART_Tick=SysTickGetTickcount();
 80015e2:	f001 fb77 	bl	8002cd4 <SysTickGetTickcount>
 80015e6:	60f8      	str	r0, [r7, #12]
					if(rx_buff[9]==88){TOGGLE_PIN(GPIOA,GPIO_PIN_5);}
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	2b58      	cmp	r3, #88	; 0x58
 80015ec:	d104      	bne.n	80015f8 <main+0xf0>
 80015ee:	2120      	movs	r1, #32
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f000 f83d 	bl	8001672 <TOGGLE_PIN>
					SET_PWM_LENKUNG(rx_buff[3]); //Set Duty Cycle of TIM2 PWM Lenkung
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f866 	bl	80016cc <SET_PWM_LENKUNG>
					SET_PWM_MOTOR(rx_buff[4]); //Set Duty Cycle of TIM3 PWM Motor
 8001600:	793b      	ldrb	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f850 	bl	80016a8 <SET_PWM_MOTOR>
					int8_t STOP_CAR = 0x01;
 8001608:	2301      	movs	r3, #1
 800160a:	72fb      	strb	r3, [r7, #11]
					STOP_CAR = CHECK_BUTTON();
 800160c:	f000 f8b4 	bl	8001778 <CHECK_BUTTON>
 8001610:	4603      	mov	r3, r0
 8001612:	72fb      	strb	r3, [r7, #11]
					if(STOP_CAR == 0x00)
 8001614:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10f      	bne.n	800163c <main+0x134>
						printf("\nDRIVE-MODE:	END\n");
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <main+0x150>)
 800161e:	f008 ffa7 	bl	800a570 <puts>
						state = STOP;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <main+0x138>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1500);
 8001628:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800162c:	f001 fce0 	bl	8002ff0 <HAL_Delay>
			break;
 8001630:	e004      	b.n	800163c <main+0x134>
			START_PARKING();
 8001632:	f000 f8df 	bl	80017f4 <START_PARKING>
			break;
 8001636:	e002      	b.n	800163e <main+0x136>
			break;
 8001638:	bf00      	nop
 800163a:	e7ad      	b.n	8001598 <main+0x90>
			break;
 800163c:	bf00      	nop
	  switch (state) {
 800163e:	e7ab      	b.n	8001598 <main+0x90>
 8001640:	20000728 	.word	0x20000728
 8001644:	200004f8 	.word	0x200004f8
 8001648:	0800c65c 	.word	0x0800c65c
 800164c:	20000580 	.word	0x20000580
 8001650:	20000460 	.word	0x20000460
 8001654:	200004ac 	.word	0x200004ac
 8001658:	0800c680 	.word	0x0800c680

0800165c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/

/* Private function  ---------------------------------------------------------*/
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){__NOP();} //check if all Data is received
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <TOGGLE_PIN>:
/**
 *	Toggelt Pin zwischen HIGH-LOW
 *
 */
static void TOGGLE_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]

	  /* Check the parameters */
	  assert_param(IS_GPIO_PIN(GPIO_Pin));

	  /* get current Output Data Register value */
	  odr = GPIOx->ODR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	60fb      	str	r3, [r7, #12]

	  /* Set selected pins that were at low level, and reset ones that were high */
	  GPIOx->BSRR = ((odr & GPIO_Pin) << 16U) | (~odr & GPIO_Pin);
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43d9      	mvns	r1, r3
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SET_PWM_MOTOR>:
 * Steuerung des Motors, value:
 * 75...100 Entspricht 0 bis 100% Geschwindigkeit
 * PWM wird erzeugt mit TIM3
 */
static void SET_PWM_MOTOR(uint8_t value)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]

	htim3.Instance->CCR1 = value;
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SET_PWM_MOTOR+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	79fa      	ldrb	r2, [r7, #7]
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200004ac 	.word	0x200004ac

080016cc <SET_PWM_LENKUNG>:
 * Steuerung Lenkung: value:
 *  rechts max = 50, links max = 100
 *  PWM wird erzeugt mit TIM2
 */
static void SET_PWM_LENKUNG(uint8_t value)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1 = value;
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <SET_PWM_LENKUNG+0x20>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000460 	.word	0x20000460

080016f0 <CHECK_STATE>:
 *
 * DRIVE-MODE: schneller blinken der LED
 * PARK-MODE: langsames blinken der LED
*/
static void CHECK_STATE(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	uint8_t B1_VALUE = 0x01;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]

	TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 80016fa:	2120      	movs	r1, #32
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f7ff ffb7 	bl	8001672 <TOGGLE_PIN>

	do
	{
		B1_VALUE = CHECK_BUTTON();
 8001704:	f000 f838 	bl	8001778 <CHECK_BUTTON>
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
	}
	while(B1_VALUE != 0x00U);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f8      	bne.n	8001704 <CHECK_STATE+0x14>

	printf("\nDRIVE-MODE:	START\n");
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <CHECK_STATE+0x7c>)
 8001714:	f008 ff2c 	bl	800a570 <puts>
	state = DRIVE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <CHECK_STATE+0x80>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(750);	//Zeit die Taster gedrückt werden muss um in DRIVE zu schalten
 800171e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001722:	f001 fc65 	bl	8002ff0 <HAL_Delay>

	B1_VALUE = CHECK_BUTTON();
 8001726:	f000 f827 	bl	8001778 <CHECK_BUTTON>
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	if(B1_VALUE == 0x00U)
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <CHECK_STATE+0x50>
	{
		printf("\nPARK-MODE:	START\n");
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <CHECK_STATE+0x84>)
 8001736:	f008 ff1b 	bl	800a570 <puts>
		state = PARK;
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <CHECK_STATE+0x80>)
 800173c:	2202      	movs	r2, #2
 800173e:	701a      	strb	r2, [r3, #0]
	}

	TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 8001740:	2120      	movs	r1, #32
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f7ff ff94 	bl	8001672 <TOGGLE_PIN>

	if(state == DRIVE)
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <CHECK_STATE+0x80>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d103      	bne.n	800175a <CHECK_STATE+0x6a>
	{
		START_SIGNAL(100);
 8001752:	2064      	movs	r0, #100	; 0x64
 8001754:	f000 f828 	bl	80017a8 <START_SIGNAL>
	}
	else
	{
		START_SIGNAL(300);
	}
}
 8001758:	e003      	b.n	8001762 <CHECK_STATE+0x72>
		START_SIGNAL(300);
 800175a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800175e:	f000 f823 	bl	80017a8 <START_SIGNAL>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0800c694 	.word	0x0800c694
 8001770:	20000728 	.word	0x20000728
 8001774:	0800c6a8 	.word	0x0800c6a8

08001778 <CHECK_BUTTON>:
/**
 * Funktion erkennt ob der Blaue Knopf auf dem STM32 Board gedrückt wurde
 * (PC13)
 */
GPIO_PinState CHECK_BUTTON(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
	GPIO_PinState bitstatus;
	  /* Check the parameters */
	  assert_param(IS_GPIO_PIN(GPIO_PIN_13));

	  if ((GPIOC->IDR & GPIO_PIN_13) != 0x00U)
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <CHECK_BUTTON+0x2c>)
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <CHECK_BUTTON+0x18>
	  {
	    bitstatus = 0x01U;
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <CHECK_BUTTON+0x1c>
	  }
	  else
	  {
	    bitstatus = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
	  }
	  return bitstatus;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	48000800 	.word	0x48000800

080017a8 <START_SIGNAL>:

static void START_SIGNAL(uint16_t MODE)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 5; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	e014      	b.n	80017e2 <START_SIGNAL+0x3a>
	{
		HAL_Delay(MODE);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fc18 	bl	8002ff0 <HAL_Delay>
		TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 80017c0:	2120      	movs	r1, #32
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f7ff ff54 	bl	8001672 <TOGGLE_PIN>
		HAL_Delay(MODE);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fc0f 	bl	8002ff0 <HAL_Delay>
		TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 80017d2:	2120      	movs	r1, #32
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f7ff ff4b 	bl	8001672 <TOGGLE_PIN>
	for(int i = 0; i < 5; i++)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3301      	adds	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	dde7      	ble.n	80017b8 <START_SIGNAL+0x10>

	}
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <START_PARKING>:
 *
 * distance_TOF[1] = CENTER_LEFT, distance_TOF[2] = FRONT_LEFT, distance_TOF[3] = FRONT_RIGHT, distance_TOF[4] = BACK_LEFT, distance_TOF[5] = BACK_RIGHT, distance_TOF[6] = CENTER_RIGHT
 * distance_US[0] = FRONT_CENTER_US, distance_US[1] = BACK_CENTER_US
 */
static void START_PARKING(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
	int TICK_S, TICK_E;
	int FAHRZEIT;
	int PARKLUECKE_BREITE;
	int GW_PARKLÜCKE = 200U, GW_BACK =  130U, GW_PARALLEL = 80U, GW_KORREKTUR = 80U;	//GW = Grenzwert
 80017fa:	23c8      	movs	r3, #200	; 0xc8
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	2382      	movs	r3, #130	; 0x82
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	2350      	movs	r3, #80	; 0x50
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	2350      	movs	r3, #80	; 0x50
 8001808:	61bb      	str	r3, [r7, #24]
	const float VELO = 0.139f;	// Geschwindigkeit [mm/ms] = 0,5 km/h = PWM(80)???
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <START_PARKING+0x15c>)
 800180c:	617b      	str	r3, [r7, #20]

	SET_PWM_MOTOR(85);
 800180e:	2055      	movs	r0, #85	; 0x55
 8001810:	f7ff ff4a 	bl	80016a8 <SET_PWM_MOTOR>
	while(1)
	{
	//Fahren bis Lücke erkannt wird
		do
		{
			GET_TOF_DATA();
 8001814:	f7ff fb46 	bl	8000ea4 <GET_TOF_DATA>
		}
		while(distance_TOF[2] < GW_PARKLÜCKE);	// TOF FRONT_LEFT
 8001818:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <START_PARKING+0x160>)
 800181a:	889b      	ldrh	r3, [r3, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	4293      	cmp	r3, r2
 8001822:	dcf7      	bgt.n	8001814 <START_PARKING+0x20>

		TICK_S = SysTickGetTickcount();
 8001824:	f001 fa56 	bl	8002cd4 <SysTickGetTickcount>
 8001828:	6138      	str	r0, [r7, #16]
		printf("\n");
 800182a:	200a      	movs	r0, #10
 800182c:	f008 fe44 	bl	800a4b8 <putchar>
		printf("-> Beginn der Parkluecke <-\n");
 8001830:	4849      	ldr	r0, [pc, #292]	; (8001958 <START_PARKING+0x164>)
 8001832:	f008 fe9d 	bl	800a570 <puts>

		//Langsamer fahren,  Encoder für Auswertung
		SET_PWM_MOTOR(80);
 8001836:	2050      	movs	r0, #80	; 0x50
 8001838:	f7ff ff36 	bl	80016a8 <SET_PWM_MOTOR>

	//Fahren bis Lücke Zuende ist
		do
		{
			GET_TOF_DATA();
 800183c:	f7ff fb32 	bl	8000ea4 <GET_TOF_DATA>
		}
		while(distance_TOF[2] > GW_PARKLÜCKE);	//TOF FRONT_LEFT
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <START_PARKING+0x160>)
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	461a      	mov	r2, r3
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	4293      	cmp	r3, r2
 800184a:	dbf7      	blt.n	800183c <START_PARKING+0x48>

		printf("\n");
 800184c:	200a      	movs	r0, #10
 800184e:	f008 fe33 	bl	800a4b8 <putchar>
		printf("-> Ende der Parkluecke <-\n");
 8001852:	4842      	ldr	r0, [pc, #264]	; (800195c <START_PARKING+0x168>)
 8001854:	f008 fe8c 	bl	800a570 <puts>

		TICK_E = SysTickGetTickcount();
 8001858:	f001 fa3c 	bl	8002cd4 <SysTickGetTickcount>
 800185c:	60f8      	str	r0, [r7, #12]
		FAHRZEIT = (TICK_E - TICK_S);
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	60bb      	str	r3, [r7, #8]
		printf("Fahrtzeit bis Parklueckenende: %d ms\n", FAHRZEIT);
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	483d      	ldr	r0, [pc, #244]	; (8001960 <START_PARKING+0x16c>)
 800186a:	f008 fe13 	bl	800a494 <iprintf>

		PARKLUECKE_BREITE = VELO * FAHRZEIT;		//Berechnung der Parklückenbreite
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001878:	edd7 7a05 	vldr	s15, [r7, #20]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001884:	ee17 3a90 	vmov	r3, s15
 8001888:	607b      	str	r3, [r7, #4]
		printf("Breite der Parkluecke: %d mm\n", PARKLUECKE_BREITE);
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4835      	ldr	r0, [pc, #212]	; (8001964 <START_PARKING+0x170>)
 800188e:	f008 fe01 	bl	800a494 <iprintf>

		do
		{
			GET_TOF_DATA();
 8001892:	f7ff fb07 	bl	8000ea4 <GET_TOF_DATA>
		}
		while(distance_TOF[1] > GW_PARKLÜCKE);	//TOF CENTER_LEFT
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <START_PARKING+0x160>)
 8001898:	885b      	ldrh	r3, [r3, #2]
 800189a:	461a      	mov	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	4293      	cmp	r3, r2
 80018a0:	dbf7      	blt.n	8001892 <START_PARKING+0x9e>

		SET_PWM_MOTOR(75);	// Stehen bleiben
 80018a2:	204b      	movs	r0, #75	; 0x4b
 80018a4:	f7ff ff00 	bl	80016a8 <SET_PWM_MOTOR>
		printf("\nAuto in Position fuer Parkvorgang!\n");
 80018a8:	482f      	ldr	r0, [pc, #188]	; (8001968 <START_PARKING+0x174>)
 80018aa:	f008 fe61 	bl	800a570 <puts>

		//Rückwärts und voll links einlenken
		SET_PWM_LENKUNG(100);
 80018ae:	2064      	movs	r0, #100	; 0x64
 80018b0:	f7ff ff0c 	bl	80016cc <SET_PWM_LENKUNG>
		HAL_Delay(1000);
 80018b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b8:	f001 fb9a 	bl	8002ff0 <HAL_Delay>
		SET_PWM_MOTOR(70);		//Rückwärts??
 80018bc:	2046      	movs	r0, #70	; 0x46
 80018be:	f7ff fef3 	bl	80016a8 <SET_PWM_MOTOR>

		//Rückwärts bis BACK_CENTER_US Mindestabstand erkannt
		do
		{
			GET_US_DATA();
 80018c2:	f7ff fcd5 	bl	8001270 <GET_US_DATA>
		}
		while(distance_US[1] > GW_BACK);	//US_BACK
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <START_PARKING+0x178>)
 80018c8:	885b      	ldrh	r3, [r3, #2]
 80018ca:	461a      	mov	r2, r3
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	dbf7      	blt.n	80018c2 <START_PARKING+0xce>

		SET_PWM_MOTOR(75);		//stehen bleiben
 80018d2:	204b      	movs	r0, #75	; 0x4b
 80018d4:	f7ff fee8 	bl	80016a8 <SET_PWM_MOTOR>
		SET_PWM_LENKUNG(50);	//Lenkung voll rechts einschalgen
 80018d8:	2032      	movs	r0, #50	; 0x32
 80018da:	f7ff fef7 	bl	80016cc <SET_PWM_LENKUNG>
		HAL_Delay(1000);
 80018de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e2:	f001 fb85 	bl	8002ff0 <HAL_Delay>
		SET_PWM_MOTOR(70);		//Rückwärts??
 80018e6:	2046      	movs	r0, #70	; 0x46
 80018e8:	f7ff fede 	bl	80016a8 <SET_PWM_MOTOR>

			//Rückwärts bis Auto wieder paralell ist
			while(1)
			{
				GET_TOF_DATA();
 80018ec:	f7ff fada 	bl	8000ea4 <GET_TOF_DATA>

				if (distance_TOF[2] < GW_PARALLEL && distance_TOF[4] < GW_PARALLEL)	//TOF FRONT_LEFT | TOF BACK_LEFT
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <START_PARKING+0x160>)
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	461a      	mov	r2, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4293      	cmp	r3, r2
 80018fa:	ddf7      	ble.n	80018ec <START_PARKING+0xf8>
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <START_PARKING+0x160>)
 80018fe:	891b      	ldrh	r3, [r3, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4293      	cmp	r3, r2
 8001906:	ddf1      	ble.n	80018ec <START_PARKING+0xf8>
				{
					SET_PWM_MOTOR(75);
 8001908:	204b      	movs	r0, #75	; 0x4b
 800190a:	f7ff fecd 	bl	80016a8 <SET_PWM_MOTOR>
					SET_PWM_LENKUNG(75);
 800190e:	204b      	movs	r0, #75	; 0x4b
 8001910:	f7ff fedc 	bl	80016cc <SET_PWM_LENKUNG>
					HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f001 fb6a 	bl	8002ff0 <HAL_Delay>
					printf("\nAuto steht paralell in der Parkluecke!\n");
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <START_PARKING+0x17c>)
 800191e:	f008 fe27 	bl	800a570 <puts>
					break;
 8001922:	bf00      	nop
				}
			}

		SET_PWM_MOTOR(80);
 8001924:	2050      	movs	r0, #80	; 0x50
 8001926:	f7ff febf 	bl	80016a8 <SET_PWM_MOTOR>

		//Geradeaus bis Auto korrekt steht
		do
		{
			GET_US_DATA();
 800192a:	f7ff fca1 	bl	8001270 <GET_US_DATA>
		}
		while(distance_US[0] > GW_KORREKTUR);	//US_FRONT
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <START_PARKING+0x178>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	4293      	cmp	r3, r2
 8001938:	dbf7      	blt.n	800192a <START_PARKING+0x136>

		SET_PWM_MOTOR(75);
 800193a:	204b      	movs	r0, #75	; 0x4b
 800193c:	f7ff feb4 	bl	80016a8 <SET_PWM_MOTOR>
		state = STOP;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <START_PARKING+0x180>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
		break;
 8001946:	bf00      	nop

	}

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	3e0e5604 	.word	0x3e0e5604
 8001954:	200002b4 	.word	0x200002b4
 8001958:	0800c6bc 	.word	0x0800c6bc
 800195c:	0800c6d8 	.word	0x0800c6d8
 8001960:	0800c6f4 	.word	0x0800c6f4
 8001964:	0800c71c 	.word	0x0800c71c
 8001968:	0800c73c 	.word	0x0800c73c
 800196c:	200003bc 	.word	0x200003bc
 8001970:	0800c760 	.word	0x0800c760
 8001974:	20000728 	.word	0x20000728

08001978 <__io_putchar>:

/**
 *	Funktion dient zur printf Ausgabe auf der seriellen Schnittstelle
 */
	PUTCHAR
	{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
		/* e.g. write a character to the USART2 and Loop until the end of transmission */
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001980:	1d39      	adds	r1, r7, #4
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	2201      	movs	r2, #1
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <__io_putchar+0x20>)
 800198a:	f006 f91f 	bl	8007bcc <HAL_UART_Transmit>

		return ch;
 800198e:	687b      	ldr	r3, [r7, #4]
	}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000580 	.word	0x20000580

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2244      	movs	r2, #68	; 0x44
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f008 fec0 	bl	800a730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	463b      	mov	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019c2:	f002 fe65 	bl	8004690 <HAL_PWREx_ControlVoltageScaling>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019cc:	f000 fc22 	bl	8002214 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d0:	2302      	movs	r3, #2
 80019d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019da:	2310      	movs	r3, #16
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019de:	2302      	movs	r3, #2
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e2:	2302      	movs	r3, #2
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 80019ea:	2319      	movs	r3, #25
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019ee:	2307      	movs	r3, #7
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fe9c 	bl	800473c <HAL_RCC_OscConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a0a:	f000 fc03 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2303      	movs	r3, #3
 8001a14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2103      	movs	r1, #3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fa63 	bl	8004ef4 <HAL_RCC_ClockConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a34:	f000 fbee 	bl	8002214 <Error_Handler>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3758      	adds	r7, #88	; 0x58
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <MX_I2C1_Init+0x78>)
 8001a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200B2B;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <MX_I2C1_Init+0x7c>)
 8001a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a7c:	f002 f826 	bl	8003acc <HAL_I2C_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a86:	f000 fbc5 	bl	8002214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001a8e:	f002 fd59 	bl	8004544 <HAL_I2CEx_ConfigAnalogFilter>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a98:	f000 fbbc 	bl	8002214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_I2C1_Init+0x74>)
 8001aa0:	f002 fd9b 	bl	80045da <HAL_I2CEx_ConfigDigitalFilter>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aaa:	f000 fbb3 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003c0 	.word	0x200003c0
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	00200b2b 	.word	0x00200b2b

08001ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2224      	movs	r2, #36	; 0x24
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 fe2e 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <MX_TIM1_Init+0xb0>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001af2:	22ff      	movs	r2, #255	; 0xff
 8001af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b18:	230a      	movs	r3, #10
 8001b1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b20:	2301      	movs	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	480e      	ldr	r0, [pc, #56]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001b34:	f004 fce6 	bl	8006504 <HAL_TIM_Encoder_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b3e:	f000 fb69 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <MX_TIM1_Init+0xac>)
 8001b54:	f005 ff46 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001b5e:	f000 fb59 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000414 	.word	0x20000414
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bb0:	f240 3283 	movw	r2, #899	; 0x383
 8001bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd0:	4823      	ldr	r0, [pc, #140]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bd2:	f004 f86f 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001bdc:	f000 fb1a 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	4619      	mov	r1, r3
 8001bec:	481c      	ldr	r0, [pc, #112]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bee:	f005 f86f 	bl	8006cd0 <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001bf8:	f000 fb0c 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bfc:	4818      	ldr	r0, [pc, #96]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001bfe:	f004 f8b0 	bl	8005d62 <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c08:	f000 fb04 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001c1c:	f005 fee2 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c26:	f000 faf5 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2a:	2360      	movs	r3, #96	; 0x60
 8001c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001c42:	f004 ff31 	bl	8006aa8 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c4c:	f000 fae2 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MX_TIM2_Init+0xec>)
 8001c52:	f000 fdc9 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 8001c56:	bf00      	nop
 8001c58:	3738      	adds	r7, #56	; 0x38
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000460 	.word	0x20000460

08001c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <MX_TIM3_Init+0xf4>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001c9e:	f240 3283 	movw	r2, #899	; 0x383
 8001ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cc0:	f003 fff8 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001cca:	f000 faa3 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481e      	ldr	r0, [pc, #120]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cdc:	f004 fff8 	bl	8006cd0 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001ce6:	f000 fa95 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cea:	481a      	ldr	r0, [pc, #104]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001cec:	f004 f839 	bl	8005d62 <HAL_TIM_PWM_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001cf6:	f000 fa8d 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4812      	ldr	r0, [pc, #72]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001d0a:	f005 fe6b 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d14:	f000 fa7e 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d18:	2360      	movs	r3, #96	; 0x60
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001d30:	f004 feba 	bl	8006aa8 <HAL_TIM_PWM_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001d3a:	f000 fa6b 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);					///*******MODIFIED
 8001d3e:	213c      	movs	r1, #60	; 0x3c
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001d42:	f004 fc85 	bl	8006650 <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM3_Init+0xf0>)
 8001d48:	f000 fd4e 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200004ac 	.word	0x200004ac
 8001d58:	40000400 	.word	0x40000400

08001d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <MX_TIM4_Init+0x98>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d82:	2231      	movs	r2, #49	; 0x31
 8001d84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001da0:	f003 ff88 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 fa33 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001dbc:	f004 ff88 	bl	8006cd0 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001dc6:	f000 fa25 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM4_Init+0x94>)
 8001dd8:	f005 fe04 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001de2:	f000 fa17 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200002c4 	.word	0x200002c4
 8001df4:	40000800 	.word	0x40000800

08001df8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e26:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <MX_TIM5_Init+0xe0>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50-1;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e2c:	2231      	movs	r2, #49	; 0x31
 8001e2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e4a:	4822      	ldr	r0, [pc, #136]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e4c:	f003 ff32 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001e56:	f000 f9dd 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4619      	mov	r1, r3
 8001e66:	481b      	ldr	r0, [pc, #108]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e68:	f004 ff32 	bl	8006cd0 <HAL_TIM_ConfigClockSource>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001e72:	f000 f9cf 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001e76:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e78:	f004 f8da 	bl	8006030 <HAL_TIM_IC_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e82:	f000 f9c7 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001e96:	f005 fda5 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001ea0:	f000 f9b8 	bl	8002214 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <MX_TIM5_Init+0xdc>)
 8001ebc:	f004 fd58 	bl	8006970 <HAL_TIM_IC_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001ec6:	f000 f9a5 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	3730      	adds	r7, #48	; 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000310 	.word	0x20000310
 8001ed8:	40000c00 	.word	0x40000c00

08001edc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f08:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <MX_TIM15_Init+0xe4>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50-1;
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f10:	2231      	movs	r2, #49	; 0x31
 8001f12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f20:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f34:	4821      	ldr	r0, [pc, #132]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f36:	f003 febd 	bl	8005cb4 <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8001f40:	f000 f968 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	4619      	mov	r1, r3
 8001f50:	481a      	ldr	r0, [pc, #104]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f52:	f004 febd 	bl	8006cd0 <HAL_TIM_ConfigClockSource>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001f5c:	f000 f95a 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001f60:	4816      	ldr	r0, [pc, #88]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f62:	f004 f865 	bl	8006030 <HAL_TIM_IC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001f6c:	f000 f952 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480f      	ldr	r0, [pc, #60]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001f80:	f005 fd30 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001f8a:	f000 f943 	bl	8002214 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f92:	2301      	movs	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_TIM15_Init+0xe0>)
 8001fa6:	f004 fce3 	bl	8006970 <HAL_TIM_IC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001fb0:	f000 f930 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000035c 	.word	0x2000035c
 8001fc0:	40014000 	.word	0x40014000

08001fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <MX_USART1_UART_Init+0x5c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002008:	f005 fd92 	bl	8007b30 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002012:	f000 f8ff 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200004f8 	.word	0x200004f8
 8002020:	40013800 	.word	0x40013800

08002024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_USART2_UART_Init+0x58>)
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <MX_USART2_UART_Init+0x5c>)
 800202c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_USART2_UART_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_USART2_UART_Init+0x58>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_USART2_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USART2_UART_Init+0x58>)
 8002068:	f005 fd62 	bl	8007b30 <HAL_UART_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002072:	f000 f8cf 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000580 	.word	0x20000580
 8002080:	40004400 	.word	0x40004400

08002084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <MX_DMA_Init+0x68>)
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <MX_DMA_Init+0x68>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6493      	str	r3, [r2, #72]	; 0x48
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_DMA_Init+0x68>)
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	200e      	movs	r0, #14
 80020a8:	f001 f8a1 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80020ac:	200e      	movs	r0, #14
 80020ae:	f001 f8ba 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	200f      	movs	r0, #15
 80020b8:	f001 f899 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80020bc:	200f      	movs	r0, #15
 80020be:	f001 f8b2 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2010      	movs	r0, #16
 80020c8:	f001 f891 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020cc:	2010      	movs	r0, #16
 80020ce:	f001 f8aa 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2011      	movs	r0, #17
 80020d8:	f001 f889 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020dc:	2011      	movs	r0, #17
 80020de:	f001 f8a2 	bl	8003226 <HAL_NVIC_EnableIRQ>

}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <MX_GPIO_Init+0x118>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <MX_GPIO_Init+0x118>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <MX_GPIO_Init+0x118>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <MX_GPIO_Init+0x118>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a39      	ldr	r2, [pc, #228]	; (8002208 <MX_GPIO_Init+0x118>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <MX_GPIO_Init+0x118>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <MX_GPIO_Init+0x118>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <MX_GPIO_Init+0x118>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <MX_GPIO_Init+0x118>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <MX_GPIO_Init+0x118>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <MX_GPIO_Init+0x118>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <MX_GPIO_Init+0x118>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2120      	movs	r1, #32
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 fc95 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CENTER_LEFT_TOF_Pin|FRONT_LEFT_TOF_Pin|FRONT_RIGHT_TOF_Pin|BACK_LEFT_TOF_Pin
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8002178:	4824      	ldr	r0, [pc, #144]	; (800220c <MX_GPIO_Init+0x11c>)
 800217a:	f001 fc8f 	bl	8003a9c <HAL_GPIO_WritePin>
                          |BACK_RIGHT_TOF_Pin|CENTER_RIGHT_TOF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGGER_FRONT_US_Pin|TRIGGER_BACK_US_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002184:	4822      	ldr	r0, [pc, #136]	; (8002210 <MX_GPIO_Init+0x120>)
 8002186:	f001 fc89 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_Pin;
 800218a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	481b      	ldr	r0, [pc, #108]	; (800220c <MX_GPIO_Init+0x11c>)
 80021a0:	f001 fad2 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021a4:	2320      	movs	r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f001 fac3 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : CENTER_LEFT_TOF_Pin FRONT_LEFT_TOF_Pin FRONT_RIGHT_TOF_Pin BACK_LEFT_TOF_Pin
                           BACK_RIGHT_TOF_Pin CENTER_RIGHT_TOF_Pin */
  GPIO_InitStruct.Pin = CENTER_LEFT_TOF_Pin|FRONT_LEFT_TOF_Pin|FRONT_RIGHT_TOF_Pin|BACK_LEFT_TOF_Pin
 80021c2:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80021c6:	617b      	str	r3, [r7, #20]
                          |BACK_RIGHT_TOF_Pin|CENTER_RIGHT_TOF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_GPIO_Init+0x11c>)
 80021dc:	f001 fab4 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_FRONT_US_Pin TRIGGER_BACK_US_Pin */
  GPIO_InitStruct.Pin = TRIGGER_FRONT_US_Pin|TRIGGER_BACK_US_Pin;
 80021e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_GPIO_Init+0x120>)
 80021fa:	f001 faa5 	bl	8003748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	48000800 	.word	0x48000800
 8002210:	48000400 	.word	0x48000400

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x8>
	...

08002220 <VL53L4CD_RdDWord>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	4603      	mov	r3, r0
 8002228:	603a      	str	r2, [r7, #0]
 800222a:	80fb      	strh	r3, [r7, #6]
 800222c:	460b      	mov	r3, r1
 800222e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800223e:	88bb      	ldrh	r3, [r7, #4]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	88f9      	ldrh	r1, [r7, #6]
 800224a:	2364      	movs	r3, #100	; 0x64
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2302      	movs	r3, #2
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <VL53L4CD_RdDWord+0x74>)
 8002252:	f001 fcd7 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 800225a:	f107 0208 	add.w	r2, r7, #8
 800225e:	88f9      	ldrh	r1, [r7, #6]
 8002260:	2364      	movs	r3, #100	; 0x64
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2304      	movs	r3, #4
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <VL53L4CD_RdDWord+0x74>)
 8002268:	f001 fde4 	bl	8003e34 <HAL_I2C_Master_Receive>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8002270:	7a3b      	ldrb	r3, [r7, #8]
 8002272:	061a      	lsls	r2, r3, #24
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 800227a:	7abb      	ldrb	r3, [r7, #10]
 800227c:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800227e:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8002280:	7afa      	ldrb	r2, [r7, #11]
 8002282:	4313      	orrs	r3, r2
 8002284:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	601a      	str	r2, [r3, #0]
	return status;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200003c0 	.word	0x200003c0

08002298 <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	4603      	mov	r3, r0
 80022a0:	603a      	str	r2, [r7, #0]
 80022a2:	80fb      	strh	r3, [r7, #6]
 80022a4:	460b      	mov	r3, r1
 80022a6:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80022ac:	88bb      	ldrh	r3, [r7, #4]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80022bc:	f107 020c 	add.w	r2, r7, #12
 80022c0:	88f9      	ldrh	r1, [r7, #6]
 80022c2:	2364      	movs	r3, #100	; 0x64
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2302      	movs	r3, #2
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <VL53L4CD_RdWord+0x70>)
 80022ca:	f001 fc9b 	bl	8003c04 <HAL_I2C_Master_Transmit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 80022d2:	f107 0208 	add.w	r2, r7, #8
 80022d6:	88f9      	ldrh	r1, [r7, #6]
 80022d8:	2364      	movs	r3, #100	; 0x64
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2302      	movs	r3, #2
 80022de:	480a      	ldr	r0, [pc, #40]	; (8002308 <VL53L4CD_RdWord+0x70>)
 80022e0:	f001 fda8 	bl	8003e34 <HAL_I2C_Master_Receive>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 80022e8:	7a3b      	ldrb	r3, [r7, #8]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	7a7b      	ldrb	r3, [r7, #9]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	801a      	strh	r2, [r3, #0]
	return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200003c0 	.word	0x200003c0

0800230c <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	4603      	mov	r3, r0
 8002314:	603a      	str	r2, [r7, #0]
 8002316:	80fb      	strh	r3, [r7, #6]
 8002318:	460b      	mov	r3, r1
 800231a:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8002330:	f107 020c 	add.w	r2, r7, #12
 8002334:	88f9      	ldrh	r1, [r7, #6]
 8002336:	2364      	movs	r3, #100	; 0x64
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2302      	movs	r3, #2
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <VL53L4CD_RdByte+0x60>)
 800233e:	f001 fc61 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8002346:	f107 0208 	add.w	r2, r7, #8
 800234a:	88f9      	ldrh	r1, [r7, #6]
 800234c:	2364      	movs	r3, #100	; 0x64
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <VL53L4CD_RdByte+0x60>)
 8002354:	f001 fd6e 	bl	8003e34 <HAL_I2C_Master_Receive>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 800235c:	7a3a      	ldrb	r2, [r7, #8]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	701a      	strb	r2, [r3, #0]
	return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200003c0 	.word	0x200003c0

08002370 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af02      	add	r7, sp, #8
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	460b      	mov	r3, r1
 800237c:	80bb      	strh	r3, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8002390:	88bb      	ldrh	r3, [r7, #4]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 800239a:	f107 020c 	add.w	r2, r7, #12
 800239e:	88f9      	ldrh	r1, [r7, #6]
 80023a0:	2364      	movs	r3, #100	; 0x64
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2303      	movs	r3, #3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <VL53L4CD_WrByte+0x4c>)
 80023a8:	f001 fc2c 	bl	8003c04 <HAL_I2C_Master_Transmit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
	return status;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200003c0 	.word	0x200003c0

080023c0 <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
 80023ca:	460b      	mov	r3, r1
 80023cc:	80bb      	strh	r3, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80023d6:	88bb      	ldrh	r3, [r7, #4]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	88f9      	ldrh	r1, [r7, #6]
 80023fc:	2364      	movs	r3, #100	; 0x64
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2304      	movs	r3, #4
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <VL53L4CD_WrWord+0x58>)
 8002404:	f001 fbfe 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8002408:	4603      	mov	r3, r0
 800240a:	73fb      	strb	r3, [r7, #15]
	return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200003c0 	.word	0x200003c0

0800241c <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	4603      	mov	r3, r0
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	460b      	mov	r3, r1
 800242a:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	0e1b      	lsrs	r3, r3, #24
 8002444:	b2db      	uxtb	r3, r3
 8002446:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	b2db      	uxtb	r3, r3
 800244e:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	b2db      	uxtb	r3, r3
 8002456:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 800245e:	f107 0208 	add.w	r2, r7, #8
 8002462:	88f9      	ldrh	r1, [r7, #6]
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2306      	movs	r3, #6
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <VL53L4CD_WrDWord+0x64>)
 800246c:	f001 fbca 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8002470:	4603      	mov	r3, r0
 8002472:	73fb      	strb	r3, [r7, #15]
	return status;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003c0 	.word	0x200003c0

08002484 <WaitMs>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f000 fdad 	bl	8002ff0 <HAL_Delay>
	return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x44>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_MspInit+0x44>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x44>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_MspInit+0x44>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0ac      	sub	sp, #176	; 0xb0
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2288      	movs	r2, #136	; 0x88
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f008 f911 	bl	800a730 <memset>
  if(hi2c->Instance==I2C1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d147      	bne.n	80025a8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800251c:	2300      	movs	r3, #0
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4618      	mov	r0, r3
 8002526:	f002 ff09 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002530:	f7ff fe70 	bl	8002214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800254c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002554:	2312      	movs	r3, #18
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255a:	2301      	movs	r3, #1
 800255c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002566:	2304      	movs	r3, #4
 8002568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002570:	4619      	mov	r1, r3
 8002572:	4811      	ldr	r0, [pc, #68]	; (80025b8 <HAL_I2C_MspInit+0xd0>)
 8002574:	f001 f8e8 	bl	8003748 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_I2C_MspInit+0xd4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_I2C_MspInit+0xd4>)
 800257e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002582:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_I2C_MspInit+0xd4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_I2C_MspInit+0xd4>)
 800258a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800258e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a8:	bf00      	nop
 80025aa:	37b0      	adds	r7, #176	; 0xb0
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40005400 	.word	0x40005400
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	40010000 	.word	0x40010000

080025c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_TIM_Encoder_MspInit+0x90>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d131      	bne.n	8002646 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 80025e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ec:	6613      	str	r3, [r2, #96]	; 0x60
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_TIM_Encoder_MspInit+0x94>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002624:	2301      	movs	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f001 f889 	bl	8003748 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	2018      	movs	r0, #24
 800263c:	f000 fdd7 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002640:	2018      	movs	r0, #24
 8002642:	f000 fdf0 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d114      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800267a:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	201c      	movs	r0, #28
 8002698:	f000 fda9 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800269c:	201c      	movs	r0, #28
 800269e:	f000 fdc2 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80026a2:	e090      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_TIM_Base_MspInit+0x17c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10c      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ae:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ba:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
}
 80026c6:	e07e      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM4)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a42      	ldr	r2, [pc, #264]	; (80027d8 <HAL_TIM_Base_MspInit+0x180>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4a3e      	ldr	r2, [pc, #248]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]
}
 80026ea:	e06c      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM5)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <HAL_TIM_Base_MspInit+0x184>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d131      	bne.n	800275a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_FRONT_US_Pin;
 8002726:	2301      	movs	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002736:	2302      	movs	r3, #2
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_FRONT_US_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273e:	4619      	mov	r1, r3
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f001 f800 	bl	8003748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	2032      	movs	r0, #50	; 0x32
 800274e:	f000 fd4e 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002752:	2032      	movs	r0, #50	; 0x32
 8002754:	f000 fd67 	bl	8003226 <HAL_NVIC_EnableIRQ>
}
 8002758:	e035      	b.n	80027c6 <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM15)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <HAL_TIM_Base_MspInit+0x188>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d130      	bne.n	80027c6 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	6613      	str	r3, [r2, #96]	; 0x60
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_TIM_Base_MspInit+0x178>)
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_BACK_US_Pin;
 8002794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027a6:	230e      	movs	r3, #14
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_BACK_US_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <HAL_TIM_Base_MspInit+0x18c>)
 80027b2:	f000 ffc9 	bl	8003748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2018      	movs	r0, #24
 80027bc:	f000 fd17 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80027c0:	2018      	movs	r0, #24
 80027c2:	f000 fd30 	bl	8003226 <HAL_NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40014000 	.word	0x40014000
 80027e4:	48000400 	.word	0x48000400

080027e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d11d      	bne.n	8002846 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002822:	2302      	movs	r3, #2
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002832:	2301      	movs	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002840:	f000 ff82 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002844:	e021      	b.n	800288a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_TIM_MspPostInit+0xb0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d11c      	bne.n	800288a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_TIM_MspPostInit+0xac>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002878:	2302      	movs	r3, #2
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002886:	f000 ff5f 	bl	8003748 <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40000400 	.word	0x40000400

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0ae      	sub	sp, #184	; 0xb8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2288      	movs	r2, #136	; 0x88
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f007 ff37 	bl	800a730 <memset>
  if(huart->Instance==USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <HAL_UART_MspInit+0x1a4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	f040 80c7 	bne.w	8002a5c <HAL_UART_MspInit+0x1c0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028d2:	2300      	movs	r3, #0
 80028d4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fd2e 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028e6:	f7ff fc95 	bl	8002214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4a55      	ldr	r2, [pc, #340]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6613      	str	r3, [r2, #96]	; 0x60
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a4f      	ldr	r2, [pc, #316]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_UART_MspInit+0x1a8>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800294c:	2307      	movs	r3, #7
 800294e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002956:	4619      	mov	r1, r3
 8002958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800295c:	f000 fef4 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002960:	2340      	movs	r3, #64	; 0x40
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002978:	2307      	movs	r3, #7
 800297a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002982:	4619      	mov	r1, r3
 8002984:	4830      	ldr	r0, [pc, #192]	; (8002a48 <HAL_UART_MspInit+0x1ac>)
 8002986:	f000 fedf 	bl	8003748 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_UART_MspInit+0x1b4>)
 800298e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 8002992:	2202      	movs	r2, #2
 8002994:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002996:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029c0:	4822      	ldr	r0, [pc, #136]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029c2:	f000 fc4b 	bl	800325c <HAL_DMA_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80029cc:	f7ff fc22 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029d4:	675a      	str	r2, [r3, #116]	; 0x74
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_UART_MspInit+0x1b0>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_UART_MspInit+0x1bc>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029e4:	2202      	movs	r2, #2
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029ea:	2210      	movs	r2, #16
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a12:	4810      	ldr	r0, [pc, #64]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a14:	f000 fc22 	bl	800325c <HAL_DMA_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8002a1e:	f7ff fbf9 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a26:	671a      	str	r2, [r3, #112]	; 0x70
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <HAL_UART_MspInit+0x1b8>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2025      	movs	r0, #37	; 0x25
 8002a34:	f000 fbdb 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a38:	2025      	movs	r0, #37	; 0x25
 8002a3a:	f000 fbf4 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a3e:	e0a9      	b.n	8002b94 <HAL_UART_MspInit+0x2f8>
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40021000 	.word	0x40021000
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	20000608 	.word	0x20000608
 8002a50:	40020058 	.word	0x40020058
 8002a54:	20000650 	.word	0x20000650
 8002a58:	40020044 	.word	0x40020044
  else if(huart->Instance==USART2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_UART_MspInit+0x300>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	f040 8096 	bne.w	8002b94 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fc61 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8002a80:	f7ff fbc8 	bl	8002214 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	4a45      	ldr	r2, [pc, #276]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a90:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_UART_MspInit+0x304>)
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002acc:	2307      	movs	r3, #7
 8002ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002adc:	f000 fe34 	bl	8003748 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <HAL_UART_MspInit+0x30c>)
 8002ae4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002ae6:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002ae8:	2202      	movs	r2, #2
 8002aea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aec:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b16:	4823      	ldr	r0, [pc, #140]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b18:	f000 fba0 	bl	800325c <HAL_DMA_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8002b22:	f7ff fb77 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b2a:	675a      	str	r2, [r3, #116]	; 0x74
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_UART_MspInit+0x308>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_UART_MspInit+0x314>)
 8002b36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b40:	2210      	movs	r2, #16
 8002b42:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b6a:	f000 fb77 	bl	800325c <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8002b74:	f7ff fb4e 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b7c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_UART_MspInit+0x310>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2026      	movs	r0, #38	; 0x26
 8002b8a:	f000 fb30 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b8e:	2026      	movs	r0, #38	; 0x26
 8002b90:	f000 fb49 	bl	8003226 <HAL_NVIC_EnableIRQ>
}
 8002b94:	bf00      	nop
 8002b96:	37b8      	adds	r7, #184	; 0xb8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	20000698 	.word	0x20000698
 8002ba8:	4002006c 	.word	0x4002006c
 8002bac:	200006e0 	.word	0x200006e0
 8002bb0:	40020080 	.word	0x40020080

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <NMI_Handler+0x4>

08002bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <HardFault_Handler+0x4>

08002bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <MemManage_Handler+0x4>

08002bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <BusFault_Handler+0x4>

08002bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <UsageFault_Handler+0x4>

08002bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c00:	f000 f9d6 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ulTimer += 1;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <SysTick_Handler+0x18>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	4a02      	ldr	r2, [pc, #8]	; (8002c14 <SysTick_Handler+0x18>)
 8002c0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000072c 	.word	0x2000072c

08002c18 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <DMA1_Channel4_IRQHandler+0x10>)
 8002c1e:	f000 fcb4 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000650 	.word	0x20000650

08002c2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <DMA1_Channel5_IRQHandler+0x10>)
 8002c32:	f000 fcaa 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000608 	.word	0x20000608

08002c40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <DMA1_Channel6_IRQHandler+0x10>)
 8002c46:	f000 fca0 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000698 	.word	0x20000698

08002c54 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <DMA1_Channel7_IRQHandler+0x10>)
 8002c5a:	f000 fc96 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200006e0 	.word	0x200006e0

08002c68 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002c6e:	f003 fd7d 	bl	800676c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002c72:	4803      	ldr	r0, [pc, #12]	; (8002c80 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002c74:	f003 fd7a 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000414 	.word	0x20000414
 8002c80:	2000035c 	.word	0x2000035c

08002c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM2_IRQHandler+0x10>)
 8002c8a:	f003 fd6f 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000460 	.word	0x20000460

08002c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <USART1_IRQHandler+0x10>)
 8002c9e:	f005 f8e7 	bl	8007e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200004f8 	.word	0x200004f8

08002cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <USART2_IRQHandler+0x10>)
 8002cb2:	f005 f8dd 	bl	8007e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000580 	.word	0x20000580

08002cc0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM5_IRQHandler+0x10>)
 8002cc6:	f003 fd51 	bl	800676c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000310 	.word	0x20000310

08002cd4 <SysTickGetTickcount>:

/* USER CODE BEGIN 1 */
unsigned long SysTickGetTickcount(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
	unsigned long ulTickcount;

	ulTickcount = ulTimer;
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <SysTickGetTickcount+0x1c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	607b      	str	r3, [r7, #4]

	return ulTickcount;
 8002ce0:	687b      	ldr	r3, [r7, #4]


}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000072c 	.word	0x2000072c

08002cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
	return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <_kill>:

int _kill(int pid, int sig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d0e:	f007 fd61 	bl	800a7d4 <__errno>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2216      	movs	r2, #22
 8002d16:	601a      	str	r2, [r3, #0]
	return -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_exit>:

void _exit (int status)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffe7 	bl	8002d04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d36:	e7fe      	b.n	8002d36 <_exit+0x12>

08002d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e00a      	b.n	8002d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d4a:	f3af 8000 	nop.w
 8002d4e:	4601      	mov	r1, r0
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	60ba      	str	r2, [r7, #8]
 8002d56:	b2ca      	uxtb	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbf0      	blt.n	8002d4a <_read+0x12>
	}

return len;
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e009      	b.n	8002d98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	60ba      	str	r2, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fdf3 	bl	8001978 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf1      	blt.n	8002d84 <_write+0x12>
	}
	return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_close>:

int _close(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return -1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_isatty>:

int _isatty(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <_sbrk+0x5c>)
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <_sbrk+0x60>)
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <_sbrk+0x64>)
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <_sbrk+0x68>)
 8002e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d207      	bcs.n	8002e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e44:	f007 fcc6 	bl	800a7d4 <__errno>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	e009      	b.n	8002e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <_sbrk+0x64>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <_sbrk+0x64>)
 8002e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20018000 	.word	0x20018000
 8002e74:	00000400 	.word	0x00000400
 8002e78:	20000730 	.word	0x20000730
 8002e7c:	20000888 	.word	0x20000888

08002e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <SystemInit+0x20>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <SystemInit+0x20>)
 8002e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ea8:	f7ff ffea 	bl	8002e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eae:	490d      	ldr	r1, [pc, #52]	; (8002ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <LoopForever+0xe>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	; (8002ef0 <LoopForever+0x16>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f007 fc85 	bl	800a7e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ed6:	f7fe fb17 	bl	8001508 <main>

08002eda <LoopForever>:

LoopForever:
    b LoopForever
 8002eda:	e7fe      	b.n	8002eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002edc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002ee8:	0800cbc4 	.word	0x0800cbc4
  ldr r2, =_sbss
 8002eec:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ef0:	20000884 	.word	0x20000884

08002ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC1_2_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_Init+0x3c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_Init+0x3c>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f000 f962 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f14:	2000      	movs	r0, #0
 8002f16:	f000 f80f 	bl	8002f38 <HAL_InitTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	71fb      	strb	r3, [r7, #7]
 8002f24:	e001      	b.n	8002f2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f26:	f7ff fabb 	bl	80024a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_InitTick+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_InitTick+0x70>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_InitTick+0x6c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f96d 	bl	8003242 <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d809      	bhi.n	8002f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f000 f937 	bl	80031ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_InitTick+0x74>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e007      	b.n	8002f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e004      	b.n	8002f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e001      	b.n	8002f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000002c 	.word	0x2000002c
 8002fa8:	20000024 	.word	0x20000024
 8002fac:	20000028 	.word	0x20000028

08002fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_IncTick+0x24>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_IncTick+0x24>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	2000002c 	.word	0x2000002c
 8002fd4:	20000734 	.word	0x20000734

08002fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return uwTick;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_GetTick+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000734 	.word	0x20000734

08002ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff ffee 	bl	8002fd8 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d005      	beq.n	8003016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_Delay+0x44>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003016:	bf00      	nop
 8003018:	f7ff ffde 	bl	8002fd8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d8f7      	bhi.n	8003018 <HAL_Delay+0x28>
  {
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000002c 	.word	0x2000002c

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff3e 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff8e 	bl	800312c <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5d 	bl	80030d8 <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff31 	bl	800309c <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa2 	bl	8003194 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e098      	b.n	80033a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_DMA_Init+0x150>)
 8003276:	429a      	cmp	r2, r3
 8003278:	d80f      	bhi.n	800329a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_DMA_Init+0x154>)
 8003282:	4413      	add	r3, r2
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_DMA_Init+0x158>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a48      	ldr	r2, [pc, #288]	; (80033b8 <HAL_DMA_Init+0x15c>)
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
 8003298:	e00e      	b.n	80032b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_DMA_Init+0x160>)
 80032a2:	4413      	add	r3, r2
 80032a4:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_DMA_Init+0x158>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	009a      	lsls	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a42      	ldr	r2, [pc, #264]	; (80033c0 <HAL_DMA_Init+0x164>)
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003312:	d039      	beq.n	8003388 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	4a27      	ldr	r2, [pc, #156]	; (80033b8 <HAL_DMA_Init+0x15c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d11a      	bne.n	8003354 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_DMA_Init+0x168>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f003 031c 	and.w	r3, r3, #28
 800332a:	210f      	movs	r1, #15
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	4924      	ldr	r1, [pc, #144]	; (80033c4 <HAL_DMA_Init+0x168>)
 8003334:	4013      	ands	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_DMA_Init+0x168>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f003 031c 	and.w	r3, r3, #28
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	491d      	ldr	r1, [pc, #116]	; (80033c4 <HAL_DMA_Init+0x168>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
 8003352:	e019      	b.n	8003388 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_DMA_Init+0x16c>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	f003 031c 	and.w	r3, r3, #28
 8003360:	210f      	movs	r1, #15
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	4917      	ldr	r1, [pc, #92]	; (80033c8 <HAL_DMA_Init+0x16c>)
 800336a:	4013      	ands	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_DMA_Init+0x16c>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f003 031c 	and.w	r3, r3, #28
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	4911      	ldr	r1, [pc, #68]	; (80033c8 <HAL_DMA_Init+0x16c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40020407 	.word	0x40020407
 80033b0:	bffdfff8 	.word	0xbffdfff8
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020000 	.word	0x40020000
 80033bc:	bffdfbf8 	.word	0xbffdfbf8
 80033c0:	40020400 	.word	0x40020400
 80033c4:	400200a8 	.word	0x400200a8
 80033c8:	400204a8 	.word	0x400204a8

080033cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_DMA_Start_IT+0x20>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e04b      	b.n	8003484 <HAL_DMA_Start_IT+0xb8>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d13a      	bne.n	8003476 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f95f 	bl	80036e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 020e 	orr.w	r2, r2, #14
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00f      	b.n	8003464 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 020a 	orr.w	r2, r2, #10
 8003462:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e005      	b.n	8003482 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800347e:	2302      	movs	r3, #2
 8003480:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d008      	beq.n	80034b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2204      	movs	r2, #4
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e022      	b.n	80034fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 020e 	bic.w	r2, r2, #14
 80034c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f003 021c 	and.w	r2, r3, #28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d005      	beq.n	800352c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2204      	movs	r2, #4
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e029      	b.n	8003580 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020e 	bic.w	r2, r2, #14
 800353a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f003 021c 	and.w	r2, r3, #28
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
    }
  }
  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 031c 	and.w	r3, r3, #28
 80035aa:	2204      	movs	r2, #4
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d026      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7a>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d021      	beq.n	8003604 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0204 	bic.w	r2, r2, #4
 80035dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 021c 	and.w	r2, r3, #28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2104      	movs	r1, #4
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d071      	beq.n	80036de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003602:	e06c      	b.n	80036de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 031c 	and.w	r3, r3, #28
 800360c:	2202      	movs	r2, #2
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02e      	beq.n	8003676 <HAL_DMA_IRQHandler+0xec>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d029      	beq.n	8003676 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020a 	bic.w	r2, r2, #10
 800363e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f003 021c 	and.w	r2, r3, #28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2102      	movs	r1, #2
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d038      	beq.n	80036de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003674:	e033      	b.n	80036de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 031c 	and.w	r3, r3, #28
 800367e:	2208      	movs	r2, #8
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02a      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x156>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d025      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 020e 	bic.w	r2, r2, #14
 80036a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f003 021c 	and.w	r2, r3, #28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
}
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 021c 	and.w	r2, r3, #28
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d108      	bne.n	800372c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800372a:	e007      	b.n	800373c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003756:	e17f      	b.n	8003a58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8171 	beq.w	8003a52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d005      	beq.n	8003788 <HAL_GPIO_Init+0x40>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d130      	bne.n	80037ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037be:	2201      	movs	r2, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0201 	and.w	r2, r3, #1
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d118      	bne.n	8003828 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037fc:	2201      	movs	r2, #1
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	f003 0201 	and.w	r2, r3, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b03      	cmp	r3, #3
 8003832:	d017      	beq.n	8003864 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d123      	bne.n	80038b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	08da      	lsrs	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3208      	adds	r2, #8
 80038b2:	6939      	ldr	r1, [r7, #16]
 80038b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0203 	and.w	r2, r3, #3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80ac 	beq.w	8003a52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <HAL_GPIO_Init+0x330>)
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	4a5e      	ldr	r2, [pc, #376]	; (8003a78 <HAL_GPIO_Init+0x330>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6613      	str	r3, [r2, #96]	; 0x60
 8003906:	4b5c      	ldr	r3, [pc, #368]	; (8003a78 <HAL_GPIO_Init+0x330>)
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003912:	4a5a      	ldr	r2, [pc, #360]	; (8003a7c <HAL_GPIO_Init+0x334>)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	220f      	movs	r2, #15
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800393c:	d025      	beq.n	800398a <HAL_GPIO_Init+0x242>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4f      	ldr	r2, [pc, #316]	; (8003a80 <HAL_GPIO_Init+0x338>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01f      	beq.n	8003986 <HAL_GPIO_Init+0x23e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4e      	ldr	r2, [pc, #312]	; (8003a84 <HAL_GPIO_Init+0x33c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d019      	beq.n	8003982 <HAL_GPIO_Init+0x23a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4d      	ldr	r2, [pc, #308]	; (8003a88 <HAL_GPIO_Init+0x340>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_GPIO_Init+0x236>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4c      	ldr	r2, [pc, #304]	; (8003a8c <HAL_GPIO_Init+0x344>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00d      	beq.n	800397a <HAL_GPIO_Init+0x232>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_GPIO_Init+0x348>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <HAL_GPIO_Init+0x22e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_GPIO_Init+0x34c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_GPIO_Init+0x22a>
 800396e:	2306      	movs	r3, #6
 8003970:	e00c      	b.n	800398c <HAL_GPIO_Init+0x244>
 8003972:	2307      	movs	r3, #7
 8003974:	e00a      	b.n	800398c <HAL_GPIO_Init+0x244>
 8003976:	2305      	movs	r3, #5
 8003978:	e008      	b.n	800398c <HAL_GPIO_Init+0x244>
 800397a:	2304      	movs	r3, #4
 800397c:	e006      	b.n	800398c <HAL_GPIO_Init+0x244>
 800397e:	2303      	movs	r3, #3
 8003980:	e004      	b.n	800398c <HAL_GPIO_Init+0x244>
 8003982:	2302      	movs	r3, #2
 8003984:	e002      	b.n	800398c <HAL_GPIO_Init+0x244>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_GPIO_Init+0x244>
 800398a:	2300      	movs	r3, #0
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	f002 0203 	and.w	r2, r2, #3
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	4093      	lsls	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800399c:	4937      	ldr	r1, [pc, #220]	; (8003a7c <HAL_GPIO_Init+0x334>)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	3302      	adds	r3, #2
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_GPIO_Init+0x350>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ce:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_GPIO_Init+0x350>)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_GPIO_Init+0x350>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_GPIO_Init+0x350>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_GPIO_Init+0x350>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_GPIO_Init+0x350>)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_GPIO_Init+0x350>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a4c:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <HAL_GPIO_Init+0x350>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f ae78 	bne.w	8003758 <HAL_GPIO_Init+0x10>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	48000400 	.word	0x48000400
 8003a84:	48000800 	.word	0x48000800
 8003a88:	48000c00 	.word	0x48000c00
 8003a8c:	48001000 	.word	0x48001000
 8003a90:	48001400 	.word	0x48001400
 8003a94:	48001800 	.word	0x48001800
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e08d      	b.n	8003bfa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe fcf8 	bl	80024e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e006      	b.n	8003b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d108      	bne.n	8003b6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	e007      	b.n	8003b7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
 8003c14:	4613      	mov	r3, r2
 8003c16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	f040 80fd 	bne.w	8003e20 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x30>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e0f6      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c3c:	f7ff f9cc 	bl	8002fd8 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2319      	movs	r3, #25
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fa0a 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0e1      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2221      	movs	r2, #33	; 0x21
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	893a      	ldrh	r2, [r7, #8]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2bff      	cmp	r3, #255	; 0xff
 8003c8e:	d906      	bls.n	8003c9e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e007      	b.n	8003cae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d024      	beq.n	8003d00 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	8979      	ldrh	r1, [r7, #10]
 8003cf2:	4b4e      	ldr	r3, [pc, #312]	; (8003e2c <HAL_I2C_Master_Transmit+0x228>)
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fbf1 	bl	80044e0 <I2C_TransferConfig>
 8003cfe:	e066      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_I2C_Master_Transmit+0x228>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fbe6 	bl	80044e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d14:	e05b      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9f3 	bl	8004106 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07b      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d034      	beq.n	8003dce <HAL_I2C_Master_Transmit+0x1ca>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d130      	bne.n	8003dce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f976 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e04d      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d90e      	bls.n	8003dae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	8979      	ldrh	r1, [r7, #10]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fb9a 	bl	80044e0 <I2C_TransferConfig>
 8003dac:	e00f      	b.n	8003dce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb89 	bl	80044e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d19e      	bne.n	8003d16 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	6a39      	ldr	r1, [r7, #32]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f9d9 	bl	8004194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01a      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_I2C_Master_Transmit+0x22c>)
 8003e00:	400b      	ands	r3, r1
 8003e02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	80002000 	.word	0x80002000
 8003e30:	fe00e800 	.word	0xfe00e800

08003e34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
 8003e44:	4613      	mov	r3, r2
 8003e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	f040 80db 	bne.w	800400c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2C_Master_Receive+0x30>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0d4      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e6c:	f7ff f8b4 	bl	8002fd8 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2319      	movs	r3, #25
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8f2 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0bf      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2222      	movs	r2, #34	; 0x22
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2bff      	cmp	r3, #255	; 0xff
 8003ebe:	d90e      	bls.n	8003ede <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	4b52      	ldr	r3, [pc, #328]	; (8004018 <HAL_I2C_Master_Receive+0x1e4>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fb02 	bl	80044e0 <I2C_TransferConfig>
 8003edc:	e06d      	b.n	8003fba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	8979      	ldrh	r1, [r7, #10]
 8003ef0:	4b49      	ldr	r3, [pc, #292]	; (8004018 <HAL_I2C_Master_Receive+0x1e4>)
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 faf1 	bl	80044e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003efe:	e05c      	b.n	8003fba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f989 	bl	800421c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e07c      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d034      	beq.n	8003fba <HAL_I2C_Master_Receive+0x186>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d130      	bne.n	8003fba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f880 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e04d      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2bff      	cmp	r3, #255	; 0xff
 8003f7a:	d90e      	bls.n	8003f9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	22ff      	movs	r2, #255	; 0xff
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 faa4 	bl	80044e0 <I2C_TransferConfig>
 8003f98:	e00f      	b.n	8003fba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fa93 	bl	80044e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19d      	bne.n	8003f00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	6a39      	ldr	r1, [r7, #32]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8e3 	bl	8004194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01a      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_I2C_Master_Receive+0x1e8>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	80002400 	.word	0x80002400
 800401c:	fe00e800 	.word	0xfe00e800

08004020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d103      	bne.n	800403e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d007      	beq.n	800405c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	619a      	str	r2, [r3, #24]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004078:	e031      	b.n	80040de <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d02d      	beq.n	80040de <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe ffa9 	bl	8002fd8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d122      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d113      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00f      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0be      	beq.n	800407a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004112:	e033      	b.n	800417c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f901 	bl	8004320 <I2C_IsErrorOccurred>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e031      	b.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d025      	beq.n	800417c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fe ff52 	bl	8002fd8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11a      	bne.n	800417c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d013      	beq.n	800417c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e007      	b.n	800418c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d1c4      	bne.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a0:	e02f      	b.n	8004202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f8ba 	bl	8004320 <I2C_IsErrorOccurred>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e02d      	b.n	8004212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b6:	f7fe ff0f 	bl	8002fd8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11a      	bne.n	8004202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d013      	beq.n	8004202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e007      	b.n	8004212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d1c8      	bne.n	80041a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004228:	e06b      	b.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f876 	bl	8004320 <I2C_IsErrorOccurred>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e069      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d138      	bne.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d105      	bne.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e055      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d107      	bne.n	8004284 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2210      	movs	r2, #16
 800427a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2204      	movs	r2, #4
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
 8004282:	e002      	b.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2220      	movs	r2, #32
 8004290:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b1f      	ldr	r3, [pc, #124]	; (800431c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800429e:	400b      	ands	r3, r1
 80042a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e029      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fe8b 	bl	8002fd8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d00f      	beq.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d18c      	bne.n	800422a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	fe00e800 	.word	0xfe00e800

08004320 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d068      	beq.n	800441e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004354:	e049      	b.n	80043ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d045      	beq.n	80043ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fe fe3b 	bl	8002fd8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_IsErrorOccurred+0x54>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d13a      	bne.n	80043ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004386:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004396:	d121      	bne.n	80043dc <I2C_IsErrorOccurred+0xbc>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800439e:	d01d      	beq.n	80043dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d01a      	beq.n	80043dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043b6:	f7fe fe0f 	bl	8002fd8 <HAL_GetTick>
 80043ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043bc:	e00e      	b.n	80043dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043be:	f7fe fe0b 	bl	8002fd8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b19      	cmp	r3, #25
 80043ca:	d907      	bls.n	80043dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80043da:	e006      	b.n	80043ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d1e9      	bne.n	80043be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d003      	beq.n	8004400 <I2C_IsErrorOccurred+0xe0>
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0aa      	beq.n	8004356 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004440:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f043 0308 	orr.w	r3, r3, #8
 8004458:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004462:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004484:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800448c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01c      	beq.n	80044ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fdc3 	bl	8004020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <I2C_IsErrorOccurred+0x1bc>)
 80044a6:	400b      	ands	r3, r1
 80044a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80044ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	4613      	mov	r3, r2
 80044f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044f8:	7a7b      	ldrb	r3, [r7, #9]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004500:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4313      	orrs	r3, r2
 800450a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800450e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	0d5b      	lsrs	r3, r3, #21
 800451a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <I2C_TransferConfig+0x60>)
 8004520:	430b      	orrs	r3, r1
 8004522:	43db      	mvns	r3, r3
 8004524:	ea02 0103 	and.w	r1, r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	03ff63ff 	.word	0x03ff63ff

08004544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d138      	bne.n	80045cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004564:	2302      	movs	r3, #2
 8004566:	e032      	b.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	; 0x24
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d139      	bne.n	8004664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e033      	b.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800462c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_PWREx_GetVoltageRange+0x18>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40007000 	.word	0x40007000

08004690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d130      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d038      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2232      	movs	r2, #50	; 0x32
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d4:	e002      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d102      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f2      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	d110      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e00f      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d007      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800471e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000
 8004734:	20000024 	.word	0x20000024
 8004738:	431bde83 	.word	0x431bde83

0800473c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e3ca      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474e:	4b97      	ldr	r3, [pc, #604]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004758:	4b94      	ldr	r3, [pc, #592]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80e4 	beq.w	8004938 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_RCC_OscConfig+0x4a>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	f040 808b 	bne.w	8004894 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 8087 	bne.w	8004894 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004786:	4b89      	ldr	r3, [pc, #548]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e3a2      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1a      	ldr	r2, [r3, #32]
 80047a2:	4b82      	ldr	r3, [pc, #520]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_RCC_OscConfig+0x7c>
 80047ae:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b6:	e005      	b.n	80047c4 <HAL_RCC_OscConfig+0x88>
 80047b8:	4b7c      	ldr	r3, [pc, #496]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d223      	bcs.n	8004810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fd55 	bl	800527c <RCC_SetFlashLatencyFromMSIRange>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e383      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047dc:	4b73      	ldr	r3, [pc, #460]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a72      	ldr	r2, [pc, #456]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047e2:	f043 0308 	orr.w	r3, r3, #8
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	4b70      	ldr	r3, [pc, #448]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	496d      	ldr	r1, [pc, #436]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047fa:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	4968      	ldr	r1, [pc, #416]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
 800480e:	e025      	b.n	800485c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004810:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004816:	f043 0308 	orr.w	r3, r3, #8
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4960      	ldr	r1, [pc, #384]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482e:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	495b      	ldr	r1, [pc, #364]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fd15 	bl	800527c <RCC_SetFlashLatencyFromMSIRange>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e343      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485c:	f000 fc4a 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b52      	ldr	r3, [pc, #328]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	4950      	ldr	r1, [pc, #320]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	4a4e      	ldr	r2, [pc, #312]	; (80049b4 <HAL_RCC_OscConfig+0x278>)
 800487a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800487c:	4b4e      	ldr	r3, [pc, #312]	; (80049b8 <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fb59 	bl	8002f38 <HAL_InitTick>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d052      	beq.n	8004936 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	e327      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d032      	beq.n	8004902 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800489c:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a42      	ldr	r2, [pc, #264]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fb96 	bl	8002fd8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048b0:	f7fe fb92 	bl	8002fd8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e310      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c2:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a36      	ldr	r2, [pc, #216]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048d4:	f043 0308 	orr.w	r3, r3, #8
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4931      	ldr	r1, [pc, #196]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ec:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	492c      	ldr	r1, [pc, #176]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	e01a      	b.n	8004938 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a29      	ldr	r2, [pc, #164]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800490e:	f7fe fb63 	bl	8002fd8 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004916:	f7fe fb5f 	bl	8002fd8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e2dd      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004928:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x1da>
 8004934:	e000      	b.n	8004938 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004936:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d074      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b08      	cmp	r3, #8
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x21a>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d10e      	bne.n	800496e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d10b      	bne.n	800496e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d064      	beq.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d160      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e2ba      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x24a>
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800497e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e026      	b.n	80049d4 <HAL_RCC_OscConfig+0x298>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498e:	d115      	bne.n	80049bc <HAL_RCC_OscConfig+0x280>
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a05      	ldr	r2, [pc, #20]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 8004996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a02      	ldr	r2, [pc, #8]	; (80049ac <HAL_RCC_OscConfig+0x270>)
 80049a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x298>
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	0800c7a0 	.word	0x0800c7a0
 80049b4:	20000024 	.word	0x20000024
 80049b8:	20000028 	.word	0x20000028
 80049bc:	4ba0      	ldr	r3, [pc, #640]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a9f      	ldr	r2, [pc, #636]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b9d      	ldr	r3, [pc, #628]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a9c      	ldr	r2, [pc, #624]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe fafc 	bl	8002fd8 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fe faf8 	bl	8002fd8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e276      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	4b92      	ldr	r3, [pc, #584]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x2a8>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fe fae8 	bl	8002fd8 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fe fae4 	bl	8002fd8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e262      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	4b88      	ldr	r3, [pc, #544]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2d0>
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d060      	beq.n	8004afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_OscConfig+0x310>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d119      	bne.n	8004a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d116      	bne.n	8004a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a4c:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_OscConfig+0x328>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e23f      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	4973      	ldr	r1, [pc, #460]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a78:	e040      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d023      	beq.n	8004aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a82:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6e      	ldr	r2, [pc, #440]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe faa3 	bl	8002fd8 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fe fa9f 	bl	8002fd8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e21d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa8:	4b65      	ldr	r3, [pc, #404]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	495f      	ldr	r1, [pc, #380]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	e018      	b.n	8004afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5c      	ldr	r2, [pc, #368]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fe fa7f 	bl	8002fd8 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fe fa7b 	bl	8002fd8 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1f9      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b16:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fe fa5a 	bl	8002fd8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe fa56 	bl	8002fd8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1d4      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b3a:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <HAL_RCC_OscConfig+0x3ec>
 8004b48:	e01b      	b.n	8004b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b50:	4a3b      	ldr	r2, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fe fa3d 	bl	8002fd8 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fe fa39 	bl	8002fd8 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1b7      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b74:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ef      	bne.n	8004b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80a6 	beq.w	8004cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b94:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	; 0x58
 8004bac:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d118      	bne.n	8004bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fa00 	bl	8002fd8 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fe f9fc 	bl	8002fd8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e17a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <HAL_RCC_OscConfig+0x508>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4d8>
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c12:	e029      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d115      	bne.n	8004c48 <HAL_RCC_OscConfig+0x50c>
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c24:	f043 0304 	orr.w	r3, r3, #4
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <HAL_RCC_OscConfig+0x504>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x52c>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40007000 	.word	0x40007000
 8004c48:	4b9c      	ldr	r3, [pc, #624]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	4a9b      	ldr	r2, [pc, #620]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c58:	4b98      	ldr	r3, [pc, #608]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	4a97      	ldr	r2, [pc, #604]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d016      	beq.n	8004c9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fe f9b2 	bl	8002fd8 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fe f9ae 	bl	8002fd8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e12a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ed      	beq.n	8004c78 <HAL_RCC_OscConfig+0x53c>
 8004c9c:	e015      	b.n	8004cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fe f99b 	bl	8002fd8 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fe f997 	bl	8002fd8 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e113      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cbc:	4b7f      	ldr	r3, [pc, #508]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ed      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	4a79      	ldr	r2, [pc, #484]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80fe 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	f040 80d0 	bne.w	8004e90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cf0:	4b72      	ldr	r3, [pc, #456]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0203 	and.w	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d130      	bne.n	8004d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d127      	bne.n	8004d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d11f      	bne.n	8004d66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d30:	2a07      	cmp	r2, #7
 8004d32:	bf14      	ite	ne
 8004d34:	2201      	movne	r2, #1
 8004d36:	2200      	moveq	r2, #0
 8004d38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d113      	bne.n	8004d66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d06e      	beq.n	8004e44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d069      	beq.n	8004e40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d6c:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d78:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0ad      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d88:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d94:	f7fe f920 	bl	8002fd8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fe f91c 	bl	8002fd8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e09a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dae:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dba:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <HAL_RCC_OscConfig+0x784>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dca:	3a01      	subs	r2, #1
 8004dcc:	0112      	lsls	r2, r2, #4
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd4:	0212      	lsls	r2, r2, #8
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ddc:	0852      	lsrs	r2, r2, #1
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0552      	lsls	r2, r2, #21
 8004de2:	4311      	orrs	r1, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004de8:	0852      	lsrs	r2, r2, #1
 8004dea:	3a01      	subs	r2, #1
 8004dec:	0652      	lsls	r2, r2, #25
 8004dee:	4311      	orrs	r1, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df4:	0912      	lsrs	r2, r2, #4
 8004df6:	0452      	lsls	r2, r2, #17
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	4930      	ldr	r1, [pc, #192]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e00:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a2a      	ldr	r2, [pc, #168]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e18:	f7fe f8de 	bl	8002fd8 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe f8da 	bl	8002fd8 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e058      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3e:	e050      	b.n	8004ee2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e04f      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d148      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e5c:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e68:	f7fe f8b6 	bl	8002fd8 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fe f8b2 	bl	8002fd8 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e030      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x734>
 8004e8e:	e028      	b.n	8004ee2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d023      	beq.n	8004ede <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x780>)
 8004e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fe f899 	bl	8002fd8 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea8:	e00c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fe f895 	bl	8002fd8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d905      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e013      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_OscConfig+0x7b0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ec      	bne.n	8004eaa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_RCC_OscConfig+0x7b0>)
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	4905      	ldr	r1, [pc, #20]	; (8004eec <HAL_RCC_OscConfig+0x7b0>)
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_RCC_OscConfig+0x7b4>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
 8004edc:	e001      	b.n	8004ee2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	feeefffc 	.word	0xfeeefffc

08004ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0e7      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b75      	ldr	r3, [pc, #468]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d910      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b72      	ldr	r3, [pc, #456]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4970      	ldr	r1, [pc, #448]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b6e      	ldr	r3, [pc, #440]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0cf      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d010      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	4b66      	ldr	r3, [pc, #408]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d908      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4960      	ldr	r1, [pc, #384]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04c      	beq.n	800500c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d121      	bne.n	8004fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e0a6      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f92:	4b54      	ldr	r3, [pc, #336]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d115      	bne.n	8004fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e09a      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004faa:	4b4e      	ldr	r3, [pc, #312]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e08e      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fba:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e086      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fca:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 0203 	bic.w	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4943      	ldr	r1, [pc, #268]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fffc 	bl	8002fd8 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe4:	f7fd fff8 	bl	8002fd8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e06e      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 020c 	and.w	r2, r3, #12
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	429a      	cmp	r2, r3
 800500a:	d1eb      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005024:	429a      	cmp	r2, r3
 8005026:	d208      	bcs.n	800503a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	492b      	ldr	r1, [pc, #172]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800503a:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d210      	bcs.n	800506a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f023 0207 	bic.w	r2, r3, #7
 8005050:	4923      	ldr	r1, [pc, #140]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCC_ClockConfig+0x1ec>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d001      	beq.n	800506a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e036      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4918      	ldr	r1, [pc, #96]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4910      	ldr	r1, [pc, #64]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050a8:	f000 f824 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	490b      	ldr	r1, [pc, #44]	; (80050e8 <HAL_RCC_ClockConfig+0x1f4>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1f8>)
 80050c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x1fc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd ff33 	bl	8002f38 <HAL_InitTick>
 80050d2:	4603      	mov	r3, r0
 80050d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80050d6:	7afb      	ldrb	r3, [r7, #11]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800c7a0 	.word	0x0800c7a0
 80050ec:	20000024 	.word	0x20000024
 80050f0:	20000028 	.word	0x20000028

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	; 0x24
 80050f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x34>
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d121      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d11e      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005128:	4b34      	ldr	r3, [pc, #208]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005134:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e005      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005144:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005150:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005158:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005164:	e00a      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d102      	bne.n	8005172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_GetSysClockFreq+0x110>)
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	e004      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d101      	bne.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005178:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCC_GetSysClockFreq+0x114>)
 800517a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d134      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d003      	beq.n	800519a <HAL_RCC_GetSysClockFreq+0xa6>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d003      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005198:	e005      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_GetSysClockFreq+0x110>)
 800519c:	617b      	str	r3, [r7, #20]
      break;
 800519e:	e005      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCC_GetSysClockFreq+0x114>)
 80051a2:	617b      	str	r3, [r7, #20]
      break;
 80051a4:	e002      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	617b      	str	r3, [r7, #20]
      break;
 80051aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	3301      	adds	r3, #1
 80051b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	fb03 f202 	mul.w	r2, r3, r2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	0e5b      	lsrs	r3, r3, #25
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	3301      	adds	r3, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051ec:	69bb      	ldr	r3, [r7, #24]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3724      	adds	r7, #36	; 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	0800c7b8 	.word	0x0800c7b8
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200

0800520c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <HAL_RCC_GetHCLKFreq+0x14>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000024 	.word	0x20000024

08005224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005228:	f7ff fff0 	bl	800520c <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0a1b      	lsrs	r3, r3, #8
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4904      	ldr	r1, [pc, #16]	; (800524c <HAL_RCC_GetPCLK1Freq+0x28>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40021000 	.word	0x40021000
 800524c:	0800c7b0 	.word	0x0800c7b0

08005250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005254:	f7ff ffda 	bl	800520c <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0adb      	lsrs	r3, r3, #11
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4904      	ldr	r1, [pc, #16]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	0800c7b0 	.word	0x0800c7b0

0800527c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005288:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005294:	f7ff f9ee 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 8005298:	6178      	str	r0, [r7, #20]
 800529a:	e014      	b.n	80052c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6593      	str	r3, [r2, #88]	; 0x58
 80052a8:	4b22      	ldr	r3, [pc, #136]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052b4:	f7ff f9de 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 80052b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052ba:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d10b      	bne.n	80052e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d919      	bls.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2ba0      	cmp	r3, #160	; 0xa0
 80052d8:	d902      	bls.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052da:	2302      	movs	r3, #2
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e013      	b.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052e0:	2301      	movs	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e010      	b.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b80      	cmp	r3, #128	; 0x80
 80052ea:	d902      	bls.n	80052f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052ec:	2303      	movs	r3, #3
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e00a      	b.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b80      	cmp	r3, #128	; 0x80
 80052f6:	d102      	bne.n	80052fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052f8:	2302      	movs	r3, #2
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e004      	b.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b70      	cmp	r3, #112	; 0x70
 8005302:	d101      	bne.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005304:	2301      	movs	r3, #1
 8005306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f023 0207 	bic.w	r2, r3, #7
 8005310:	4909      	ldr	r1, [pc, #36]	; (8005338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005318:	4b07      	ldr	r3, [pc, #28]	; (8005338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	429a      	cmp	r2, r3
 8005324:	d001      	beq.n	800532a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	40022000 	.word	0x40022000

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005344:	2300      	movs	r3, #0
 8005346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005348:	2300      	movs	r3, #0
 800534a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	2b00      	cmp	r3, #0
 8005356:	d041      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005360:	d02a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005362:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005366:	d824      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800536c:	d008      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800536e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005372:	d81e      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537c:	d010      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800537e:	e018      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005380:	4b86      	ldr	r3, [pc, #536]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a85      	ldr	r2, [pc, #532]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800538c:	e015      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fabb 	bl	8005910 <RCCEx_PLLSAI1_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800539e:	e00c      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3320      	adds	r3, #32
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fba6 	bl	8005af8 <RCCEx_PLLSAI2_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053b0:	e003      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	74fb      	strb	r3, [r7, #19]
      break;
 80053b6:	e000      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053c0:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ce:	4973      	ldr	r1, [pc, #460]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053d6:	e001      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d041      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053f0:	d02a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053f6:	d824      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053fc:	d008      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005402:	d81e      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800540c:	d010      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800540e:	e018      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005410:	4b62      	ldr	r3, [pc, #392]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800541c:	e015      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fa73 	bl	8005910 <RCCEx_PLLSAI1_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800542e:	e00c      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3320      	adds	r3, #32
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fb5e 	bl	8005af8 <RCCEx_PLLSAI2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005440:	e003      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	74fb      	strb	r3, [r7, #19]
      break;
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005450:	4b52      	ldr	r3, [pc, #328]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800545e:	494f      	ldr	r1, [pc, #316]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005466:	e001      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80a0 	beq.w	80055ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	4a40      	ldr	r2, [pc, #256]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6593      	str	r3, [r2, #88]	; 0x58
 80054a0:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b0:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3a      	ldr	r2, [pc, #232]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054bc:	f7fd fd8c 	bl	8002fd8 <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054c2:	e009      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c4:	f7fd fd88 	bl	8002fd8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d902      	bls.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	74fb      	strb	r3, [r7, #19]
        break;
 80054d6:	e005      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054d8:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ef      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d15c      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ea:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01f      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	429a      	cmp	r2, r3
 8005506:	d019      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005512:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	4a20      	ldr	r2, [pc, #128]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005534:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005546:	f7fd fd47 	bl	8002fd8 <HAL_GetTick>
 800554a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554c:	e00b      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554e:	f7fd fd43 	bl	8002fd8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	4293      	cmp	r3, r2
 800555e:	d902      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	74fb      	strb	r3, [r7, #19]
            break;
 8005564:	e006      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ec      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558a:	4904      	ldr	r1, [pc, #16]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005592:	e009      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	74bb      	strb	r3, [r7, #18]
 8005598:	e006      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
 80055a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a8:	7c7b      	ldrb	r3, [r7, #17]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ae:	4b9e      	ldr	r3, [pc, #632]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b2:	4a9d      	ldr	r2, [pc, #628]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c6:	4b98      	ldr	r3, [pc, #608]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f023 0203 	bic.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	4994      	ldr	r1, [pc, #592]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e8:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 020c 	bic.w	r2, r3, #12
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	498c      	ldr	r1, [pc, #560]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800560a:	4b87      	ldr	r3, [pc, #540]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	4983      	ldr	r1, [pc, #524]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800562c:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	497b      	ldr	r1, [pc, #492]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800564e:	4b76      	ldr	r3, [pc, #472]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565c:	4972      	ldr	r1, [pc, #456]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005670:	4b6d      	ldr	r3, [pc, #436]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567e:	496a      	ldr	r1, [pc, #424]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	4961      	ldr	r1, [pc, #388]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b4:	4b5c      	ldr	r3, [pc, #368]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	4959      	ldr	r1, [pc, #356]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d6:	4b54      	ldr	r3, [pc, #336]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	4950      	ldr	r1, [pc, #320]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f8:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	4948      	ldr	r1, [pc, #288]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800571a:	4b43      	ldr	r3, [pc, #268]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	493f      	ldr	r1, [pc, #252]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d028      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	4937      	ldr	r1, [pc, #220]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575a:	d106      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4a31      	ldr	r2, [pc, #196]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005766:	60d3      	str	r3, [r2, #12]
 8005768:	e011      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005772:	d10c      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	2101      	movs	r1, #1
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f8c8 	bl	8005910 <RCCEx_PLLSAI1_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d028      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	491f      	ldr	r1, [pc, #124]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b8:	d106      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4a1a      	ldr	r2, [pc, #104]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c4:	60d3      	str	r3, [r2, #12]
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f899 	bl	8005910 <RCCEx_PLLSAI1_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
 80057ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02b      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	4908      	ldr	r1, [pc, #32]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005816:	d109      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a02      	ldr	r2, [pc, #8]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005822:	60d3      	str	r3, [r2, #12]
 8005824:	e014      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005834:	d10c      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2101      	movs	r1, #1
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f867 	bl	8005910 <RCCEx_PLLSAI1_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02f      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586a:	4928      	ldr	r1, [pc, #160]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800587a:	d10d      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2102      	movs	r1, #2
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f844 	bl	8005910 <RCCEx_PLLSAI1_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d014      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	74bb      	strb	r3, [r7, #18]
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3320      	adds	r3, #32
 80058a6:	2102      	movs	r1, #2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f925 	bl	8005af8 <RCCEx_PLLSAI2_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058c8:	4b10      	ldr	r3, [pc, #64]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d6:	490d      	ldr	r1, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005902:	7cbb      	ldrb	r3, [r7, #18]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000

08005910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800591e:	4b75      	ldr	r3, [pc, #468]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d018      	beq.n	800595c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800592a:	4b72      	ldr	r3, [pc, #456]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0203 	and.w	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
       ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005942:	4b6c      	ldr	r3, [pc, #432]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
       ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d047      	beq.n	80059e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	e044      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d018      	beq.n	8005996 <RCCEx_PLLSAI1_Config+0x86>
 8005964:	2b03      	cmp	r3, #3
 8005966:	d825      	bhi.n	80059b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d002      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0x62>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d009      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x74>
 8005970:	e020      	b.n	80059b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005972:	4b60      	ldr	r3, [pc, #384]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11d      	bne.n	80059ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e01a      	b.n	80059ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005984:	4b5b      	ldr	r3, [pc, #364]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	2b00      	cmp	r3, #0
 800598e:	d116      	bne.n	80059be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005994:	e013      	b.n	80059be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005996:	4b57      	ldr	r3, [pc, #348]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059a2:	4b54      	ldr	r3, [pc, #336]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059b2:	e006      	b.n	80059c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e004      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ca:	4b4a      	ldr	r3, [pc, #296]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6819      	ldr	r1, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	430b      	orrs	r3, r1
 80059e0:	4944      	ldr	r1, [pc, #272]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d17d      	bne.n	8005ae8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059ec:	4b41      	ldr	r3, [pc, #260]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a40      	ldr	r2, [pc, #256]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f8:	f7fd faee 	bl	8002fd8 <HAL_GetTick>
 80059fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059fe:	e009      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a00:	f7fd faea 	bl	8002fd8 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d902      	bls.n	8005a14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	73fb      	strb	r3, [r7, #15]
        break;
 8005a12:	e005      	b.n	8005a20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a14:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ef      	bne.n	8005a00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d160      	bne.n	8005ae8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d111      	bne.n	8005a50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a2c:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	0211      	lsls	r1, r2, #8
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68d2      	ldr	r2, [r2, #12]
 8005a42:	0912      	lsrs	r2, r2, #4
 8005a44:	0452      	lsls	r2, r2, #17
 8005a46:	430a      	orrs	r2, r1
 8005a48:	492a      	ldr	r1, [pc, #168]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	610b      	str	r3, [r1, #16]
 8005a4e:	e027      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d112      	bne.n	8005a7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6892      	ldr	r2, [r2, #8]
 8005a66:	0211      	lsls	r1, r2, #8
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6912      	ldr	r2, [r2, #16]
 8005a6c:	0852      	lsrs	r2, r2, #1
 8005a6e:	3a01      	subs	r2, #1
 8005a70:	0552      	lsls	r2, r2, #21
 8005a72:	430a      	orrs	r2, r1
 8005a74:	491f      	ldr	r1, [pc, #124]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
 8005a7a:	e011      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	0211      	lsls	r1, r2, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6952      	ldr	r2, [r2, #20]
 8005a92:	0852      	lsrs	r2, r2, #1
 8005a94:	3a01      	subs	r2, #1
 8005a96:	0652      	lsls	r2, r2, #25
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4916      	ldr	r1, [pc, #88]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fd fa94 	bl	8002fd8 <HAL_GetTick>
 8005ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ab2:	e009      	b.n	8005ac8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ab4:	f7fd fa90 	bl	8002fd8 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d902      	bls.n	8005ac8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ac6:	e005      	b.n	8005ad4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0ef      	beq.n	8005ab4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	4904      	ldr	r1, [pc, #16]	; (8005af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000

08005af8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b12:	4b67      	ldr	r3, [pc, #412]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0203 	and.w	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d10d      	bne.n	8005b3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
       ||
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b2a:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
       ||
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d047      	beq.n	8005bce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	e044      	b.n	8005bce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d018      	beq.n	8005b7e <RCCEx_PLLSAI2_Config+0x86>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d825      	bhi.n	8005b9c <RCCEx_PLLSAI2_Config+0xa4>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d002      	beq.n	8005b5a <RCCEx_PLLSAI2_Config+0x62>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d009      	beq.n	8005b6c <RCCEx_PLLSAI2_Config+0x74>
 8005b58:	e020      	b.n	8005b9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b5a:	4b55      	ldr	r3, [pc, #340]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11d      	bne.n	8005ba2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b6a:	e01a      	b.n	8005ba2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b6c:	4b50      	ldr	r3, [pc, #320]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d116      	bne.n	8005ba6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7c:	e013      	b.n	8005ba6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b7e:	4b4c      	ldr	r3, [pc, #304]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10f      	bne.n	8005baa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b8a:	4b49      	ldr	r3, [pc, #292]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b9a:	e006      	b.n	8005baa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e004      	b.n	8005bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bb2:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6819      	ldr	r1, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	4939      	ldr	r1, [pc, #228]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d167      	bne.n	8005ca4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a35      	ldr	r2, [pc, #212]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fd f9fa 	bl	8002fd8 <HAL_GetTick>
 8005be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005be6:	e009      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005be8:	f7fd f9f6 	bl	8002fd8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d902      	bls.n	8005bfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bfa:	e005      	b.n	8005c08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bfc:	4b2c      	ldr	r3, [pc, #176]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1ef      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d14a      	bne.n	8005ca4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d111      	bne.n	8005c38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c14:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
 8005c24:	0211      	lsls	r1, r2, #8
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	0912      	lsrs	r2, r2, #4
 8005c2c:	0452      	lsls	r2, r2, #17
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	491f      	ldr	r1, [pc, #124]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	614b      	str	r3, [r1, #20]
 8005c36:	e011      	b.n	8005c5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6892      	ldr	r2, [r2, #8]
 8005c48:	0211      	lsls	r1, r2, #8
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6912      	ldr	r2, [r2, #16]
 8005c4e:	0852      	lsrs	r2, r2, #1
 8005c50:	3a01      	subs	r2, #1
 8005c52:	0652      	lsls	r2, r2, #25
 8005c54:	430a      	orrs	r2, r1
 8005c56:	4916      	ldr	r1, [pc, #88]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c68:	f7fd f9b6 	bl	8002fd8 <HAL_GetTick>
 8005c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c6e:	e009      	b.n	8005c84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c70:	f7fd f9b2 	bl	8002fd8 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d902      	bls.n	8005c84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	73fb      	strb	r3, [r7, #15]
          break;
 8005c82:	e005      	b.n	8005c90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ef      	beq.n	8005c70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e049      	b.n	8005d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fcbc 	bl	8002658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f001 f922 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e049      	b.n	8005e08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f841 	bl	8005e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f001 f8cb 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <HAL_TIM_PWM_Start+0x24>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e03c      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x9e>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d109      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x3e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	bf14      	ite	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	2300      	moveq	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	e02f      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x9e>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d109      	bne.n	8005e7c <HAL_TIM_PWM_Start+0x58>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e022      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x9e>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d109      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x72>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	bf14      	ite	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	2300      	moveq	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	e015      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x9e>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b10      	cmp	r3, #16
 8005e9a:	d109      	bne.n	8005eb0 <HAL_TIM_PWM_Start+0x8c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e008      	b.n	8005ec2 <HAL_TIM_PWM_Start+0x9e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e09c      	b.n	8006004 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xb6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed8:	e023      	b.n	8005f22 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xc6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee8:	e01b      	b.n	8005f22 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xd6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	e013      	b.n	8005f22 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xe6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Start+0xf6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f18:	e003      	b.n	8005f22 <HAL_TIM_PWM_Start+0xfe>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fd34 	bl	8007998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a35      	ldr	r2, [pc, #212]	; (800600c <HAL_TIM_PWM_Start+0x1e8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x13e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a34      	ldr	r2, [pc, #208]	; (8006010 <HAL_TIM_PWM_Start+0x1ec>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x13e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a32      	ldr	r2, [pc, #200]	; (8006014 <HAL_TIM_PWM_Start+0x1f0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x13e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a31      	ldr	r2, [pc, #196]	; (8006018 <HAL_TIM_PWM_Start+0x1f4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIM_PWM_Start+0x13e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2f      	ldr	r2, [pc, #188]	; (800601c <HAL_TIM_PWM_Start+0x1f8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_PWM_Start+0x142>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_PWM_Start+0x144>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a22      	ldr	r2, [pc, #136]	; (800600c <HAL_TIM_PWM_Start+0x1e8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01d      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d018      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a22      	ldr	r2, [pc, #136]	; (8006020 <HAL_TIM_PWM_Start+0x1fc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a21      	ldr	r2, [pc, #132]	; (8006024 <HAL_TIM_PWM_Start+0x200>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00e      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <HAL_TIM_PWM_Start+0x204>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d009      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a17      	ldr	r2, [pc, #92]	; (8006010 <HAL_TIM_PWM_Start+0x1ec>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x19e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	; (8006014 <HAL_TIM_PWM_Start+0x1f0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d115      	bne.n	8005fee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_TIM_PWM_Start+0x208>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b06      	cmp	r3, #6
 8005fd2:	d015      	beq.n	8006000 <HAL_TIM_PWM_Start+0x1dc>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fda:	d011      	beq.n	8006000 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fec:	e008      	b.n	8006000 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0201 	orr.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e000      	b.n	8006002 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40013400 	.word	0x40013400
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	00010007 	.word	0x00010007

08006030 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e049      	b.n	80060d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f841 	bl	80060de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f000 ff64 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_IC_Start_IT+0x1e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e023      	b.n	800615a <HAL_TIM_IC_Start_IT+0x66>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d104      	bne.n	8006122 <HAL_TIM_IC_Start_IT+0x2e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e01b      	b.n	800615a <HAL_TIM_IC_Start_IT+0x66>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d104      	bne.n	8006132 <HAL_TIM_IC_Start_IT+0x3e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e013      	b.n	800615a <HAL_TIM_IC_Start_IT+0x66>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d104      	bne.n	8006142 <HAL_TIM_IC_Start_IT+0x4e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613e:	b2db      	uxtb	r3, r3
 8006140:	e00b      	b.n	800615a <HAL_TIM_IC_Start_IT+0x66>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b10      	cmp	r3, #16
 8006146:	d104      	bne.n	8006152 <HAL_TIM_IC_Start_IT+0x5e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e003      	b.n	800615a <HAL_TIM_IC_Start_IT+0x66>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006158:	b2db      	uxtb	r3, r3
 800615a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_TIM_IC_Start_IT+0x78>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e013      	b.n	8006194 <HAL_TIM_IC_Start_IT+0xa0>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d104      	bne.n	800617c <HAL_TIM_IC_Start_IT+0x88>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e00b      	b.n	8006194 <HAL_TIM_IC_Start_IT+0xa0>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b08      	cmp	r3, #8
 8006180:	d104      	bne.n	800618c <HAL_TIM_IC_Start_IT+0x98>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e003      	b.n	8006194 <HAL_TIM_IC_Start_IT+0xa0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006192:	b2db      	uxtb	r3, r3
 8006194:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800619c:	7b7b      	ldrb	r3, [r7, #13]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d001      	beq.n	80061a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0dd      	b.n	8006362 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_IC_Start_IT+0xc2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b4:	e023      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x10a>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_IC_Start_IT+0xd2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c4:	e01b      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x10a>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d104      	bne.n	80061d6 <HAL_TIM_IC_Start_IT+0xe2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	e013      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x10a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_IC_Start_IT+0xf2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061e4:	e00b      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x10a>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_IC_Start_IT+0x102>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f4:	e003      	b.n	80061fe <HAL_TIM_IC_Start_IT+0x10a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <HAL_TIM_IC_Start_IT+0x11a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	e013      	b.n	8006236 <HAL_TIM_IC_Start_IT+0x142>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d104      	bne.n	800621e <HAL_TIM_IC_Start_IT+0x12a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621c:	e00b      	b.n	8006236 <HAL_TIM_IC_Start_IT+0x142>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d104      	bne.n	800622e <HAL_TIM_IC_Start_IT+0x13a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800622c:	e003      	b.n	8006236 <HAL_TIM_IC_Start_IT+0x142>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d841      	bhi.n	80062c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_IC_Start_IT+0x150>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006279 	.word	0x08006279
 8006248:	080062c1 	.word	0x080062c1
 800624c:	080062c1 	.word	0x080062c1
 8006250:	080062c1 	.word	0x080062c1
 8006254:	0800628b 	.word	0x0800628b
 8006258:	080062c1 	.word	0x080062c1
 800625c:	080062c1 	.word	0x080062c1
 8006260:	080062c1 	.word	0x080062c1
 8006264:	0800629d 	.word	0x0800629d
 8006268:	080062c1 	.word	0x080062c1
 800626c:	080062c1 	.word	0x080062c1
 8006270:	080062c1 	.word	0x080062c1
 8006274:	080062af 	.word	0x080062af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0202 	orr.w	r2, r2, #2
 8006286:	60da      	str	r2, [r3, #12]
      break;
 8006288:	e01d      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0204 	orr.w	r2, r2, #4
 8006298:	60da      	str	r2, [r3, #12]
      break;
 800629a:	e014      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0208 	orr.w	r2, r2, #8
 80062aa:	60da      	str	r2, [r3, #12]
      break;
 80062ac:	e00b      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0210 	orr.w	r2, r2, #16
 80062bc:	60da      	str	r2, [r3, #12]
      break;
 80062be:	e002      	b.n	80062c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
      break;
 80062c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d149      	bne.n	8006360 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2201      	movs	r2, #1
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fb5f 	bl	8007998 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a23      	ldr	r2, [pc, #140]	; (800636c <HAL_TIM_IC_Start_IT+0x278>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <HAL_TIM_IC_Start_IT+0x27c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <HAL_TIM_IC_Start_IT+0x280>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <HAL_TIM_IC_Start_IT+0x284>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_TIM_IC_Start_IT+0x288>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x22c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a19      	ldr	r2, [pc, #100]	; (8006380 <HAL_TIM_IC_Start_IT+0x28c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d115      	bne.n	800634c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <HAL_TIM_IC_Start_IT+0x290>)
 8006328:	4013      	ands	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d015      	beq.n	800635e <HAL_TIM_IC_Start_IT+0x26a>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d011      	beq.n	800635e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634a:	e008      	b.n	800635e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e000      	b.n	8006360 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40014000 	.word	0x40014000
 8006384:	00010007 	.word	0x00010007

08006388 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d841      	bhi.n	8006420 <HAL_TIM_IC_Stop_IT+0x98>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <HAL_TIM_IC_Stop_IT+0x1c>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006421 	.word	0x08006421
 80063b0:	08006421 	.word	0x08006421
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	080063fd 	.word	0x080063fd
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006421 	.word	0x08006421
 80063d0:	08006421 	.word	0x08006421
 80063d4:	0800640f 	.word	0x0800640f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0202 	bic.w	r2, r2, #2
 80063e6:	60da      	str	r2, [r3, #12]
      break;
 80063e8:	e01d      	b.n	8006426 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	60da      	str	r2, [r3, #12]
      break;
 80063fa:	e014      	b.n	8006426 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0208 	bic.w	r2, r2, #8
 800640a:	60da      	str	r2, [r3, #12]
      break;
 800640c:	e00b      	b.n	8006426 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0210 	bic.w	r2, r2, #16
 800641c:	60da      	str	r2, [r3, #12]
      break;
 800641e:	e002      	b.n	8006426 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
      break;
 8006424:	bf00      	nop
  }

  if (status == HAL_OK)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d166      	bne.n	80064fa <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f001 faaf 	bl	8007998 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	f241 1311 	movw	r3, #4369	; 0x1111
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_TIM_IC_Stop_IT+0xe2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	f240 4344 	movw	r3, #1092	; 0x444
 8006454:	4013      	ands	r3, r2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <HAL_TIM_IC_Stop_IT+0xe2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_TIM_IC_Stop_IT+0xf2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006478:	e023      	b.n	80064c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d104      	bne.n	800648a <HAL_TIM_IC_Stop_IT+0x102>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006488:	e01b      	b.n	80064c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d104      	bne.n	800649a <HAL_TIM_IC_Stop_IT+0x112>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006498:	e013      	b.n	80064c2 <HAL_TIM_IC_Stop_IT+0x13a>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d104      	bne.n	80064aa <HAL_TIM_IC_Stop_IT+0x122>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064a8:	e00b      	b.n	80064c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_IC_Stop_IT+0x132>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	e003      	b.n	80064c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_IC_Stop_IT+0x14a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d0:	e013      	b.n	80064fa <HAL_TIM_IC_Stop_IT+0x172>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_IC_Stop_IT+0x15a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e0:	e00b      	b.n	80064fa <HAL_TIM_IC_Stop_IT+0x172>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_IC_Stop_IT+0x16a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064f0:	e003      	b.n	80064fa <HAL_TIM_IC_Stop_IT+0x172>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e097      	b.n	8006648 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fc f847 	bl	80025c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006548:	f023 0307 	bic.w	r3, r3, #7
 800654c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f000 fcef 	bl	8006f3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	4313      	orrs	r3, r2
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065a4:	f023 030c 	bic.w	r3, r3, #12
 80065a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	4313      	orrs	r3, r2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	011a      	lsls	r2, r3, #4
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	031b      	lsls	r3, r3, #12
 80065d4:	4313      	orrs	r3, r2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4313      	orrs	r3, r2
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006660:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006668:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006670:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006678:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d110      	bne.n	80066a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d102      	bne.n	800668c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e069      	b.n	8006764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a0:	e031      	b.n	8006706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d110      	bne.n	80066ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d102      	bne.n	80066b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ae:	7b3b      	ldrb	r3, [r7, #12]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e055      	b.n	8006764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c8:	e01d      	b.n	8006706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d108      	bne.n	80066e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d105      	bne.n	80066e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d6:	7b7b      	ldrb	r3, [r7, #13]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d102      	bne.n	80066e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066dc:	7b3b      	ldrb	r3, [r7, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e03e      	b.n	8006764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_TIM_Encoder_Start+0xc4>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d008      	beq.n	8006724 <HAL_TIM_Encoder_Start+0xd4>
 8006712:	e00f      	b.n	8006734 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2201      	movs	r2, #1
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f93b 	bl	8007998 <TIM_CCxChannelCmd>
      break;
 8006722:	e016      	b.n	8006752 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2201      	movs	r2, #1
 800672a:	2104      	movs	r1, #4
 800672c:	4618      	mov	r0, r3
 800672e:	f001 f933 	bl	8007998 <TIM_CCxChannelCmd>
      break;
 8006732:	e00e      	b.n	8006752 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f001 f92b 	bl	8007998 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2201      	movs	r2, #1
 8006748:	2104      	movs	r1, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f001 f924 	bl	8007998 <TIM_CCxChannelCmd>
      break;
 8006750:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d020      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0202 	mvn.w	r2, #2
 80067a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa fdd2 	bl	8001360 <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fb9e 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fba5 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01b      	beq.n	800681c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0204 	mvn.w	r2, #4
 80067ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa fdac 	bl	8001360 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb78 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb7f 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d020      	beq.n	8006868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0208 	mvn.w	r2, #8
 8006838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2204      	movs	r2, #4
 800683e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fa fd86 	bl	8001360 <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb52 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb59 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0210 	mvn.w	r2, #16
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2208      	movs	r2, #8
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fa fd60 	bl	8001360 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fb2c 	bl	8006f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb33 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0201 	mvn.w	r2, #1
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fb0a 	bl	8006eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 f906 	bl	8007b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f8fe 	bl	8007b1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 faf2 	bl	8006f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0220 	mvn.w	r2, #32
 8006960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f8c6 	bl	8007af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_TIM_IC_ConfigChannel+0x1e>
 800698a:	2302      	movs	r3, #2
 800698c:	e088      	b.n	8006aa0 <HAL_TIM_IC_ConfigChannel+0x130>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80069ac:	f000 fe36 	bl	800761c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 020c 	bic.w	r2, r2, #12
 80069be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6999      	ldr	r1, [r3, #24]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	619a      	str	r2, [r3, #24]
 80069d2:	e060      	b.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d11c      	bne.n	8006a14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80069ea:	f000 feb4 	bl	8007756 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6999      	ldr	r1, [r3, #24]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	021a      	lsls	r2, r3, #8
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	619a      	str	r2, [r3, #24]
 8006a12:	e040      	b.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d11b      	bne.n	8006a52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a2a:	f000 ff01 	bl	8007830 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 020c 	bic.w	r2, r2, #12
 8006a3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	61da      	str	r2, [r3, #28]
 8006a50:	e021      	b.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b0c      	cmp	r3, #12
 8006a56:	d11c      	bne.n	8006a92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006a68:	f000 ff1e 	bl	80078a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69d9      	ldr	r1, [r3, #28]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	021a      	lsls	r2, r3, #8
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	61da      	str	r2, [r3, #28]
 8006a90:	e001      	b.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0ff      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b14      	cmp	r3, #20
 8006ad2:	f200 80f0 	bhi.w	8006cb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ad6:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006cb7 	.word	0x08006cb7
 8006ae4:	08006cb7 	.word	0x08006cb7
 8006ae8:	08006cb7 	.word	0x08006cb7
 8006aec:	08006b71 	.word	0x08006b71
 8006af0:	08006cb7 	.word	0x08006cb7
 8006af4:	08006cb7 	.word	0x08006cb7
 8006af8:	08006cb7 	.word	0x08006cb7
 8006afc:	08006bb3 	.word	0x08006bb3
 8006b00:	08006cb7 	.word	0x08006cb7
 8006b04:	08006cb7 	.word	0x08006cb7
 8006b08:	08006cb7 	.word	0x08006cb7
 8006b0c:	08006bf3 	.word	0x08006bf3
 8006b10:	08006cb7 	.word	0x08006cb7
 8006b14:	08006cb7 	.word	0x08006cb7
 8006b18:	08006cb7 	.word	0x08006cb7
 8006b1c:	08006c35 	.word	0x08006c35
 8006b20:	08006cb7 	.word	0x08006cb7
 8006b24:	08006cb7 	.word	0x08006cb7
 8006b28:	08006cb7 	.word	0x08006cb7
 8006b2c:	08006c75 	.word	0x08006c75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fa9a 	bl	8007070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0208 	orr.w	r2, r2, #8
 8006b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0204 	bic.w	r2, r2, #4
 8006b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6999      	ldr	r1, [r3, #24]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	619a      	str	r2, [r3, #24]
      break;
 8006b6e:	e0a5      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fb0a 	bl	8007190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6999      	ldr	r1, [r3, #24]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	021a      	lsls	r2, r3, #8
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	619a      	str	r2, [r3, #24]
      break;
 8006bb0:	e084      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fb73 	bl	80072a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0208 	orr.w	r2, r2, #8
 8006bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0204 	bic.w	r2, r2, #4
 8006bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	61da      	str	r2, [r3, #28]
      break;
 8006bf0:	e064      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fbdb 	bl	80073b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69d9      	ldr	r1, [r3, #28]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	021a      	lsls	r2, r3, #8
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	61da      	str	r2, [r3, #28]
      break;
 8006c32:	e043      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fc24 	bl	8007488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0208 	orr.w	r2, r2, #8
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0204 	bic.w	r2, r2, #4
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c72:	e023      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fc68 	bl	8007550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cb4:	e002      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIM_ConfigClockSource+0x1c>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e0b6      	b.n	8006e5a <HAL_TIM_ConfigClockSource+0x18a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d28:	d03e      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0xd8>
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2e:	f200 8087 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d36:	f000 8086 	beq.w	8006e46 <HAL_TIM_ConfigClockSource+0x176>
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d87f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d01a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xaa>
 8006d44:	2b70      	cmp	r3, #112	; 0x70
 8006d46:	d87b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d48:	2b60      	cmp	r3, #96	; 0x60
 8006d4a:	d050      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x11e>
 8006d4c:	2b60      	cmp	r3, #96	; 0x60
 8006d4e:	d877      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d50:	2b50      	cmp	r3, #80	; 0x50
 8006d52:	d03c      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xfe>
 8006d54:	2b50      	cmp	r3, #80	; 0x50
 8006d56:	d873      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d058      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x13e>
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d86f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d064      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15e>
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d86b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d060      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15e>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d867      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15e>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d05a      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15e>
 8006d78:	e062      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d8a:	f000 fde5 	bl	8007958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
      break;
 8006da6:	e04f      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db8:	f000 fdce 	bl	8007958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e03c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 fc8c 	bl	80076f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2150      	movs	r1, #80	; 0x50
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd9b 	bl	8007922 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e02c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 fce8 	bl	80077d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2160      	movs	r1, #96	; 0x60
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fd8b 	bl	8007922 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e01c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 fc6c 	bl	80076f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2140      	movs	r1, #64	; 0x40
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fd7b 	bl	8007922 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e00c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f000 fd72 	bl	8007922 <TIM_ITRx_SetConfig>
      break;
 8006e3e:	e003      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	e000      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b0c      	cmp	r3, #12
 8006e76:	d831      	bhi.n	8006edc <HAL_TIM_ReadCapturedValue+0x78>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	08006ebf 	.word	0x08006ebf
 8006e94:	08006edd 	.word	0x08006edd
 8006e98:	08006edd 	.word	0x08006edd
 8006e9c:	08006edd 	.word	0x08006edd
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006edd 	.word	0x08006edd
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006edd 	.word	0x08006edd
 8006eb0:	08006ed3 	.word	0x08006ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	60fb      	str	r3, [r7, #12]

      break;
 8006ebc:	e00f      	b.n	8006ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	60fb      	str	r3, [r7, #12]

      break;
 8006ec6:	e00a      	b.n	8006ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	60fb      	str	r3, [r7, #12]

      break;
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	60fb      	str	r3, [r7, #12]

      break;
 8006eda:	e000      	b.n	8006ede <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006edc:	bf00      	nop
  }

  return tmpreg;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a40      	ldr	r2, [pc, #256]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01f      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d01b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d017      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2b      	ldr	r2, [pc, #172]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <TIM_Base_SetConfig+0x128>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <TIM_Base_SetConfig+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <TIM_Base_SetConfig+0x130>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00f      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00b      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a11      	ldr	r2, [pc, #68]	; (8007064 <TIM_Base_SetConfig+0x128>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d007      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a10      	ldr	r2, [pc, #64]	; (8007068 <TIM_Base_SetConfig+0x12c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a0f      	ldr	r2, [pc, #60]	; (800706c <TIM_Base_SetConfig+0x130>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d103      	bne.n	800703c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	615a      	str	r2, [r3, #20]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0201 	bic.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 0302 	bic.w	r3, r3, #2
 80070bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a2c      	ldr	r2, [pc, #176]	; (800717c <TIM_OC1_SetConfig+0x10c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00f      	beq.n	80070f0 <TIM_OC1_SetConfig+0x80>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <TIM_OC1_SetConfig+0x110>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <TIM_OC1_SetConfig+0x80>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <TIM_OC1_SetConfig+0x114>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_OC1_SetConfig+0x80>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a29      	ldr	r2, [pc, #164]	; (8007188 <TIM_OC1_SetConfig+0x118>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_OC1_SetConfig+0x80>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a28      	ldr	r2, [pc, #160]	; (800718c <TIM_OC1_SetConfig+0x11c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10c      	bne.n	800710a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0308 	bic.w	r3, r3, #8
 80070f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0304 	bic.w	r3, r3, #4
 8007108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1b      	ldr	r2, [pc, #108]	; (800717c <TIM_OC1_SetConfig+0x10c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00f      	beq.n	8007132 <TIM_OC1_SetConfig+0xc2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <TIM_OC1_SetConfig+0x110>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00b      	beq.n	8007132 <TIM_OC1_SetConfig+0xc2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a19      	ldr	r2, [pc, #100]	; (8007184 <TIM_OC1_SetConfig+0x114>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <TIM_OC1_SetConfig+0xc2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <TIM_OC1_SetConfig+0x118>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC1_SetConfig+0xc2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a17      	ldr	r2, [pc, #92]	; (800718c <TIM_OC1_SetConfig+0x11c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d111      	bne.n	8007156 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40013400 	.word	0x40013400
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800

08007190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	f023 0210 	bic.w	r2, r3, #16
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f023 0320 	bic.w	r3, r3, #32
 80071de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a28      	ldr	r2, [pc, #160]	; (8007290 <TIM_OC2_SetConfig+0x100>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC2_SetConfig+0x6c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a27      	ldr	r2, [pc, #156]	; (8007294 <TIM_OC2_SetConfig+0x104>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d10d      	bne.n	8007218 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <TIM_OC2_SetConfig+0x100>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00f      	beq.n	8007240 <TIM_OC2_SetConfig+0xb0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <TIM_OC2_SetConfig+0x104>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_OC2_SetConfig+0xb0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <TIM_OC2_SetConfig+0x108>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_OC2_SetConfig+0xb0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1a      	ldr	r2, [pc, #104]	; (800729c <TIM_OC2_SetConfig+0x10c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC2_SetConfig+0xb0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <TIM_OC2_SetConfig+0x110>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d113      	bne.n	8007268 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800724e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40013400 	.word	0x40013400
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800

080072a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a27      	ldr	r2, [pc, #156]	; (80073a0 <TIM_OC3_SetConfig+0xfc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_OC3_SetConfig+0x6a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <TIM_OC3_SetConfig+0x100>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d10d      	bne.n	800732a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <TIM_OC3_SetConfig+0xfc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00f      	beq.n	8007352 <TIM_OC3_SetConfig+0xae>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <TIM_OC3_SetConfig+0x100>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00b      	beq.n	8007352 <TIM_OC3_SetConfig+0xae>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <TIM_OC3_SetConfig+0x104>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <TIM_OC3_SetConfig+0xae>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a19      	ldr	r2, [pc, #100]	; (80073ac <TIM_OC3_SetConfig+0x108>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_OC3_SetConfig+0xae>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <TIM_OC3_SetConfig+0x10c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d113      	bne.n	800737a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40013400 	.word	0x40013400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40014800 	.word	0x40014800

080073b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <TIM_OC4_SetConfig+0xc0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00f      	beq.n	8007438 <TIM_OC4_SetConfig+0x84>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <TIM_OC4_SetConfig+0xc4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00b      	beq.n	8007438 <TIM_OC4_SetConfig+0x84>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a16      	ldr	r2, [pc, #88]	; (800747c <TIM_OC4_SetConfig+0xc8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d007      	beq.n	8007438 <TIM_OC4_SetConfig+0x84>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a15      	ldr	r2, [pc, #84]	; (8007480 <TIM_OC4_SetConfig+0xcc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_OC4_SetConfig+0x84>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a14      	ldr	r2, [pc, #80]	; (8007484 <TIM_OC4_SetConfig+0xd0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d109      	bne.n	800744c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800743e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	019b      	lsls	r3, r3, #6
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40013400 	.word	0x40013400
 800747c:	40014000 	.word	0x40014000
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800

08007488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a17      	ldr	r2, [pc, #92]	; (800753c <TIM_OC5_SetConfig+0xb4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00f      	beq.n	8007502 <TIM_OC5_SetConfig+0x7a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a16      	ldr	r2, [pc, #88]	; (8007540 <TIM_OC5_SetConfig+0xb8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00b      	beq.n	8007502 <TIM_OC5_SetConfig+0x7a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a15      	ldr	r2, [pc, #84]	; (8007544 <TIM_OC5_SetConfig+0xbc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d007      	beq.n	8007502 <TIM_OC5_SetConfig+0x7a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a14      	ldr	r2, [pc, #80]	; (8007548 <TIM_OC5_SetConfig+0xc0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <TIM_OC5_SetConfig+0x7a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a13      	ldr	r2, [pc, #76]	; (800754c <TIM_OC5_SetConfig+0xc4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d109      	bne.n	8007516 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400
 800754c:	40014800 	.word	0x40014800

08007550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	051b      	lsls	r3, r3, #20
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <TIM_OC6_SetConfig+0xb8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00f      	beq.n	80075cc <TIM_OC6_SetConfig+0x7c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a17      	ldr	r2, [pc, #92]	; (800760c <TIM_OC6_SetConfig+0xbc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00b      	beq.n	80075cc <TIM_OC6_SetConfig+0x7c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a16      	ldr	r2, [pc, #88]	; (8007610 <TIM_OC6_SetConfig+0xc0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d007      	beq.n	80075cc <TIM_OC6_SetConfig+0x7c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a15      	ldr	r2, [pc, #84]	; (8007614 <TIM_OC6_SetConfig+0xc4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC6_SetConfig+0x7c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a14      	ldr	r2, [pc, #80]	; (8007618 <TIM_OC6_SetConfig+0xc8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d109      	bne.n	80075e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	029b      	lsls	r3, r3, #10
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40013400 	.word	0x40013400
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800

0800761c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	f023 0201 	bic.w	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a26      	ldr	r2, [pc, #152]	; (80076e0 <TIM_TI1_SetConfig+0xc4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d017      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007650:	d013      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <TIM_TI1_SetConfig+0xc8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00f      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <TIM_TI1_SetConfig+0xcc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4a21      	ldr	r2, [pc, #132]	; (80076ec <TIM_TI1_SetConfig+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d007      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <TIM_TI1_SetConfig+0xd4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_TI1_SetConfig+0x5e>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <TIM_TI1_SetConfig+0xd8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <TIM_TI1_SetConfig+0x62>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <TIM_TI1_SetConfig+0x64>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e003      	b.n	800769e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f023 030a 	bic.w	r3, r3, #10
 80076b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f003 030a 	and.w	r3, r3, #10
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000

080076f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0201 	bic.w	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f023 030a 	bic.w	r3, r3, #10
 8007734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	621a      	str	r2, [r3, #32]
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007756:	b480      	push	{r7}
 8007758:	b087      	sub	sp, #28
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	031b      	lsls	r3, r3, #12
 800779a:	b29b      	uxth	r3, r3
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	621a      	str	r2, [r3, #32]
}
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f023 0210 	bic.w	r2, r3, #16
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	031b      	lsls	r3, r3, #12
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800780c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800786c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	b2db      	uxtb	r3, r3
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007880:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	021b      	lsls	r3, r3, #8
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	031b      	lsls	r3, r3, #12
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80078fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	031b      	lsls	r3, r3, #12
 8007900:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	f043 0307 	orr.w	r3, r3, #7
 8007944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	021a      	lsls	r2, r3, #8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	431a      	orrs	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4313      	orrs	r3, r2
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	609a      	str	r2, [r3, #8]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	2201      	movs	r2, #1
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	401a      	ands	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	431a      	orrs	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e068      	b.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2e      	ldr	r2, [pc, #184]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d108      	bne.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d01d      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6e:	d018      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1b      	ldr	r2, [pc, #108]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00e      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a18      	ldr	r2, [pc, #96]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d004      	beq.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10c      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	40013400 	.word	0x40013400
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40014000 	.word	0x40014000

08007af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e040      	b.n	8007bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fa fea2 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ff50 	bl	8008a1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc95 	bl	80084ac <UART_SetConfig>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e01b      	b.n	8007bc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 ffcf 	bl	8008b60 <UART_CheckIdleState>
 8007bc2:	4603      	mov	r3, r0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d178      	bne.n	8007cd6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_UART_Transmit+0x24>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e071      	b.n	8007cd8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2221      	movs	r2, #33	; 0x21
 8007c00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c02:	f7fb f9e9 	bl	8002fd8 <HAL_GetTick>
 8007c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c20:	d108      	bne.n	8007c34 <HAL_UART_Transmit+0x68>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e003      	b.n	8007c3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c3c:	e030      	b.n	8007ca0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2200      	movs	r2, #0
 8007c46:	2180      	movs	r1, #128	; 0x80
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f001 f831 	bl	8008cb0 <UART_WaitOnFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2220      	movs	r2, #32
 8007c58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e03c      	b.n	8007cd8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c70:	b292      	uxth	r2, r2
 8007c72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	3302      	adds	r3, #2
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	e008      	b.n	8007c8e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	b292      	uxth	r2, r2
 8007c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1c8      	bne.n	8007c3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2140      	movs	r1, #64	; 0x40
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fffa 	bl	8008cb0 <UART_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e005      	b.n	8007cd8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d165      	bne.n	8007dc2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_UART_Transmit_DMA+0x22>
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e05e      	b.n	8007dc4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2221      	movs	r2, #33	; 0x21
 8007d28:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d027      	beq.n	8007d82 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <HAL_UART_Transmit_DMA+0xec>)
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4a24      	ldr	r2, [pc, #144]	; (8007dd0 <HAL_UART_Transmit_DMA+0xf0>)
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	4a23      	ldr	r2, [pc, #140]	; (8007dd4 <HAL_UART_Transmit_DMA+0xf4>)
 8007d48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	2200      	movs	r2, #0
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3328      	adds	r3, #40	; 0x28
 8007d62:	461a      	mov	r2, r3
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	f7fb fb31 	bl	80033cc <HAL_DMA_Start_IT>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2210      	movs	r2, #16
 8007d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e020      	b.n	8007dc4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2240      	movs	r2, #64	; 0x40
 8007d88:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	623a      	str	r2, [r7, #32]
 8007dac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	69f9      	ldr	r1, [r7, #28]
 8007db0:	6a3a      	ldr	r2, [r7, #32]
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e5      	bne.n	8007d8a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e000      	b.n	8007dc4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007dc2:	2302      	movs	r3, #2
  }
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3728      	adds	r7, #40	; 0x28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	08008fd5 	.word	0x08008fd5
 8007dd0:	0800906f 	.word	0x0800906f
 8007dd4:	080091f5 	.word	0x080091f5

08007dd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d137      	bne.n	8007e60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <HAL_UART_Receive_DMA+0x24>
 8007df6:	88fb      	ldrh	r3, [r7, #6]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e030      	b.n	8007e62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a18      	ldr	r2, [pc, #96]	; (8007e6c <HAL_UART_Receive_DMA+0x94>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01f      	beq.n	8007e50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d018      	beq.n	8007e50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	623b      	str	r3, [r7, #32]
 8007e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	69f9      	ldr	r1, [r7, #28]
 8007e42:	6a3a      	ldr	r2, [r7, #32]
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e50:	88fb      	ldrh	r3, [r7, #6]
 8007e52:	461a      	mov	r2, r3
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 ff92 	bl	8008d80 <UART_Start_Receive_DMA>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	e000      	b.n	8007e62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e60:	2302      	movs	r3, #2
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3728      	adds	r7, #40	; 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40008000 	.word	0x40008000

08007e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b0ba      	sub	sp, #232	; 0xe8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d115      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00f      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 82ae 	beq.w	800842a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
      }
      return;
 8007ed6:	e2a8      	b.n	800842a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8117 	beq.w	8008110 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ef2:	4b85      	ldr	r3, [pc, #532]	; (8008108 <HAL_UART_IRQHandler+0x298>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 810a 	beq.w	8008110 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d011      	beq.n	8007f2c <HAL_UART_IRQHandler+0xbc>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f22:	f043 0201 	orr.w	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d011      	beq.n	8007f5c <HAL_UART_IRQHandler+0xec>
 8007f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f52:	f043 0204 	orr.w	r2, r3, #4
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d011      	beq.n	8007f8c <HAL_UART_IRQHandler+0x11c>
 8007f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f82:	f043 0202 	orr.w	r2, r3, #2
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d017      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fbe:	f043 0208 	orr.w	r2, r3, #8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d012      	beq.n	8007ffa <HAL_UART_IRQHandler+0x18a>
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00c      	beq.n	8007ffa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff0:	f043 0220 	orr.w	r2, r3, #32
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8214 	beq.w	800842e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d005      	beq.n	8008052 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800804a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800804e:	2b00      	cmp	r3, #0
 8008050:	d04f      	beq.n	80080f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 ff5a 	bl	8008f0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d141      	bne.n	80080ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800807c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3308      	adds	r3, #8
 800808e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800809e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1d9      	bne.n	8008066 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080be:	4a13      	ldr	r2, [pc, #76]	; (800810c <HAL_UART_IRQHandler+0x29c>)
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fb fa1e 	bl	8003508 <HAL_DMA_Abort_IT>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d017      	beq.n	8008102 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	e00f      	b.n	8008102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9cc 	bl	8008480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	e00b      	b.n	8008102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9c8 	bl	8008480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f0:	e007      	b.n	8008102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9c4 	bl	8008480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008100:	e195      	b.n	800842e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008102:	bf00      	nop
    return;
 8008104:	e193      	b.n	800842e <HAL_UART_IRQHandler+0x5be>
 8008106:	bf00      	nop
 8008108:	04000120 	.word	0x04000120
 800810c:	08009273 	.word	0x08009273

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008114:	2b01      	cmp	r3, #1
 8008116:	f040 814e 	bne.w	80083b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8147 	beq.w	80083b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8140 	beq.w	80083b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2210      	movs	r2, #16
 800813c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008148:	2b40      	cmp	r3, #64	; 0x40
 800814a:	f040 80b8 	bne.w	80082be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800815a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8167 	beq.w	8008432 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800816a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800816e:	429a      	cmp	r2, r3
 8008170:	f080 815f 	bcs.w	8008432 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800817a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	f040 8086 	bne.w	800829c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1da      	bne.n	8008190 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e1      	bne.n	80081da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800823a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800823c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e3      	bne.n	8008216 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800826a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826c:	f023 0310 	bic.w	r3, r3, #16
 8008270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800827e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008280:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800828c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e4      	bne.n	800825c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008296:	4618      	mov	r0, r3
 8008298:	f7fb f8f8 	bl	800348c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8ec 	bl	8008494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082bc:	e0b9      	b.n	8008432 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80ab 	beq.w	8008436 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80082e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 80a6 	beq.w	8008436 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800830c:	647b      	str	r3, [r7, #68]	; 0x44
 800830e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800831a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e4      	bne.n	80082ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	623b      	str	r3, [r7, #32]
   return(result);
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008344:	633a      	str	r2, [r7, #48]	; 0x30
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800834a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e3      	bne.n	8008320 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	60fb      	str	r3, [r7, #12]
   return(result);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 0310 	bic.w	r3, r3, #16
 8008380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	69b9      	ldr	r1, [r7, #24]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	617b      	str	r3, [r7, #20]
   return(result);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e4      	bne.n	800836c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f870 	bl	8008494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083b4:	e03f      	b.n	8008436 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <HAL_UART_IRQHandler+0x570>
 80083c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d008      	beq.n	80083e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 ff8a 	bl	80092f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083de:	e02d      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d008      	beq.n	800840a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01c      	beq.n	800843a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
    }
    return;
 8008408:	e017      	b.n	800843a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800840a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d012      	beq.n	800843c <HAL_UART_IRQHandler+0x5cc>
 8008416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00c      	beq.n	800843c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 ff3b 	bl	800929e <UART_EndTransmit_IT>
    return;
 8008428:	e008      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
      return;
 800842a:	bf00      	nop
 800842c:	e006      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
    return;
 800842e:	bf00      	nop
 8008430:	e004      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008432:	bf00      	nop
 8008434:	e002      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
      return;
 8008436:	bf00      	nop
 8008438:	e000      	b.n	800843c <HAL_UART_IRQHandler+0x5cc>
    return;
 800843a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800843c:	37e8      	adds	r7, #232	; 0xe8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop

08008444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b0:	b08a      	sub	sp, #40	; 0x28
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	431a      	orrs	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4ba4      	ldr	r3, [pc, #656]	; (800876c <UART_SetConfig+0x2c0>)
 80084dc:	4013      	ands	r3, r2
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a99      	ldr	r2, [pc, #612]	; (8008770 <UART_SetConfig+0x2c4>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d004      	beq.n	8008518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008514:	4313      	orrs	r3, r2
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a90      	ldr	r2, [pc, #576]	; (8008774 <UART_SetConfig+0x2c8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d126      	bne.n	8008584 <UART_SetConfig+0xd8>
 8008536:	4b90      	ldr	r3, [pc, #576]	; (8008778 <UART_SetConfig+0x2cc>)
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	2b03      	cmp	r3, #3
 8008542:	d81b      	bhi.n	800857c <UART_SetConfig+0xd0>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0xa0>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	0800855d 	.word	0x0800855d
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008565 	.word	0x08008565
 8008558:	08008575 	.word	0x08008575
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008562:	e116      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008564:	2302      	movs	r3, #2
 8008566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856a:	e112      	b.n	8008792 <UART_SetConfig+0x2e6>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008572:	e10e      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857a:	e10a      	b.n	8008792 <UART_SetConfig+0x2e6>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008582:	e106      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a7c      	ldr	r2, [pc, #496]	; (800877c <UART_SetConfig+0x2d0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d138      	bne.n	8008600 <UART_SetConfig+0x154>
 800858e:	4b7a      	ldr	r3, [pc, #488]	; (8008778 <UART_SetConfig+0x2cc>)
 8008590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008594:	f003 030c 	and.w	r3, r3, #12
 8008598:	2b0c      	cmp	r3, #12
 800859a:	d82d      	bhi.n	80085f8 <UART_SetConfig+0x14c>
 800859c:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <UART_SetConfig+0xf8>)
 800859e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a2:	bf00      	nop
 80085a4:	080085d9 	.word	0x080085d9
 80085a8:	080085f9 	.word	0x080085f9
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	080085f9 	.word	0x080085f9
 80085b4:	080085e9 	.word	0x080085e9
 80085b8:	080085f9 	.word	0x080085f9
 80085bc:	080085f9 	.word	0x080085f9
 80085c0:	080085f9 	.word	0x080085f9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	080085f9 	.word	0x080085f9
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085de:	e0d8      	b.n	8008792 <UART_SetConfig+0x2e6>
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e6:	e0d4      	b.n	8008792 <UART_SetConfig+0x2e6>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ee:	e0d0      	b.n	8008792 <UART_SetConfig+0x2e6>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f6:	e0cc      	b.n	8008792 <UART_SetConfig+0x2e6>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fe:	e0c8      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a5e      	ldr	r2, [pc, #376]	; (8008780 <UART_SetConfig+0x2d4>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d125      	bne.n	8008656 <UART_SetConfig+0x1aa>
 800860a:	4b5b      	ldr	r3, [pc, #364]	; (8008778 <UART_SetConfig+0x2cc>)
 800860c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008610:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008614:	2b30      	cmp	r3, #48	; 0x30
 8008616:	d016      	beq.n	8008646 <UART_SetConfig+0x19a>
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	d818      	bhi.n	800864e <UART_SetConfig+0x1a2>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d00a      	beq.n	8008636 <UART_SetConfig+0x18a>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d814      	bhi.n	800864e <UART_SetConfig+0x1a2>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <UART_SetConfig+0x182>
 8008628:	2b10      	cmp	r3, #16
 800862a:	d008      	beq.n	800863e <UART_SetConfig+0x192>
 800862c:	e00f      	b.n	800864e <UART_SetConfig+0x1a2>
 800862e:	2300      	movs	r3, #0
 8008630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008634:	e0ad      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008636:	2302      	movs	r3, #2
 8008638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800863c:	e0a9      	b.n	8008792 <UART_SetConfig+0x2e6>
 800863e:	2304      	movs	r3, #4
 8008640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008644:	e0a5      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008646:	2308      	movs	r3, #8
 8008648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800864c:	e0a1      	b.n	8008792 <UART_SetConfig+0x2e6>
 800864e:	2310      	movs	r3, #16
 8008650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008654:	e09d      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a4a      	ldr	r2, [pc, #296]	; (8008784 <UART_SetConfig+0x2d8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d125      	bne.n	80086ac <UART_SetConfig+0x200>
 8008660:	4b45      	ldr	r3, [pc, #276]	; (8008778 <UART_SetConfig+0x2cc>)
 8008662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800866a:	2bc0      	cmp	r3, #192	; 0xc0
 800866c:	d016      	beq.n	800869c <UART_SetConfig+0x1f0>
 800866e:	2bc0      	cmp	r3, #192	; 0xc0
 8008670:	d818      	bhi.n	80086a4 <UART_SetConfig+0x1f8>
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d00a      	beq.n	800868c <UART_SetConfig+0x1e0>
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	d814      	bhi.n	80086a4 <UART_SetConfig+0x1f8>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <UART_SetConfig+0x1d8>
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d008      	beq.n	8008694 <UART_SetConfig+0x1e8>
 8008682:	e00f      	b.n	80086a4 <UART_SetConfig+0x1f8>
 8008684:	2300      	movs	r3, #0
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868a:	e082      	b.n	8008792 <UART_SetConfig+0x2e6>
 800868c:	2302      	movs	r3, #2
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008692:	e07e      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800869a:	e07a      	b.n	8008792 <UART_SetConfig+0x2e6>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086a2:	e076      	b.n	8008792 <UART_SetConfig+0x2e6>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086aa:	e072      	b.n	8008792 <UART_SetConfig+0x2e6>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a35      	ldr	r2, [pc, #212]	; (8008788 <UART_SetConfig+0x2dc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d12a      	bne.n	800870c <UART_SetConfig+0x260>
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <UART_SetConfig+0x2cc>)
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086c4:	d01a      	beq.n	80086fc <UART_SetConfig+0x250>
 80086c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ca:	d81b      	bhi.n	8008704 <UART_SetConfig+0x258>
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d0:	d00c      	beq.n	80086ec <UART_SetConfig+0x240>
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d6:	d815      	bhi.n	8008704 <UART_SetConfig+0x258>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <UART_SetConfig+0x238>
 80086dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e0:	d008      	beq.n	80086f4 <UART_SetConfig+0x248>
 80086e2:	e00f      	b.n	8008704 <UART_SetConfig+0x258>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ea:	e052      	b.n	8008792 <UART_SetConfig+0x2e6>
 80086ec:	2302      	movs	r3, #2
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086f2:	e04e      	b.n	8008792 <UART_SetConfig+0x2e6>
 80086f4:	2304      	movs	r3, #4
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e04a      	b.n	8008792 <UART_SetConfig+0x2e6>
 80086fc:	2308      	movs	r3, #8
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008702:	e046      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008704:	2310      	movs	r3, #16
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870a:	e042      	b.n	8008792 <UART_SetConfig+0x2e6>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a17      	ldr	r2, [pc, #92]	; (8008770 <UART_SetConfig+0x2c4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d13a      	bne.n	800878c <UART_SetConfig+0x2e0>
 8008716:	4b18      	ldr	r3, [pc, #96]	; (8008778 <UART_SetConfig+0x2cc>)
 8008718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008724:	d01a      	beq.n	800875c <UART_SetConfig+0x2b0>
 8008726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800872a:	d81b      	bhi.n	8008764 <UART_SetConfig+0x2b8>
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008730:	d00c      	beq.n	800874c <UART_SetConfig+0x2a0>
 8008732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008736:	d815      	bhi.n	8008764 <UART_SetConfig+0x2b8>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <UART_SetConfig+0x298>
 800873c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008740:	d008      	beq.n	8008754 <UART_SetConfig+0x2a8>
 8008742:	e00f      	b.n	8008764 <UART_SetConfig+0x2b8>
 8008744:	2300      	movs	r3, #0
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800874a:	e022      	b.n	8008792 <UART_SetConfig+0x2e6>
 800874c:	2302      	movs	r3, #2
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008752:	e01e      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008754:	2304      	movs	r3, #4
 8008756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800875a:	e01a      	b.n	8008792 <UART_SetConfig+0x2e6>
 800875c:	2308      	movs	r3, #8
 800875e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008762:	e016      	b.n	8008792 <UART_SetConfig+0x2e6>
 8008764:	2310      	movs	r3, #16
 8008766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800876a:	e012      	b.n	8008792 <UART_SetConfig+0x2e6>
 800876c:	efff69f3 	.word	0xefff69f3
 8008770:	40008000 	.word	0x40008000
 8008774:	40013800 	.word	0x40013800
 8008778:	40021000 	.word	0x40021000
 800877c:	40004400 	.word	0x40004400
 8008780:	40004800 	.word	0x40004800
 8008784:	40004c00 	.word	0x40004c00
 8008788:	40005000 	.word	0x40005000
 800878c:	2310      	movs	r3, #16
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a9f      	ldr	r2, [pc, #636]	; (8008a14 <UART_SetConfig+0x568>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d17a      	bne.n	8008892 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800879c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d824      	bhi.n	80087ee <UART_SetConfig+0x342>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x300>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087d1 	.word	0x080087d1
 80087b0:	080087ef 	.word	0x080087ef
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087ef 	.word	0x080087ef
 80087bc:	080087df 	.word	0x080087df
 80087c0:	080087ef 	.word	0x080087ef
 80087c4:	080087ef 	.word	0x080087ef
 80087c8:	080087ef 	.word	0x080087ef
 80087cc:	080087e7 	.word	0x080087e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d0:	f7fc fd28 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 80087d4:	61f8      	str	r0, [r7, #28]
        break;
 80087d6:	e010      	b.n	80087fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d8:	4b8f      	ldr	r3, [pc, #572]	; (8008a18 <UART_SetConfig+0x56c>)
 80087da:	61fb      	str	r3, [r7, #28]
        break;
 80087dc:	e00d      	b.n	80087fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087de:	f7fc fc89 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80087e2:	61f8      	str	r0, [r7, #28]
        break;
 80087e4:	e009      	b.n	80087fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ea:	61fb      	str	r3, [r7, #28]
        break;
 80087ec:	e005      	b.n	80087fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80fb 	beq.w	80089f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	429a      	cmp	r2, r3
 8008810:	d305      	bcc.n	800881e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	429a      	cmp	r2, r3
 800881c:	d903      	bls.n	8008826 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008824:	e0e8      	b.n	80089f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2200      	movs	r2, #0
 800882a:	461c      	mov	r4, r3
 800882c:	4615      	mov	r5, r2
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	022b      	lsls	r3, r5, #8
 8008838:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800883c:	0222      	lsls	r2, r4, #8
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	6849      	ldr	r1, [r1, #4]
 8008842:	0849      	lsrs	r1, r1, #1
 8008844:	2000      	movs	r0, #0
 8008846:	4688      	mov	r8, r1
 8008848:	4681      	mov	r9, r0
 800884a:	eb12 0a08 	adds.w	sl, r2, r8
 800884e:	eb43 0b09 	adc.w	fp, r3, r9
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	603b      	str	r3, [r7, #0]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008860:	4650      	mov	r0, sl
 8008862:	4659      	mov	r1, fp
 8008864:	f7f8 f9a0 	bl	8000ba8 <__aeabi_uldivmod>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4613      	mov	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008876:	d308      	bcc.n	800888a <UART_SetConfig+0x3de>
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800887e:	d204      	bcs.n	800888a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	60da      	str	r2, [r3, #12]
 8008888:	e0b6      	b.n	80089f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008890:	e0b2      	b.n	80089f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800889a:	d15e      	bne.n	800895a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800889c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d828      	bhi.n	80088f6 <UART_SetConfig+0x44a>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x400>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	080088f7 	.word	0x080088f7
 80088bc:	080088e7 	.word	0x080088e7
 80088c0:	080088f7 	.word	0x080088f7
 80088c4:	080088f7 	.word	0x080088f7
 80088c8:	080088f7 	.word	0x080088f7
 80088cc:	080088ef 	.word	0x080088ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088d0:	f7fc fca8 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 80088d4:	61f8      	str	r0, [r7, #28]
        break;
 80088d6:	e014      	b.n	8008902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d8:	f7fc fcba 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 80088dc:	61f8      	str	r0, [r7, #28]
        break;
 80088de:	e010      	b.n	8008902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e0:	4b4d      	ldr	r3, [pc, #308]	; (8008a18 <UART_SetConfig+0x56c>)
 80088e2:	61fb      	str	r3, [r7, #28]
        break;
 80088e4:	e00d      	b.n	8008902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088e6:	f7fc fc05 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80088ea:	61f8      	str	r0, [r7, #28]
        break;
 80088ec:	e009      	b.n	8008902 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f2:	61fb      	str	r3, [r7, #28]
        break;
 80088f4:	e005      	b.n	8008902 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d077      	beq.n	80089f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	005a      	lsls	r2, r3, #1
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	085b      	lsrs	r3, r3, #1
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b0f      	cmp	r3, #15
 8008922:	d916      	bls.n	8008952 <UART_SetConfig+0x4a6>
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892a:	d212      	bcs.n	8008952 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f023 030f 	bic.w	r3, r3, #15
 8008934:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	b29b      	uxth	r3, r3
 800893c:	f003 0307 	and.w	r3, r3, #7
 8008940:	b29a      	uxth	r2, r3
 8008942:	8afb      	ldrh	r3, [r7, #22]
 8008944:	4313      	orrs	r3, r2
 8008946:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	8afa      	ldrh	r2, [r7, #22]
 800894e:	60da      	str	r2, [r3, #12]
 8008950:	e052      	b.n	80089f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008958:	e04e      	b.n	80089f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800895a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800895e:	2b08      	cmp	r3, #8
 8008960:	d827      	bhi.n	80089b2 <UART_SetConfig+0x506>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x4bc>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	0800898d 	.word	0x0800898d
 800896c:	08008995 	.word	0x08008995
 8008970:	0800899d 	.word	0x0800899d
 8008974:	080089b3 	.word	0x080089b3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089b3 	.word	0x080089b3
 8008980:	080089b3 	.word	0x080089b3
 8008984:	080089b3 	.word	0x080089b3
 8008988:	080089ab 	.word	0x080089ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fc fc4a 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 8008990:	61f8      	str	r0, [r7, #28]
        break;
 8008992:	e014      	b.n	80089be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008994:	f7fc fc5c 	bl	8005250 <HAL_RCC_GetPCLK2Freq>
 8008998:	61f8      	str	r0, [r7, #28]
        break;
 800899a:	e010      	b.n	80089be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800899c:	4b1e      	ldr	r3, [pc, #120]	; (8008a18 <UART_SetConfig+0x56c>)
 800899e:	61fb      	str	r3, [r7, #28]
        break;
 80089a0:	e00d      	b.n	80089be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a2:	f7fc fba7 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80089a6:	61f8      	str	r0, [r7, #28]
        break;
 80089a8:	e009      	b.n	80089be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ae:	61fb      	str	r3, [r7, #28]
        break;
 80089b0:	e005      	b.n	80089be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80089bc:	bf00      	nop
    }

    if (pclk != 0U)
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d019      	beq.n	80089f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	085a      	lsrs	r2, r3, #1
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	441a      	add	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b0f      	cmp	r3, #15
 80089dc:	d909      	bls.n	80089f2 <UART_SetConfig+0x546>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e4:	d205      	bcs.n	80089f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60da      	str	r2, [r3, #12]
 80089f0:	e002      	b.n	80089f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3728      	adds	r7, #40	; 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a12:	bf00      	nop
 8008a14:	40008000 	.word	0x40008000
 8008a18:	00f42400 	.word	0x00f42400

08008a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1a:	d10a      	bne.n	8008b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	605a      	str	r2, [r3, #4]
  }
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b098      	sub	sp, #96	; 0x60
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b70:	f7fa fa32 	bl	8002fd8 <HAL_GetTick>
 8008b74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d12e      	bne.n	8008be2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f88c 	bl	8008cb0 <UART_WaitOnFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d021      	beq.n	8008be2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e6      	bne.n	8008b9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e062      	b.n	8008ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d149      	bne.n	8008c84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f856 	bl	8008cb0 <UART_WaitOnFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d03c      	beq.n	8008c84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	623b      	str	r3, [r7, #32]
   return(result);
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3308      	adds	r3, #8
 8008c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
 8008c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c5c:	61fa      	str	r2, [r7, #28]
 8008c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	69b9      	ldr	r1, [r7, #24]
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e5      	bne.n	8008c3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e011      	b.n	8008ca8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3758      	adds	r7, #88	; 0x58
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc0:	e049      	b.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d045      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cca:	f7fa f985 	bl	8002fd8 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d302      	bcc.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e048      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d031      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d110      	bne.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2208      	movs	r2, #8
 8008d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f8ff 	bl	8008f0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2208      	movs	r2, #8
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e029      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d30:	d111      	bne.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f8e5 	bl	8008f0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e00f      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d0a6      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b096      	sub	sp, #88	; 0x58
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	88fa      	ldrh	r2, [r7, #6]
 8008d98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2222      	movs	r2, #34	; 0x22
 8008da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d028      	beq.n	8008e06 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db8:	4a3e      	ldr	r2, [pc, #248]	; (8008eb4 <UART_Start_Receive_DMA+0x134>)
 8008dba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc0:	4a3d      	ldr	r2, [pc, #244]	; (8008eb8 <UART_Start_Receive_DMA+0x138>)
 8008dc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc8:	4a3c      	ldr	r2, [pc, #240]	; (8008ebc <UART_Start_Receive_DMA+0x13c>)
 8008dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3324      	adds	r3, #36	; 0x24
 8008dde:	4619      	mov	r1, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de4:	461a      	mov	r2, r3
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	f7fa faf0 	bl	80033cc <HAL_DMA_Start_IT>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2210      	movs	r2, #16
 8008df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e051      	b.n	8008eaa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d018      	beq.n	8008e40 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e22:	657b      	str	r3, [r7, #84]	; 0x54
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e2e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3308      	adds	r3, #8
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	653b      	str	r3, [r7, #80]	; 0x50
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e60:	637a      	str	r2, [r7, #52]	; 0x34
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e5      	bne.n	8008e40 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	613b      	str	r3, [r7, #16]
   return(result);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3308      	adds	r3, #8
 8008e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e94:	623a      	str	r2, [r7, #32]
 8008e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	69f9      	ldr	r1, [r7, #28]
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e5      	bne.n	8008e74 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3758      	adds	r7, #88	; 0x58
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800908b 	.word	0x0800908b
 8008eb8:	080091b7 	.word	0x080091b7
 8008ebc:	080091f5 	.word	0x080091f5

08008ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b089      	sub	sp, #36	; 0x24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008f00:	bf00      	nop
 8008f02:	3724      	adds	r7, #36	; 0x24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b095      	sub	sp, #84	; 0x54
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f32:	643b      	str	r3, [r7, #64]	; 0x40
 8008f34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e6      	bne.n	8008f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d118      	bne.n	8008fb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f023 0310 	bic.w	r3, r3, #16
 8008f96:	647b      	str	r3, [r7, #68]	; 0x44
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6979      	ldr	r1, [r7, #20]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e6      	bne.n	8008f82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008fc8:	bf00      	nop
 8008fca:	3754      	adds	r7, #84	; 0x54
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b090      	sub	sp, #64	; 0x40
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d137      	bne.n	8009060 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	623b      	str	r3, [r7, #32]
   return(result);
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009018:	633a      	str	r2, [r7, #48]	; 0x30
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800901e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e5      	bne.n	8008ff8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60fb      	str	r3, [r7, #12]
   return(result);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009040:	637b      	str	r3, [r7, #52]	; 0x34
 8009042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	617b      	str	r3, [r7, #20]
   return(result);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800905e:	e002      	b.n	8009066 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009062:	f7ff f9ef 	bl	8008444 <HAL_UART_TxCpltCallback>
}
 8009066:	bf00      	nop
 8009068:	3740      	adds	r7, #64	; 0x40
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff f9eb 	bl	8008458 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b09c      	sub	sp, #112	; 0x70
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d171      	bne.n	800918a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80090a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80090ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	667b      	str	r3, [r7, #100]	; 0x64
 80090f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009100:	647a      	str	r2, [r7, #68]	; 0x44
 8009102:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	623b      	str	r3, [r7, #32]
   return(result);
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912a:	663b      	str	r3, [r7, #96]	; 0x60
 800912c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3308      	adds	r3, #8
 8009132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009134:	633a      	str	r2, [r7, #48]	; 0x30
 8009136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800913a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e5      	bne.n	8009114 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914a:	2220      	movs	r2, #32
 800914c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009154:	2b01      	cmp	r3, #1
 8009156:	d118      	bne.n	800918a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	60fb      	str	r3, [r7, #12]
   return(result);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f023 0310 	bic.w	r3, r3, #16
 800916c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800916e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	617b      	str	r3, [r7, #20]
   return(result);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800918a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918c:	2200      	movs	r2, #0
 800918e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009194:	2b01      	cmp	r3, #1
 8009196:	d107      	bne.n	80091a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800919e:	4619      	mov	r1, r3
 80091a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091a2:	f7ff f977 	bl	8008494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091a6:	e002      	b.n	80091ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80091a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80091aa:	f7f8 fa57 	bl	800165c <HAL_UART_RxCpltCallback>
}
 80091ae:	bf00      	nop
 80091b0:	3770      	adds	r7, #112	; 0x70
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d109      	bne.n	80091e6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091d8:	085b      	lsrs	r3, r3, #1
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4619      	mov	r1, r3
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff f958 	bl	8008494 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091e4:	e002      	b.n	80091ec <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff f940 	bl	800846c <HAL_UART_RxHalfCpltCallback>
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009206:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800920e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b80      	cmp	r3, #128	; 0x80
 800921c:	d109      	bne.n	8009232 <UART_DMAError+0x3e>
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b21      	cmp	r3, #33	; 0x21
 8009222:	d106      	bne.n	8009232 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2200      	movs	r2, #0
 8009228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f7ff fe47 	bl	8008ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	d109      	bne.n	8009254 <UART_DMAError+0x60>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b22      	cmp	r3, #34	; 0x22
 8009244:	d106      	bne.n	8009254 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2200      	movs	r2, #0
 800924a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800924e:	6978      	ldr	r0, [r7, #20]
 8009250:	f7ff fe5c 	bl	8008f0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925a:	f043 0210 	orr.w	r2, r3, #16
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009264:	6978      	ldr	r0, [r7, #20]
 8009266:	f7ff f90b 	bl	8008480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800926a:	bf00      	nop
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff f8f5 	bl	8008480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ba:	61fb      	str	r3, [r7, #28]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6979      	ldr	r1, [r7, #20]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	613b      	str	r3, [r7, #16]
   return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e6      	bne.n	80092a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2220      	movs	r2, #32
 80092dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff f8ad 	bl	8008444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ea:	bf00      	nop
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <VL53L4CD_SetI2CAddress>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	4603      	mov	r3, r0
 800930e:	460a      	mov	r2, r1
 8009310:	80fb      	strh	r3, [r7, #6]
 8009312:	4613      	mov	r3, r2
 8009314:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 800931a:	797b      	ldrb	r3, [r7, #5]
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	2101      	movs	r1, #1
 8009324:	4618      	mov	r0, r3
 8009326:	f7f9 f823 	bl	8002370 <VL53L4CD_WrByte>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	4313      	orrs	r3, r2
 8009332:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <VL53L4CD_GetSensorId>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	4603      	mov	r3, r0
 8009346:	6039      	str	r1, [r7, #0]
 8009348:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	f240 110f 	movw	r1, #271	; 0x10f
 8009356:	4618      	mov	r0, r3
 8009358:	f7f8 ff9e 	bl	8002298 <VL53L4CD_RdWord>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4313      	orrs	r3, r2
 8009364:	73fb      	strb	r3, [r7, #15]
	return status;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <VL53L4CD_SensorInit>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 800937e:	2301      	movs	r3, #1
 8009380:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 8009386:	f107 0209 	add.w	r2, r7, #9
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	21e5      	movs	r1, #229	; 0xe5
 800938e:	4618      	mov	r0, r3
 8009390:	f7f8 ffbc 	bl	800230c <VL53L4CD_RdByte>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4313      	orrs	r3, r2
 800939c:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 800939e:	7a7b      	ldrb	r3, [r7, #9]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d102      	bne.n	80093aa <VL53L4CD_SensorInit+0x3a>
		{
			continue_loop = (uint8_t)0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	737b      	strb	r3, [r7, #13]
 80093a8:	e00b      	b.n	80093c2 <VL53L4CD_SensorInit+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 80093aa:	897b      	ldrh	r3, [r7, #10]
 80093ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093b0:	d203      	bcs.n	80093ba <VL53L4CD_SensorInit+0x4a>
		{
			i++;
 80093b2:	897b      	ldrh	r3, [r7, #10]
 80093b4:	3301      	adds	r3, #1
 80093b6:	817b      	strh	r3, [r7, #10]
 80093b8:	e003      	b.n	80093c2 <VL53L4CD_SensorInit+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 80093be:	23ff      	movs	r3, #255	; 0xff
 80093c0:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	2101      	movs	r1, #1
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f9 f85c 	bl	8002484 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 80093cc:	7b7b      	ldrb	r3, [r7, #13]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d0d9      	beq.n	8009386 <VL53L4CD_SensorInit+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80093d2:	232d      	movs	r3, #45	; 0x2d
 80093d4:	73bb      	strb	r3, [r7, #14]
 80093d6:	e011      	b.n	80093fc <VL53L4CD_SensorInit+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	3b2d      	subs	r3, #45	; 0x2d
				VL53L4CD_DEFAULT_CONFIGURATION[
 80093e0:	4a44      	ldr	r2, [pc, #272]	; (80094f4 <VL53L4CD_SensorInit+0x184>)
 80093e2:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f8 ffc2 	bl	8002370 <VL53L4CD_WrByte>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	3301      	adds	r3, #1
 80093fa:	73bb      	strb	r3, [r7, #14]
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b87      	cmp	r3, #135	; 0x87
 8009400:	d9ea      	bls.n	80093d8 <VL53L4CD_SensorInit+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	2240      	movs	r2, #64	; 0x40
 8009406:	2187      	movs	r1, #135	; 0x87
 8009408:	4618      	mov	r0, r3
 800940a:	f7f8 ffb1 	bl	8002370 <VL53L4CD_WrByte>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	4313      	orrs	r3, r2
 8009416:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 8009418:	2300      	movs	r3, #0
 800941a:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 800941c:	2301      	movs	r3, #1
 800941e:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8009420:	f107 0209 	add.w	r2, r7, #9
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f000 f8c5 	bl	80095b8 <VL53L4CD_CheckForDataReady>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	4313      	orrs	r3, r2
 8009436:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8009438:	7a7b      	ldrb	r3, [r7, #9]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d102      	bne.n	8009444 <VL53L4CD_SensorInit+0xd4>
		{
			continue_loop = (uint8_t)0;
 800943e:	2300      	movs	r3, #0
 8009440:	737b      	strb	r3, [r7, #13]
 8009442:	e00b      	b.n	800945c <VL53L4CD_SensorInit+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8009444:	897b      	ldrh	r3, [r7, #10]
 8009446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800944a:	d203      	bcs.n	8009454 <VL53L4CD_SensorInit+0xe4>
		{
			i++;
 800944c:	897b      	ldrh	r3, [r7, #10]
 800944e:	3301      	adds	r3, #1
 8009450:	817b      	strh	r3, [r7, #10]
 8009452:	e003      	b.n	800945c <VL53L4CD_SensorInit+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8009454:	2300      	movs	r3, #0
 8009456:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8009458:	23ff      	movs	r3, #255	; 0xff
 800945a:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 800945c:	88fb      	ldrh	r3, [r7, #6]
 800945e:	2101      	movs	r1, #1
 8009460:	4618      	mov	r0, r3
 8009462:	f7f9 f80f 	bl	8002484 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 8009466:	7b7b      	ldrb	r3, [r7, #13]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d0d9      	beq.n	8009420 <VL53L4CD_SensorInit+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 f842 	bl	80094f8 <VL53L4CD_ClearInterrupt>
 8009474:	4603      	mov	r3, r0
 8009476:	461a      	mov	r2, r3
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	4313      	orrs	r3, r2
 800947c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f882 	bl	800958a <VL53L4CD_StopRanging>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	4313      	orrs	r3, r2
 800948e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8009490:	88fb      	ldrh	r3, [r7, #6]
 8009492:	2209      	movs	r2, #9
 8009494:	2108      	movs	r1, #8
 8009496:	4618      	mov	r0, r3
 8009498:	f7f8 ff6a 	bl	8002370 <VL53L4CD_WrByte>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	2200      	movs	r2, #0
 80094aa:	210b      	movs	r1, #11
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f8 ff5f 	bl	8002370 <VL53L4CD_WrByte>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80094c2:	2124      	movs	r1, #36	; 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f8 ff7b 	bl	80023c0 <VL53L4CD_WrWord>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 80094d4:	88fb      	ldrh	r3, [r7, #6]
 80094d6:	2200      	movs	r2, #0
 80094d8:	2132      	movs	r1, #50	; 0x32
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f8b0 	bl	8009640 <VL53L4CD_SetRangeTiming>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	73fb      	strb	r3, [r7, #15]

	return status;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	0800c7e8 	.word	0x0800c7e8

080094f8 <VL53L4CD_ClearInterrupt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	2201      	movs	r2, #1
 800950a:	2186      	movs	r1, #134	; 0x86
 800950c:	4618      	mov	r0, r3
 800950e:	f7f8 ff2f 	bl	8002370 <VL53L4CD_WrByte>
 8009512:	4603      	mov	r3, r0
 8009514:	461a      	mov	r2, r3
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	4313      	orrs	r3, r2
 800951a:	73fb      	strb	r3, [r7, #15]
	return status;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	4603      	mov	r3, r0
 800952e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8009534:	f107 0208 	add.w	r2, r7, #8
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	216c      	movs	r1, #108	; 0x6c
 800953c:	4618      	mov	r0, r3
 800953e:	f7f8 fe6f 	bl	8002220 <VL53L4CD_RdDWord>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4313      	orrs	r3, r2
 800954a:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <VL53L4CD_StartRanging+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	2221      	movs	r2, #33	; 0x21
 8009556:	2187      	movs	r1, #135	; 0x87
 8009558:	4618      	mov	r0, r3
 800955a:	f7f8 ff09 	bl	8002370 <VL53L4CD_WrByte>
 800955e:	4603      	mov	r3, r0
 8009560:	461a      	mov	r2, r3
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4313      	orrs	r3, r2
 8009566:	73fb      	strb	r3, [r7, #15]
 8009568:	e00a      	b.n	8009580 <VL53L4CD_StartRanging+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 800956a:	88fb      	ldrh	r3, [r7, #6]
 800956c:	2240      	movs	r2, #64	; 0x40
 800956e:	2187      	movs	r1, #135	; 0x87
 8009570:	4618      	mov	r0, r3
 8009572:	f7f8 fefd 	bl	8002370 <VL53L4CD_WrByte>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4313      	orrs	r3, r2
 800957e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8009580:	7bfb      	ldrb	r3, [r7, #15]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	4603      	mov	r3, r0
 8009592:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8009598:	88fb      	ldrh	r3, [r7, #6]
 800959a:	2200      	movs	r2, #0
 800959c:	2187      	movs	r1, #135	; 0x87
 800959e:	4618      	mov	r0, r3
 80095a0:	f7f8 fee6 	bl	8002370 <VL53L4CD_WrByte>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	73fb      	strb	r3, [r7, #15]
	return status;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 80095c8:	f107 020d 	add.w	r2, r7, #13
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	2130      	movs	r1, #48	; 0x30
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f8 fe9b 	bl	800230c <VL53L4CD_RdByte>
 80095d6:	4603      	mov	r3, r0
 80095d8:	461a      	mov	r2, r3
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	4313      	orrs	r3, r2
 80095de:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 80095e0:	7b7b      	ldrb	r3, [r7, #13]
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 80095ea:	7b7b      	ldrb	r3, [r7, #13]
 80095ec:	091b      	lsrs	r3, r3, #4
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 80095f2:	7b7b      	ldrb	r3, [r7, #13]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d102      	bne.n	80095fe <VL53L4CD_CheckForDataReady+0x46>
	{
		int_pol = (uint8_t)0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
 80095fc:	e001      	b.n	8009602 <VL53L4CD_CheckForDataReady+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 80095fe:	2301      	movs	r3, #1
 8009600:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8009602:	f107 020d 	add.w	r2, r7, #13
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	2131      	movs	r1, #49	; 0x31
 800960a:	4618      	mov	r0, r3
 800960c:	f7f8 fe7e 	bl	800230c <VL53L4CD_RdByte>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	4313      	orrs	r3, r2
 8009618:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 800961a:	7b7b      	ldrb	r3, [r7, #13]
 800961c:	f003 0201 	and.w	r2, r3, #1
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	429a      	cmp	r2, r3
 8009624:	d103      	bne.n	800962e <VL53L4CD_CheckForDataReady+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]
 800962c:	e002      	b.n	8009634 <VL53L4CD_CheckForDataReady+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8009634:	7bbb      	ldrb	r3, [r7, #14]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08c      	sub	sp, #48	; 0x30
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800964e:	2300      	movs	r3, #0
 8009650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8009654:	2300      	movs	r3, #0
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
 8009658:	2300      	movs	r3, #0
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 800965c:	4b86      	ldr	r3, [pc, #536]	; (8009878 <VL53L4CD_SetRangeTiming+0x238>)
 800965e:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8009660:	f107 0214 	add.w	r2, r7, #20
 8009664:	89fb      	ldrh	r3, [r7, #14]
 8009666:	2106      	movs	r1, #6
 8009668:	4618      	mov	r0, r3
 800966a:	f7f8 fe15 	bl	8002298 <VL53L4CD_RdWord>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009676:	4313      	orrs	r3, r2
 8009678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(osc_frequency != (uint16_t)0)
 800967c:	8abb      	ldrh	r3, [r7, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d012      	beq.n	80096a8 <VL53L4CD_SetRangeTiming+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009688:	fb02 f303 	mul.w	r3, r2, r3
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 800968e:	8abb      	ldrh	r3, [r7, #20]
 8009690:	461a      	mov	r2, r3
 8009692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009696:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 800969a:	4613      	mov	r3, r2
 800969c:	00db      	lsls	r3, r3, #3
 800969e:	4413      	add	r3, r2
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	099b      	lsrs	r3, r3, #6
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80096a6:	e005      	b.n	80096b4 <VL53L4CD_SetRangeTiming+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80096a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096ac:	f063 0301 	orn	r3, r3, #1
 80096b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10) 
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d906      	bls.n	80096c8 <VL53L4CD_SetRangeTiming+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2bc8      	cmp	r3, #200	; 0xc8
 80096be:	d803      	bhi.n	80096c8 <VL53L4CD_SetRangeTiming+0x88>
 80096c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <VL53L4CD_SetRangeTiming+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 80096c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096cc:	f063 0301 	orn	r3, r3, #1
 80096d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80096d4:	e05e      	b.n	8009794 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d111      	bne.n	8009700 <VL53L4CD_SetRangeTiming+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 80096dc:	89fb      	ldrh	r3, [r7, #14]
 80096de:	2200      	movs	r2, #0
 80096e0:	216c      	movs	r1, #108	; 0x6c
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f8 fe9a 	bl	800241c <VL53L4CD_WrDWord>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096f0:	4313      	orrs	r3, r2
 80096f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		timing_budget_us -= (uint32_t)2500;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
 80096fe:	e049      	b.n	8009794 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	429a      	cmp	r2, r3
 8009706:	d93f      	bls.n	8009788 <VL53L4CD_SetRangeTiming+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8009708:	f107 0216 	add.w	r2, r7, #22
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	21de      	movs	r1, #222	; 0xde
 8009710:	4618      	mov	r0, r3
 8009712:	f7f8 fdc1 	bl	8002298 <VL53L4CD_RdWord>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800971e:	4313      	orrs	r3, r2
 8009720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8009724:	8afb      	ldrh	r3, [r7, #22]
 8009726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800972a:	b29b      	uxth	r3, r3
 800972c:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009738:	edd7 7a07 	vldr	s15, [r7, #28]
 800973c:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8009740:	8afb      	ldrh	r3, [r7, #22]
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 800974a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974e:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8009752:	edd7 7a07 	vldr	s15, [r7, #28]
 8009756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975a:	89fb      	ldrh	r3, [r7, #14]
 800975c:	ee17 2a90 	vmov	r2, s15
 8009760:	216c      	movs	r1, #108	; 0x6c
 8009762:	4618      	mov	r0, r3
 8009764:	f7f8 fe5a 	bl	800241c <VL53L4CD_WrDWord>
 8009768:	4603      	mov	r3, r0
 800976a:	461a      	mov	r2, r3
 800976c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009770:	4313      	orrs	r3, r2
 8009772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	f5a3 5386 	sub.w	r3, r3, #4288	; 0x10c0
 800977c:	3b0c      	subs	r3, #12
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
		timing_budget_us /= (uint32_t)2;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
 8009786:	e005      	b.n	8009794 <VL53L4CD_SetRangeTiming+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8009788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800978c:	f063 0301 	orn	r3, r3, #1
 8009790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8009794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009798:	2bfe      	cmp	r3, #254	; 0xfe
 800979a:	d067      	beq.n	800986c <VL53L4CD_SetRangeTiming+0x22c>
	{
				ms_byte = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	85bb      	strh	r3, [r7, #44]	; 0x2c
				timing_budget_us = timing_budget_us << 12;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	031b      	lsls	r3, r3, #12
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
				tmp = macro_period_us*(uint32_t)16;
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	09da      	lsrs	r2, r3, #7
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	441a      	add	r2, r3
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097bc:	3b01      	subs	r3, #1
 80097be:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80097c0:	e005      	b.n	80097ce <VL53L4CD_SetRangeTiming+0x18e>
						 ls_byte = ls_byte >> 1;
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 80097c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80097ca:	3301      	adds	r3, #1
 80097cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1f4      	bne.n	80097c2 <VL53L4CD_SetRangeTiming+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 80097d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80097da:	021b      	lsls	r3, r3, #8
 80097dc:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 80097e6:	4413      	add	r3, r2
 80097e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 80097ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80097ec:	89fb      	ldrh	r3, [r7, #14]
 80097ee:	215e      	movs	r1, #94	; 0x5e
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f8 fde5 	bl	80023c0 <VL53L4CD_WrWord>
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097fe:	4313      	orrs	r3, r2
 8009800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				ms_byte = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	85bb      	strh	r3, [r7, #44]	; 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8009808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800980a:	4613      	mov	r3, r2
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	09da      	lsrs	r2, r3, #7
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	441a      	add	r2, r3
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	099b      	lsrs	r3, r3, #6
 8009820:	fbb2 f3f3 	udiv	r3, r2, r3
 8009824:	3b01      	subs	r3, #1
 8009826:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8009828:	e005      	b.n	8009836 <VL53L4CD_SetRangeTiming+0x1f6>
						 ls_byte = ls_byte >> 1;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8009830:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009832:	3301      	adds	r3, #1
 8009834:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f4      	bne.n	800982a <VL53L4CD_SetRangeTiming+0x1ea>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8009840:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	b29b      	uxth	r3, r3
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 800984e:	4413      	add	r3, r2
 8009850:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8009852:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	2161      	movs	r1, #97	; 0x61
 8009858:	4618      	mov	r0, r3
 800985a:	f7f8 fdb1 	bl	80023c0 <VL53L4CD_WrWord>
 800985e:	4603      	mov	r3, r0
 8009860:	461a      	mov	r2, r3
 8009862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009866:	4313      	orrs	r3, r2
 8009868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return status;
 800986c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009870:	4618      	mov	r0, r3
 8009872:	3730      	adds	r7, #48	; 0x30
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	3f870a3d 	.word	0x3f870a3d

0800987c <VL53L4CD_GetResult>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 800987c:	b5b0      	push	{r4, r5, r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009888:	2300      	movs	r3, #0
 800988a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 800988e:	4b52      	ldr	r3, [pc, #328]	; (80099d8 <VL53L4CD_GetResult+0x15c>)
 8009890:	f107 0408 	add.w	r4, r7, #8
 8009894:	461d      	mov	r5, r3
 8009896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800989a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800989e:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 80098a2:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	2189      	movs	r1, #137	; 0x89
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fd2e 	bl	800230c <VL53L4CD_RdByte>
 80098b0:	4603      	mov	r3, r0
 80098b2:	461a      	mov	r2, r3
 80098b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098b8:	4313      	orrs	r3, r2
 80098ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 80098be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098c2:	f003 031f 	and.w	r3, r3, #31
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (temp_8 < (uint8_t)24)
 80098cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098d0:	2b17      	cmp	r3, #23
 80098d2:	d807      	bhi.n	80098e4 <VL53L4CD_GetResult+0x68>
	{
		temp_8 = status_rtn[temp_8];
 80098d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098d8:	3328      	adds	r3, #40	; 0x28
 80098da:	443b      	add	r3, r7
 80098dc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80098e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	p_result->range_status = temp_8;
 80098e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 80098ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80098f0:	88fb      	ldrh	r3, [r7, #6]
 80098f2:	218c      	movs	r1, #140	; 0x8c
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f8 fccf 	bl	8002298 <VL53L4CD_RdWord>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009902:	4313      	orrs	r3, r2
 8009904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8009908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	b29a      	uxth	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8009912:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	218e      	movs	r1, #142	; 0x8e
 800991a:	4618      	mov	r0, r3
 800991c:	f7f8 fcbc 	bl	8002298 <VL53L4CD_RdWord>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009928:	4313      	orrs	r3, r2
 800992a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 800992e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	b29a      	uxth	r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8009938:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	2190      	movs	r1, #144	; 0x90
 8009940:	4618      	mov	r0, r3
 8009942:	f7f8 fca9 	bl	8002298 <VL53L4CD_RdWord>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800994e:	4313      	orrs	r3, r2
 8009950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8009954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	b29a      	uxth	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 800995e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	2192      	movs	r1, #146	; 0x92
 8009966:	4618      	mov	r0, r3
 8009968:	f7f8 fc96 	bl	8002298 <VL53L4CD_RdWord>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009974:	4313      	orrs	r3, r2
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 800997a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800997c:	089b      	lsrs	r3, r3, #2
 800997e:	b29a      	uxth	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8009984:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	2196      	movs	r1, #150	; 0x96
 800998c:	4618      	mov	r0, r3
 800998e:	f7f8 fc83 	bl	8002298 <VL53L4CD_RdWord>
 8009992:	4603      	mov	r3, r0
 8009994:	461a      	mov	r2, r3
 8009996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999a:	4313      	orrs	r3, r2
 800999c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 80099a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	899b      	ldrh	r3, [r3, #12]
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80099ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	899b      	ldrh	r3, [r3, #12]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 80099c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	80da      	strh	r2, [r3, #6]

	return status;
 80099ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3728      	adds	r7, #40	; 0x28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bdb0      	pop	{r4, r5, r7, pc}
 80099d6:	bf00      	nop
 80099d8:	0800c788 	.word	0x0800c788

080099dc <VL53L4CD_SetOffset>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	460a      	mov	r2, r1
 80099e6:	80fb      	strh	r3, [r7, #6]
 80099e8:	4613      	mov	r3, r2
 80099ea:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 80099f0:	88bb      	ldrh	r3, [r7, #4]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 80099f6:	89ba      	ldrh	r2, [r7, #12]
 80099f8:	88fb      	ldrh	r3, [r7, #6]
 80099fa:	211e      	movs	r1, #30
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f8 fcdf 	bl	80023c0 <VL53L4CD_WrWord>
 8009a02:	4603      	mov	r3, r0
 8009a04:	461a      	mov	r2, r3
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8009a0c:	88fb      	ldrh	r3, [r7, #6]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2120      	movs	r1, #32
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7f8 fcd4 	bl	80023c0 <VL53L4CD_WrWord>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2200      	movs	r2, #0
 8009a26:	2122      	movs	r1, #34	; 0x22
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f8 fcc9 	bl	80023c0 <VL53L4CD_WrWord>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461a      	mov	r2, r3
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	73fb      	strb	r3, [r7, #15]
	return status;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <__cvt>:
 8009a42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a46:	ec55 4b10 	vmov	r4, r5, d0
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	460e      	mov	r6, r1
 8009a4e:	4619      	mov	r1, r3
 8009a50:	462b      	mov	r3, r5
 8009a52:	bfbb      	ittet	lt
 8009a54:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a58:	461d      	movlt	r5, r3
 8009a5a:	2300      	movge	r3, #0
 8009a5c:	232d      	movlt	r3, #45	; 0x2d
 8009a5e:	700b      	strb	r3, [r1, #0]
 8009a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a66:	4691      	mov	r9, r2
 8009a68:	f023 0820 	bic.w	r8, r3, #32
 8009a6c:	bfbc      	itt	lt
 8009a6e:	4622      	movlt	r2, r4
 8009a70:	4614      	movlt	r4, r2
 8009a72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a76:	d005      	beq.n	8009a84 <__cvt+0x42>
 8009a78:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a7c:	d100      	bne.n	8009a80 <__cvt+0x3e>
 8009a7e:	3601      	adds	r6, #1
 8009a80:	2102      	movs	r1, #2
 8009a82:	e000      	b.n	8009a86 <__cvt+0x44>
 8009a84:	2103      	movs	r1, #3
 8009a86:	ab03      	add	r3, sp, #12
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	ab02      	add	r3, sp, #8
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	ec45 4b10 	vmov	d0, r4, r5
 8009a92:	4653      	mov	r3, sl
 8009a94:	4632      	mov	r2, r6
 8009a96:	f000 ff53 	bl	800a940 <_dtoa_r>
 8009a9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	d102      	bne.n	8009aa8 <__cvt+0x66>
 8009aa2:	f019 0f01 	tst.w	r9, #1
 8009aa6:	d022      	beq.n	8009aee <__cvt+0xac>
 8009aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aac:	eb07 0906 	add.w	r9, r7, r6
 8009ab0:	d110      	bne.n	8009ad4 <__cvt+0x92>
 8009ab2:	783b      	ldrb	r3, [r7, #0]
 8009ab4:	2b30      	cmp	r3, #48	; 0x30
 8009ab6:	d10a      	bne.n	8009ace <__cvt+0x8c>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2300      	movs	r3, #0
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f7 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac4:	b918      	cbnz	r0, 8009ace <__cvt+0x8c>
 8009ac6:	f1c6 0601 	rsb	r6, r6, #1
 8009aca:	f8ca 6000 	str.w	r6, [sl]
 8009ace:	f8da 3000 	ldr.w	r3, [sl]
 8009ad2:	4499      	add	r9, r3
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	f7f6 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ae0:	b108      	cbz	r0, 8009ae6 <__cvt+0xa4>
 8009ae2:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ae6:	2230      	movs	r2, #48	; 0x30
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	454b      	cmp	r3, r9
 8009aec:	d307      	bcc.n	8009afe <__cvt+0xbc>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af2:	1bdb      	subs	r3, r3, r7
 8009af4:	4638      	mov	r0, r7
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	b004      	add	sp, #16
 8009afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afe:	1c59      	adds	r1, r3, #1
 8009b00:	9103      	str	r1, [sp, #12]
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	e7f0      	b.n	8009ae8 <__cvt+0xa6>

08009b06 <__exponent>:
 8009b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	bfb8      	it	lt
 8009b0e:	4249      	neglt	r1, r1
 8009b10:	f803 2b02 	strb.w	r2, [r3], #2
 8009b14:	bfb4      	ite	lt
 8009b16:	222d      	movlt	r2, #45	; 0x2d
 8009b18:	222b      	movge	r2, #43	; 0x2b
 8009b1a:	2909      	cmp	r1, #9
 8009b1c:	7042      	strb	r2, [r0, #1]
 8009b1e:	dd2a      	ble.n	8009b76 <__exponent+0x70>
 8009b20:	f10d 0207 	add.w	r2, sp, #7
 8009b24:	4617      	mov	r7, r2
 8009b26:	260a      	movs	r6, #10
 8009b28:	4694      	mov	ip, r2
 8009b2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b2e:	fb06 1415 	mls	r4, r6, r5, r1
 8009b32:	3430      	adds	r4, #48	; 0x30
 8009b34:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009b38:	460c      	mov	r4, r1
 8009b3a:	2c63      	cmp	r4, #99	; 0x63
 8009b3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009b40:	4629      	mov	r1, r5
 8009b42:	dcf1      	bgt.n	8009b28 <__exponent+0x22>
 8009b44:	3130      	adds	r1, #48	; 0x30
 8009b46:	f1ac 0402 	sub.w	r4, ip, #2
 8009b4a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b4e:	1c41      	adds	r1, r0, #1
 8009b50:	4622      	mov	r2, r4
 8009b52:	42ba      	cmp	r2, r7
 8009b54:	d30a      	bcc.n	8009b6c <__exponent+0x66>
 8009b56:	f10d 0209 	add.w	r2, sp, #9
 8009b5a:	eba2 020c 	sub.w	r2, r2, ip
 8009b5e:	42bc      	cmp	r4, r7
 8009b60:	bf88      	it	hi
 8009b62:	2200      	movhi	r2, #0
 8009b64:	4413      	add	r3, r2
 8009b66:	1a18      	subs	r0, r3, r0
 8009b68:	b003      	add	sp, #12
 8009b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009b70:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009b74:	e7ed      	b.n	8009b52 <__exponent+0x4c>
 8009b76:	2330      	movs	r3, #48	; 0x30
 8009b78:	3130      	adds	r1, #48	; 0x30
 8009b7a:	7083      	strb	r3, [r0, #2]
 8009b7c:	70c1      	strb	r1, [r0, #3]
 8009b7e:	1d03      	adds	r3, r0, #4
 8009b80:	e7f1      	b.n	8009b66 <__exponent+0x60>
	...

08009b84 <_printf_float>:
 8009b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	ed2d 8b02 	vpush	{d8}
 8009b8c:	b08d      	sub	sp, #52	; 0x34
 8009b8e:	460c      	mov	r4, r1
 8009b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b94:	4616      	mov	r6, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	4605      	mov	r5, r0
 8009b9a:	f000 fdd1 	bl	800a740 <_localeconv_r>
 8009b9e:	f8d0 a000 	ldr.w	sl, [r0]
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	f7f6 fb64 	bl	8000270 <strlen>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930a      	str	r3, [sp, #40]	; 0x28
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bb8:	3307      	adds	r3, #7
 8009bba:	f023 0307 	bic.w	r3, r3, #7
 8009bbe:	f103 0208 	add.w	r2, r3, #8
 8009bc2:	f8c8 2000 	str.w	r2, [r8]
 8009bc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bd4:	ee08 0a10 	vmov	s16, r0
 8009bd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be0:	4b9e      	ldr	r3, [pc, #632]	; (8009e5c <_printf_float+0x2d8>)
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	f7f6 ffa1 	bl	8000b2c <__aeabi_dcmpun>
 8009bea:	bb88      	cbnz	r0, 8009c50 <_printf_float+0xcc>
 8009bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bf0:	4b9a      	ldr	r3, [pc, #616]	; (8009e5c <_printf_float+0x2d8>)
 8009bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf6:	f7f6 ff7b 	bl	8000af0 <__aeabi_dcmple>
 8009bfa:	bb48      	cbnz	r0, 8009c50 <_printf_float+0xcc>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4640      	mov	r0, r8
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8009c08:	b110      	cbz	r0, 8009c10 <_printf_float+0x8c>
 8009c0a:	232d      	movs	r3, #45	; 0x2d
 8009c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c10:	4a93      	ldr	r2, [pc, #588]	; (8009e60 <_printf_float+0x2dc>)
 8009c12:	4b94      	ldr	r3, [pc, #592]	; (8009e64 <_printf_float+0x2e0>)
 8009c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c18:	bf94      	ite	ls
 8009c1a:	4690      	movls	r8, r2
 8009c1c:	4698      	movhi	r8, r3
 8009c1e:	2303      	movs	r3, #3
 8009c20:	6123      	str	r3, [r4, #16]
 8009c22:	9b05      	ldr	r3, [sp, #20]
 8009c24:	f023 0304 	bic.w	r3, r3, #4
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	f04f 0900 	mov.w	r9, #0
 8009c2e:	9700      	str	r7, [sp, #0]
 8009c30:	4633      	mov	r3, r6
 8009c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c34:	4621      	mov	r1, r4
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 f9da 	bl	8009ff0 <_printf_common>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	f040 8090 	bne.w	8009d62 <_printf_float+0x1de>
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	b00d      	add	sp, #52	; 0x34
 8009c48:	ecbd 8b02 	vpop	{d8}
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	4642      	mov	r2, r8
 8009c52:	464b      	mov	r3, r9
 8009c54:	4640      	mov	r0, r8
 8009c56:	4649      	mov	r1, r9
 8009c58:	f7f6 ff68 	bl	8000b2c <__aeabi_dcmpun>
 8009c5c:	b140      	cbz	r0, 8009c70 <_printf_float+0xec>
 8009c5e:	464b      	mov	r3, r9
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbc      	itt	lt
 8009c64:	232d      	movlt	r3, #45	; 0x2d
 8009c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c6a:	4a7f      	ldr	r2, [pc, #508]	; (8009e68 <_printf_float+0x2e4>)
 8009c6c:	4b7f      	ldr	r3, [pc, #508]	; (8009e6c <_printf_float+0x2e8>)
 8009c6e:	e7d1      	b.n	8009c14 <_printf_float+0x90>
 8009c70:	6863      	ldr	r3, [r4, #4]
 8009c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c76:	9206      	str	r2, [sp, #24]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	d13f      	bne.n	8009cfc <_printf_float+0x178>
 8009c7c:	2306      	movs	r3, #6
 8009c7e:	6063      	str	r3, [r4, #4]
 8009c80:	9b05      	ldr	r3, [sp, #20]
 8009c82:	6861      	ldr	r1, [r4, #4]
 8009c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8009c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c92:	ab09      	add	r3, sp, #36	; 0x24
 8009c94:	ec49 8b10 	vmov	d0, r8, r9
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	6022      	str	r2, [r4, #0]
 8009c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f7ff fece 	bl	8009a42 <__cvt>
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009caa:	2b47      	cmp	r3, #71	; 0x47
 8009cac:	4680      	mov	r8, r0
 8009cae:	d108      	bne.n	8009cc2 <_printf_float+0x13e>
 8009cb0:	1cc8      	adds	r0, r1, #3
 8009cb2:	db02      	blt.n	8009cba <_printf_float+0x136>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	dd41      	ble.n	8009d3e <_printf_float+0x1ba>
 8009cba:	f1ab 0302 	sub.w	r3, fp, #2
 8009cbe:	fa5f fb83 	uxtb.w	fp, r3
 8009cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cc6:	d820      	bhi.n	8009d0a <_printf_float+0x186>
 8009cc8:	3901      	subs	r1, #1
 8009cca:	465a      	mov	r2, fp
 8009ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8009cd2:	f7ff ff18 	bl	8009b06 <__exponent>
 8009cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd8:	1813      	adds	r3, r2, r0
 8009cda:	2a01      	cmp	r2, #1
 8009cdc:	4681      	mov	r9, r0
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	dc02      	bgt.n	8009ce8 <_printf_float+0x164>
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	07d2      	lsls	r2, r2, #31
 8009ce6:	d501      	bpl.n	8009cec <_printf_float+0x168>
 8009ce8:	3301      	adds	r3, #1
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d09c      	beq.n	8009c2e <_printf_float+0xaa>
 8009cf4:	232d      	movs	r3, #45	; 0x2d
 8009cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfa:	e798      	b.n	8009c2e <_printf_float+0xaa>
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	2a47      	cmp	r2, #71	; 0x47
 8009d00:	d1be      	bne.n	8009c80 <_printf_float+0xfc>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1bc      	bne.n	8009c80 <_printf_float+0xfc>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e7b9      	b.n	8009c7e <_printf_float+0xfa>
 8009d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d0e:	d118      	bne.n	8009d42 <_printf_float+0x1be>
 8009d10:	2900      	cmp	r1, #0
 8009d12:	6863      	ldr	r3, [r4, #4]
 8009d14:	dd0b      	ble.n	8009d2e <_printf_float+0x1aa>
 8009d16:	6121      	str	r1, [r4, #16]
 8009d18:	b913      	cbnz	r3, 8009d20 <_printf_float+0x19c>
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	07d0      	lsls	r0, r2, #31
 8009d1e:	d502      	bpl.n	8009d26 <_printf_float+0x1a2>
 8009d20:	3301      	adds	r3, #1
 8009d22:	440b      	add	r3, r1
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d28:	f04f 0900 	mov.w	r9, #0
 8009d2c:	e7de      	b.n	8009cec <_printf_float+0x168>
 8009d2e:	b913      	cbnz	r3, 8009d36 <_printf_float+0x1b2>
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	07d2      	lsls	r2, r2, #31
 8009d34:	d501      	bpl.n	8009d3a <_printf_float+0x1b6>
 8009d36:	3302      	adds	r3, #2
 8009d38:	e7f4      	b.n	8009d24 <_printf_float+0x1a0>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e7f2      	b.n	8009d24 <_printf_float+0x1a0>
 8009d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d44:	4299      	cmp	r1, r3
 8009d46:	db05      	blt.n	8009d54 <_printf_float+0x1d0>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	6121      	str	r1, [r4, #16]
 8009d4c:	07d8      	lsls	r0, r3, #31
 8009d4e:	d5ea      	bpl.n	8009d26 <_printf_float+0x1a2>
 8009d50:	1c4b      	adds	r3, r1, #1
 8009d52:	e7e7      	b.n	8009d24 <_printf_float+0x1a0>
 8009d54:	2900      	cmp	r1, #0
 8009d56:	bfd4      	ite	le
 8009d58:	f1c1 0202 	rsble	r2, r1, #2
 8009d5c:	2201      	movgt	r2, #1
 8009d5e:	4413      	add	r3, r2
 8009d60:	e7e0      	b.n	8009d24 <_printf_float+0x1a0>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	055a      	lsls	r2, r3, #21
 8009d66:	d407      	bmi.n	8009d78 <_printf_float+0x1f4>
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	d12c      	bne.n	8009dd0 <_printf_float+0x24c>
 8009d76:	e764      	b.n	8009c42 <_printf_float+0xbe>
 8009d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d7c:	f240 80e0 	bls.w	8009f40 <_printf_float+0x3bc>
 8009d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	f7f6 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d034      	beq.n	8009dfa <_printf_float+0x276>
 8009d90:	4a37      	ldr	r2, [pc, #220]	; (8009e70 <_printf_float+0x2ec>)
 8009d92:	2301      	movs	r3, #1
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af51 	beq.w	8009c42 <_printf_float+0xbe>
 8009da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009da4:	429a      	cmp	r2, r3
 8009da6:	db02      	blt.n	8009dae <_printf_float+0x22a>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	07d8      	lsls	r0, r3, #31
 8009dac:	d510      	bpl.n	8009dd0 <_printf_float+0x24c>
 8009dae:	ee18 3a10 	vmov	r3, s16
 8009db2:	4652      	mov	r2, sl
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af41 	beq.w	8009c42 <_printf_float+0xbe>
 8009dc0:	f04f 0800 	mov.w	r8, #0
 8009dc4:	f104 091a 	add.w	r9, r4, #26
 8009dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4543      	cmp	r3, r8
 8009dce:	dc09      	bgt.n	8009de4 <_printf_float+0x260>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	079b      	lsls	r3, r3, #30
 8009dd4:	f100 8107 	bmi.w	8009fe6 <_printf_float+0x462>
 8009dd8:	68e0      	ldr	r0, [r4, #12]
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	bfb8      	it	lt
 8009de0:	4618      	movlt	r0, r3
 8009de2:	e730      	b.n	8009c46 <_printf_float+0xc2>
 8009de4:	2301      	movs	r3, #1
 8009de6:	464a      	mov	r2, r9
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f af27 	beq.w	8009c42 <_printf_float+0xbe>
 8009df4:	f108 0801 	add.w	r8, r8, #1
 8009df8:	e7e6      	b.n	8009dc8 <_printf_float+0x244>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dc39      	bgt.n	8009e74 <_printf_float+0x2f0>
 8009e00:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <_printf_float+0x2ec>)
 8009e02:	2301      	movs	r3, #1
 8009e04:	4631      	mov	r1, r6
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f43f af19 	beq.w	8009c42 <_printf_float+0xbe>
 8009e10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e14:	4313      	orrs	r3, r2
 8009e16:	d102      	bne.n	8009e1e <_printf_float+0x29a>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	07d9      	lsls	r1, r3, #31
 8009e1c:	d5d8      	bpl.n	8009dd0 <_printf_float+0x24c>
 8009e1e:	ee18 3a10 	vmov	r3, s16
 8009e22:	4652      	mov	r2, sl
 8009e24:	4631      	mov	r1, r6
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b8      	blx	r7
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	f43f af09 	beq.w	8009c42 <_printf_float+0xbe>
 8009e30:	f04f 0900 	mov.w	r9, #0
 8009e34:	f104 0a1a 	add.w	sl, r4, #26
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	425b      	negs	r3, r3
 8009e3c:	454b      	cmp	r3, r9
 8009e3e:	dc01      	bgt.n	8009e44 <_printf_float+0x2c0>
 8009e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e42:	e792      	b.n	8009d6a <_printf_float+0x1e6>
 8009e44:	2301      	movs	r3, #1
 8009e46:	4652      	mov	r2, sl
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f aef7 	beq.w	8009c42 <_printf_float+0xbe>
 8009e54:	f109 0901 	add.w	r9, r9, #1
 8009e58:	e7ee      	b.n	8009e38 <_printf_float+0x2b4>
 8009e5a:	bf00      	nop
 8009e5c:	7fefffff 	.word	0x7fefffff
 8009e60:	0800c843 	.word	0x0800c843
 8009e64:	0800c847 	.word	0x0800c847
 8009e68:	0800c84b 	.word	0x0800c84b
 8009e6c:	0800c84f 	.word	0x0800c84f
 8009e70:	0800c853 	.word	0x0800c853
 8009e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	bfa8      	it	ge
 8009e7c:	461a      	movge	r2, r3
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	4691      	mov	r9, r2
 8009e82:	dc37      	bgt.n	8009ef4 <_printf_float+0x370>
 8009e84:	f04f 0b00 	mov.w	fp, #0
 8009e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e8c:	f104 021a 	add.w	r2, r4, #26
 8009e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	eba3 0309 	sub.w	r3, r3, r9
 8009e98:	455b      	cmp	r3, fp
 8009e9a:	dc33      	bgt.n	8009f04 <_printf_float+0x380>
 8009e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	db3b      	blt.n	8009f1c <_printf_float+0x398>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	07da      	lsls	r2, r3, #31
 8009ea8:	d438      	bmi.n	8009f1c <_printf_float+0x398>
 8009eaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009eae:	eba2 0903 	sub.w	r9, r2, r3
 8009eb2:	9b05      	ldr	r3, [sp, #20]
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	4591      	cmp	r9, r2
 8009eb8:	bfa8      	it	ge
 8009eba:	4691      	movge	r9, r2
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	dc35      	bgt.n	8009f2e <_printf_float+0x3aa>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eca:	f104 0a1a 	add.w	sl, r4, #26
 8009ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	eba3 0309 	sub.w	r3, r3, r9
 8009ed8:	4543      	cmp	r3, r8
 8009eda:	f77f af79 	ble.w	8009dd0 <_printf_float+0x24c>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4652      	mov	r2, sl
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f aeaa 	beq.w	8009c42 <_printf_float+0xbe>
 8009eee:	f108 0801 	add.w	r8, r8, #1
 8009ef2:	e7ec      	b.n	8009ece <_printf_float+0x34a>
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4642      	mov	r2, r8
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	d1c0      	bne.n	8009e84 <_printf_float+0x300>
 8009f02:	e69e      	b.n	8009c42 <_printf_float+0xbe>
 8009f04:	2301      	movs	r3, #1
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	9205      	str	r2, [sp, #20]
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f ae97 	beq.w	8009c42 <_printf_float+0xbe>
 8009f14:	9a05      	ldr	r2, [sp, #20]
 8009f16:	f10b 0b01 	add.w	fp, fp, #1
 8009f1a:	e7b9      	b.n	8009e90 <_printf_float+0x30c>
 8009f1c:	ee18 3a10 	vmov	r3, s16
 8009f20:	4652      	mov	r2, sl
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d1be      	bne.n	8009eaa <_printf_float+0x326>
 8009f2c:	e689      	b.n	8009c42 <_printf_float+0xbe>
 8009f2e:	9a05      	ldr	r2, [sp, #20]
 8009f30:	464b      	mov	r3, r9
 8009f32:	4442      	add	r2, r8
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d1c1      	bne.n	8009ec2 <_printf_float+0x33e>
 8009f3e:	e680      	b.n	8009c42 <_printf_float+0xbe>
 8009f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f42:	2a01      	cmp	r2, #1
 8009f44:	dc01      	bgt.n	8009f4a <_printf_float+0x3c6>
 8009f46:	07db      	lsls	r3, r3, #31
 8009f48:	d53a      	bpl.n	8009fc0 <_printf_float+0x43c>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4642      	mov	r2, r8
 8009f4e:	4631      	mov	r1, r6
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b8      	blx	r7
 8009f54:	3001      	adds	r0, #1
 8009f56:	f43f ae74 	beq.w	8009c42 <_printf_float+0xbe>
 8009f5a:	ee18 3a10 	vmov	r3, s16
 8009f5e:	4652      	mov	r2, sl
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f ae6b 	beq.w	8009c42 <_printf_float+0xbe>
 8009f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f70:	2200      	movs	r2, #0
 8009f72:	2300      	movs	r3, #0
 8009f74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009f78:	f7f6 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f7c:	b9d8      	cbnz	r0, 8009fb6 <_printf_float+0x432>
 8009f7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f82:	f108 0201 	add.w	r2, r8, #1
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d10e      	bne.n	8009fae <_printf_float+0x42a>
 8009f90:	e657      	b.n	8009c42 <_printf_float+0xbe>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4652      	mov	r2, sl
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f ae50 	beq.w	8009c42 <_printf_float+0xbe>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	4543      	cmp	r3, r8
 8009fac:	dcf1      	bgt.n	8009f92 <_printf_float+0x40e>
 8009fae:	464b      	mov	r3, r9
 8009fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fb4:	e6da      	b.n	8009d6c <_printf_float+0x1e8>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	f104 0a1a 	add.w	sl, r4, #26
 8009fbe:	e7f2      	b.n	8009fa6 <_printf_float+0x422>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	e7df      	b.n	8009f86 <_printf_float+0x402>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	464a      	mov	r2, r9
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f ae36 	beq.w	8009c42 <_printf_float+0xbe>
 8009fd6:	f108 0801 	add.w	r8, r8, #1
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fde:	1a5b      	subs	r3, r3, r1
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	dcf0      	bgt.n	8009fc6 <_printf_float+0x442>
 8009fe4:	e6f8      	b.n	8009dd8 <_printf_float+0x254>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	f104 0919 	add.w	r9, r4, #25
 8009fee:	e7f4      	b.n	8009fda <_printf_float+0x456>

08009ff0 <_printf_common>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	688a      	ldr	r2, [r1, #8]
 8009ffa:	690b      	ldr	r3, [r1, #16]
 8009ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a000:	4293      	cmp	r3, r2
 800a002:	bfb8      	it	lt
 800a004:	4613      	movlt	r3, r2
 800a006:	6033      	str	r3, [r6, #0]
 800a008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a00c:	4607      	mov	r7, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	b10a      	cbz	r2, 800a016 <_printf_common+0x26>
 800a012:	3301      	adds	r3, #1
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	0699      	lsls	r1, r3, #26
 800a01a:	bf42      	ittt	mi
 800a01c:	6833      	ldrmi	r3, [r6, #0]
 800a01e:	3302      	addmi	r3, #2
 800a020:	6033      	strmi	r3, [r6, #0]
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	f015 0506 	ands.w	r5, r5, #6
 800a028:	d106      	bne.n	800a038 <_printf_common+0x48>
 800a02a:	f104 0a19 	add.w	sl, r4, #25
 800a02e:	68e3      	ldr	r3, [r4, #12]
 800a030:	6832      	ldr	r2, [r6, #0]
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	42ab      	cmp	r3, r5
 800a036:	dc26      	bgt.n	800a086 <_printf_common+0x96>
 800a038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a03c:	1e13      	subs	r3, r2, #0
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	bf18      	it	ne
 800a042:	2301      	movne	r3, #1
 800a044:	0692      	lsls	r2, r2, #26
 800a046:	d42b      	bmi.n	800a0a0 <_printf_common+0xb0>
 800a048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a04c:	4649      	mov	r1, r9
 800a04e:	4638      	mov	r0, r7
 800a050:	47c0      	blx	r8
 800a052:	3001      	adds	r0, #1
 800a054:	d01e      	beq.n	800a094 <_printf_common+0xa4>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	6922      	ldr	r2, [r4, #16]
 800a05a:	f003 0306 	and.w	r3, r3, #6
 800a05e:	2b04      	cmp	r3, #4
 800a060:	bf02      	ittt	eq
 800a062:	68e5      	ldreq	r5, [r4, #12]
 800a064:	6833      	ldreq	r3, [r6, #0]
 800a066:	1aed      	subeq	r5, r5, r3
 800a068:	68a3      	ldr	r3, [r4, #8]
 800a06a:	bf0c      	ite	eq
 800a06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a070:	2500      	movne	r5, #0
 800a072:	4293      	cmp	r3, r2
 800a074:	bfc4      	itt	gt
 800a076:	1a9b      	subgt	r3, r3, r2
 800a078:	18ed      	addgt	r5, r5, r3
 800a07a:	2600      	movs	r6, #0
 800a07c:	341a      	adds	r4, #26
 800a07e:	42b5      	cmp	r5, r6
 800a080:	d11a      	bne.n	800a0b8 <_printf_common+0xc8>
 800a082:	2000      	movs	r0, #0
 800a084:	e008      	b.n	800a098 <_printf_common+0xa8>
 800a086:	2301      	movs	r3, #1
 800a088:	4652      	mov	r2, sl
 800a08a:	4649      	mov	r1, r9
 800a08c:	4638      	mov	r0, r7
 800a08e:	47c0      	blx	r8
 800a090:	3001      	adds	r0, #1
 800a092:	d103      	bne.n	800a09c <_printf_common+0xac>
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09c:	3501      	adds	r5, #1
 800a09e:	e7c6      	b.n	800a02e <_printf_common+0x3e>
 800a0a0:	18e1      	adds	r1, r4, r3
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	2030      	movs	r0, #48	; 0x30
 800a0a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0aa:	4422      	add	r2, r4
 800a0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	e7c7      	b.n	800a048 <_printf_common+0x58>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4622      	mov	r2, r4
 800a0bc:	4649      	mov	r1, r9
 800a0be:	4638      	mov	r0, r7
 800a0c0:	47c0      	blx	r8
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d0e6      	beq.n	800a094 <_printf_common+0xa4>
 800a0c6:	3601      	adds	r6, #1
 800a0c8:	e7d9      	b.n	800a07e <_printf_common+0x8e>
	...

0800a0cc <_printf_i>:
 800a0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d0:	7e0f      	ldrb	r7, [r1, #24]
 800a0d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0d4:	2f78      	cmp	r7, #120	; 0x78
 800a0d6:	4691      	mov	r9, r2
 800a0d8:	4680      	mov	r8, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	469a      	mov	sl, r3
 800a0de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0e2:	d807      	bhi.n	800a0f4 <_printf_i+0x28>
 800a0e4:	2f62      	cmp	r7, #98	; 0x62
 800a0e6:	d80a      	bhi.n	800a0fe <_printf_i+0x32>
 800a0e8:	2f00      	cmp	r7, #0
 800a0ea:	f000 80d4 	beq.w	800a296 <_printf_i+0x1ca>
 800a0ee:	2f58      	cmp	r7, #88	; 0x58
 800a0f0:	f000 80c0 	beq.w	800a274 <_printf_i+0x1a8>
 800a0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0fc:	e03a      	b.n	800a174 <_printf_i+0xa8>
 800a0fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a102:	2b15      	cmp	r3, #21
 800a104:	d8f6      	bhi.n	800a0f4 <_printf_i+0x28>
 800a106:	a101      	add	r1, pc, #4	; (adr r1, 800a10c <_printf_i+0x40>)
 800a108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a10c:	0800a165 	.word	0x0800a165
 800a110:	0800a179 	.word	0x0800a179
 800a114:	0800a0f5 	.word	0x0800a0f5
 800a118:	0800a0f5 	.word	0x0800a0f5
 800a11c:	0800a0f5 	.word	0x0800a0f5
 800a120:	0800a0f5 	.word	0x0800a0f5
 800a124:	0800a179 	.word	0x0800a179
 800a128:	0800a0f5 	.word	0x0800a0f5
 800a12c:	0800a0f5 	.word	0x0800a0f5
 800a130:	0800a0f5 	.word	0x0800a0f5
 800a134:	0800a0f5 	.word	0x0800a0f5
 800a138:	0800a27d 	.word	0x0800a27d
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a237 	.word	0x0800a237
 800a144:	0800a0f5 	.word	0x0800a0f5
 800a148:	0800a0f5 	.word	0x0800a0f5
 800a14c:	0800a29f 	.word	0x0800a29f
 800a150:	0800a0f5 	.word	0x0800a0f5
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a0f5 	.word	0x0800a0f5
 800a15c:	0800a0f5 	.word	0x0800a0f5
 800a160:	0800a23f 	.word	0x0800a23f
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	1d1a      	adds	r2, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	602a      	str	r2, [r5, #0]
 800a16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a174:	2301      	movs	r3, #1
 800a176:	e09f      	b.n	800a2b8 <_printf_i+0x1ec>
 800a178:	6820      	ldr	r0, [r4, #0]
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	0607      	lsls	r7, r0, #24
 800a17e:	f103 0104 	add.w	r1, r3, #4
 800a182:	6029      	str	r1, [r5, #0]
 800a184:	d501      	bpl.n	800a18a <_printf_i+0xbe>
 800a186:	681e      	ldr	r6, [r3, #0]
 800a188:	e003      	b.n	800a192 <_printf_i+0xc6>
 800a18a:	0646      	lsls	r6, r0, #25
 800a18c:	d5fb      	bpl.n	800a186 <_printf_i+0xba>
 800a18e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a192:	2e00      	cmp	r6, #0
 800a194:	da03      	bge.n	800a19e <_printf_i+0xd2>
 800a196:	232d      	movs	r3, #45	; 0x2d
 800a198:	4276      	negs	r6, r6
 800a19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a19e:	485a      	ldr	r0, [pc, #360]	; (800a308 <_printf_i+0x23c>)
 800a1a0:	230a      	movs	r3, #10
 800a1a2:	e012      	b.n	800a1ca <_printf_i+0xfe>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	1d19      	adds	r1, r3, #4
 800a1aa:	6029      	str	r1, [r5, #0]
 800a1ac:	0605      	lsls	r5, r0, #24
 800a1ae:	d501      	bpl.n	800a1b4 <_printf_i+0xe8>
 800a1b0:	681e      	ldr	r6, [r3, #0]
 800a1b2:	e002      	b.n	800a1ba <_printf_i+0xee>
 800a1b4:	0641      	lsls	r1, r0, #25
 800a1b6:	d5fb      	bpl.n	800a1b0 <_printf_i+0xe4>
 800a1b8:	881e      	ldrh	r6, [r3, #0]
 800a1ba:	4853      	ldr	r0, [pc, #332]	; (800a308 <_printf_i+0x23c>)
 800a1bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1be:	bf0c      	ite	eq
 800a1c0:	2308      	moveq	r3, #8
 800a1c2:	230a      	movne	r3, #10
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1ca:	6865      	ldr	r5, [r4, #4]
 800a1cc:	60a5      	str	r5, [r4, #8]
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	bfa2      	ittt	ge
 800a1d2:	6821      	ldrge	r1, [r4, #0]
 800a1d4:	f021 0104 	bicge.w	r1, r1, #4
 800a1d8:	6021      	strge	r1, [r4, #0]
 800a1da:	b90e      	cbnz	r6, 800a1e0 <_printf_i+0x114>
 800a1dc:	2d00      	cmp	r5, #0
 800a1de:	d04b      	beq.n	800a278 <_printf_i+0x1ac>
 800a1e0:	4615      	mov	r5, r2
 800a1e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1e6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1ea:	5dc7      	ldrb	r7, [r0, r7]
 800a1ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1f0:	4637      	mov	r7, r6
 800a1f2:	42bb      	cmp	r3, r7
 800a1f4:	460e      	mov	r6, r1
 800a1f6:	d9f4      	bls.n	800a1e2 <_printf_i+0x116>
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d10b      	bne.n	800a214 <_printf_i+0x148>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	07de      	lsls	r6, r3, #31
 800a200:	d508      	bpl.n	800a214 <_printf_i+0x148>
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	6861      	ldr	r1, [r4, #4]
 800a206:	4299      	cmp	r1, r3
 800a208:	bfde      	ittt	le
 800a20a:	2330      	movle	r3, #48	; 0x30
 800a20c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a210:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a214:	1b52      	subs	r2, r2, r5
 800a216:	6122      	str	r2, [r4, #16]
 800a218:	f8cd a000 	str.w	sl, [sp]
 800a21c:	464b      	mov	r3, r9
 800a21e:	aa03      	add	r2, sp, #12
 800a220:	4621      	mov	r1, r4
 800a222:	4640      	mov	r0, r8
 800a224:	f7ff fee4 	bl	8009ff0 <_printf_common>
 800a228:	3001      	adds	r0, #1
 800a22a:	d14a      	bne.n	800a2c2 <_printf_i+0x1f6>
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	b004      	add	sp, #16
 800a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	f043 0320 	orr.w	r3, r3, #32
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	4833      	ldr	r0, [pc, #204]	; (800a30c <_printf_i+0x240>)
 800a240:	2778      	movs	r7, #120	; 0x78
 800a242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	6829      	ldr	r1, [r5, #0]
 800a24a:	061f      	lsls	r7, r3, #24
 800a24c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a250:	d402      	bmi.n	800a258 <_printf_i+0x18c>
 800a252:	065f      	lsls	r7, r3, #25
 800a254:	bf48      	it	mi
 800a256:	b2b6      	uxthmi	r6, r6
 800a258:	07df      	lsls	r7, r3, #31
 800a25a:	bf48      	it	mi
 800a25c:	f043 0320 	orrmi.w	r3, r3, #32
 800a260:	6029      	str	r1, [r5, #0]
 800a262:	bf48      	it	mi
 800a264:	6023      	strmi	r3, [r4, #0]
 800a266:	b91e      	cbnz	r6, 800a270 <_printf_i+0x1a4>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	f023 0320 	bic.w	r3, r3, #32
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	2310      	movs	r3, #16
 800a272:	e7a7      	b.n	800a1c4 <_printf_i+0xf8>
 800a274:	4824      	ldr	r0, [pc, #144]	; (800a308 <_printf_i+0x23c>)
 800a276:	e7e4      	b.n	800a242 <_printf_i+0x176>
 800a278:	4615      	mov	r5, r2
 800a27a:	e7bd      	b.n	800a1f8 <_printf_i+0x12c>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	6826      	ldr	r6, [r4, #0]
 800a280:	6961      	ldr	r1, [r4, #20]
 800a282:	1d18      	adds	r0, r3, #4
 800a284:	6028      	str	r0, [r5, #0]
 800a286:	0635      	lsls	r5, r6, #24
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	d501      	bpl.n	800a290 <_printf_i+0x1c4>
 800a28c:	6019      	str	r1, [r3, #0]
 800a28e:	e002      	b.n	800a296 <_printf_i+0x1ca>
 800a290:	0670      	lsls	r0, r6, #25
 800a292:	d5fb      	bpl.n	800a28c <_printf_i+0x1c0>
 800a294:	8019      	strh	r1, [r3, #0]
 800a296:	2300      	movs	r3, #0
 800a298:	6123      	str	r3, [r4, #16]
 800a29a:	4615      	mov	r5, r2
 800a29c:	e7bc      	b.n	800a218 <_printf_i+0x14c>
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	1d1a      	adds	r2, r3, #4
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	681d      	ldr	r5, [r3, #0]
 800a2a6:	6862      	ldr	r2, [r4, #4]
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7f5 ff90 	bl	80001d0 <memchr>
 800a2b0:	b108      	cbz	r0, 800a2b6 <_printf_i+0x1ea>
 800a2b2:	1b40      	subs	r0, r0, r5
 800a2b4:	6060      	str	r0, [r4, #4]
 800a2b6:	6863      	ldr	r3, [r4, #4]
 800a2b8:	6123      	str	r3, [r4, #16]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c0:	e7aa      	b.n	800a218 <_printf_i+0x14c>
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	47d0      	blx	sl
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d0ad      	beq.n	800a22c <_printf_i+0x160>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	079b      	lsls	r3, r3, #30
 800a2d4:	d413      	bmi.n	800a2fe <_printf_i+0x232>
 800a2d6:	68e0      	ldr	r0, [r4, #12]
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	4298      	cmp	r0, r3
 800a2dc:	bfb8      	it	lt
 800a2de:	4618      	movlt	r0, r3
 800a2e0:	e7a6      	b.n	800a230 <_printf_i+0x164>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	47d0      	blx	sl
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d09d      	beq.n	800a22c <_printf_i+0x160>
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	68e3      	ldr	r3, [r4, #12]
 800a2f4:	9903      	ldr	r1, [sp, #12]
 800a2f6:	1a5b      	subs	r3, r3, r1
 800a2f8:	42ab      	cmp	r3, r5
 800a2fa:	dcf2      	bgt.n	800a2e2 <_printf_i+0x216>
 800a2fc:	e7eb      	b.n	800a2d6 <_printf_i+0x20a>
 800a2fe:	2500      	movs	r5, #0
 800a300:	f104 0619 	add.w	r6, r4, #25
 800a304:	e7f5      	b.n	800a2f2 <_printf_i+0x226>
 800a306:	bf00      	nop
 800a308:	0800c855 	.word	0x0800c855
 800a30c:	0800c866 	.word	0x0800c866

0800a310 <std>:
 800a310:	2300      	movs	r3, #0
 800a312:	b510      	push	{r4, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	e9c0 3300 	strd	r3, r3, [r0]
 800a31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a31e:	6083      	str	r3, [r0, #8]
 800a320:	8181      	strh	r1, [r0, #12]
 800a322:	6643      	str	r3, [r0, #100]	; 0x64
 800a324:	81c2      	strh	r2, [r0, #14]
 800a326:	6183      	str	r3, [r0, #24]
 800a328:	4619      	mov	r1, r3
 800a32a:	2208      	movs	r2, #8
 800a32c:	305c      	adds	r0, #92	; 0x5c
 800a32e:	f000 f9ff 	bl	800a730 <memset>
 800a332:	4b0d      	ldr	r3, [pc, #52]	; (800a368 <std+0x58>)
 800a334:	6263      	str	r3, [r4, #36]	; 0x24
 800a336:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <std+0x5c>)
 800a338:	62a3      	str	r3, [r4, #40]	; 0x28
 800a33a:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <std+0x60>)
 800a33c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a33e:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <std+0x64>)
 800a340:	6323      	str	r3, [r4, #48]	; 0x30
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <std+0x68>)
 800a344:	6224      	str	r4, [r4, #32]
 800a346:	429c      	cmp	r4, r3
 800a348:	d006      	beq.n	800a358 <std+0x48>
 800a34a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a34e:	4294      	cmp	r4, r2
 800a350:	d002      	beq.n	800a358 <std+0x48>
 800a352:	33d0      	adds	r3, #208	; 0xd0
 800a354:	429c      	cmp	r4, r3
 800a356:	d105      	bne.n	800a364 <std+0x54>
 800a358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a360:	f000 ba62 	b.w	800a828 <__retarget_lock_init_recursive>
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	0800a581 	.word	0x0800a581
 800a36c:	0800a5a3 	.word	0x0800a5a3
 800a370:	0800a5db 	.word	0x0800a5db
 800a374:	0800a5ff 	.word	0x0800a5ff
 800a378:	20000738 	.word	0x20000738

0800a37c <stdio_exit_handler>:
 800a37c:	4a02      	ldr	r2, [pc, #8]	; (800a388 <stdio_exit_handler+0xc>)
 800a37e:	4903      	ldr	r1, [pc, #12]	; (800a38c <stdio_exit_handler+0x10>)
 800a380:	4803      	ldr	r0, [pc, #12]	; (800a390 <stdio_exit_handler+0x14>)
 800a382:	f000 b869 	b.w	800a458 <_fwalk_sglue>
 800a386:	bf00      	nop
 800a388:	20000030 	.word	0x20000030
 800a38c:	0800c1b1 	.word	0x0800c1b1
 800a390:	2000003c 	.word	0x2000003c

0800a394 <cleanup_stdio>:
 800a394:	6841      	ldr	r1, [r0, #4]
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <cleanup_stdio+0x34>)
 800a398:	4299      	cmp	r1, r3
 800a39a:	b510      	push	{r4, lr}
 800a39c:	4604      	mov	r4, r0
 800a39e:	d001      	beq.n	800a3a4 <cleanup_stdio+0x10>
 800a3a0:	f001 ff06 	bl	800c1b0 <_fflush_r>
 800a3a4:	68a1      	ldr	r1, [r4, #8]
 800a3a6:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <cleanup_stdio+0x38>)
 800a3a8:	4299      	cmp	r1, r3
 800a3aa:	d002      	beq.n	800a3b2 <cleanup_stdio+0x1e>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f001 feff 	bl	800c1b0 <_fflush_r>
 800a3b2:	68e1      	ldr	r1, [r4, #12]
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <cleanup_stdio+0x3c>)
 800a3b6:	4299      	cmp	r1, r3
 800a3b8:	d004      	beq.n	800a3c4 <cleanup_stdio+0x30>
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f001 bef6 	b.w	800c1b0 <_fflush_r>
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20000738 	.word	0x20000738
 800a3cc:	200007a0 	.word	0x200007a0
 800a3d0:	20000808 	.word	0x20000808

0800a3d4 <global_stdio_init.part.0>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <global_stdio_init.part.0+0x30>)
 800a3d8:	4c0b      	ldr	r4, [pc, #44]	; (800a408 <global_stdio_init.part.0+0x34>)
 800a3da:	4a0c      	ldr	r2, [pc, #48]	; (800a40c <global_stdio_init.part.0+0x38>)
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2104      	movs	r1, #4
 800a3e4:	f7ff ff94 	bl	800a310 <std>
 800a3e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	2109      	movs	r1, #9
 800a3f0:	f7ff ff8e 	bl	800a310 <std>
 800a3f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fe:	2112      	movs	r1, #18
 800a400:	f7ff bf86 	b.w	800a310 <std>
 800a404:	20000870 	.word	0x20000870
 800a408:	20000738 	.word	0x20000738
 800a40c:	0800a37d 	.word	0x0800a37d

0800a410 <__sfp_lock_acquire>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__sfp_lock_acquire+0x8>)
 800a412:	f000 ba0a 	b.w	800a82a <__retarget_lock_acquire_recursive>
 800a416:	bf00      	nop
 800a418:	20000879 	.word	0x20000879

0800a41c <__sfp_lock_release>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__sfp_lock_release+0x8>)
 800a41e:	f000 ba05 	b.w	800a82c <__retarget_lock_release_recursive>
 800a422:	bf00      	nop
 800a424:	20000879 	.word	0x20000879

0800a428 <__sinit>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	4604      	mov	r4, r0
 800a42c:	f7ff fff0 	bl	800a410 <__sfp_lock_acquire>
 800a430:	6a23      	ldr	r3, [r4, #32]
 800a432:	b11b      	cbz	r3, 800a43c <__sinit+0x14>
 800a434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a438:	f7ff bff0 	b.w	800a41c <__sfp_lock_release>
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <__sinit+0x28>)
 800a43e:	6223      	str	r3, [r4, #32]
 800a440:	4b04      	ldr	r3, [pc, #16]	; (800a454 <__sinit+0x2c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f5      	bne.n	800a434 <__sinit+0xc>
 800a448:	f7ff ffc4 	bl	800a3d4 <global_stdio_init.part.0>
 800a44c:	e7f2      	b.n	800a434 <__sinit+0xc>
 800a44e:	bf00      	nop
 800a450:	0800a395 	.word	0x0800a395
 800a454:	20000870 	.word	0x20000870

0800a458 <_fwalk_sglue>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4607      	mov	r7, r0
 800a45e:	4688      	mov	r8, r1
 800a460:	4614      	mov	r4, r2
 800a462:	2600      	movs	r6, #0
 800a464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a468:	f1b9 0901 	subs.w	r9, r9, #1
 800a46c:	d505      	bpl.n	800a47a <_fwalk_sglue+0x22>
 800a46e:	6824      	ldr	r4, [r4, #0]
 800a470:	2c00      	cmp	r4, #0
 800a472:	d1f7      	bne.n	800a464 <_fwalk_sglue+0xc>
 800a474:	4630      	mov	r0, r6
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d907      	bls.n	800a490 <_fwalk_sglue+0x38>
 800a480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a484:	3301      	adds	r3, #1
 800a486:	d003      	beq.n	800a490 <_fwalk_sglue+0x38>
 800a488:	4629      	mov	r1, r5
 800a48a:	4638      	mov	r0, r7
 800a48c:	47c0      	blx	r8
 800a48e:	4306      	orrs	r6, r0
 800a490:	3568      	adds	r5, #104	; 0x68
 800a492:	e7e9      	b.n	800a468 <_fwalk_sglue+0x10>

0800a494 <iprintf>:
 800a494:	b40f      	push	{r0, r1, r2, r3}
 800a496:	b507      	push	{r0, r1, r2, lr}
 800a498:	4906      	ldr	r1, [pc, #24]	; (800a4b4 <iprintf+0x20>)
 800a49a:	ab04      	add	r3, sp, #16
 800a49c:	6808      	ldr	r0, [r1, #0]
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	6881      	ldr	r1, [r0, #8]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f001 fce3 	bl	800be70 <_vfiprintf_r>
 800a4aa:	b003      	add	sp, #12
 800a4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b0:	b004      	add	sp, #16
 800a4b2:	4770      	bx	lr
 800a4b4:	20000088 	.word	0x20000088

0800a4b8 <putchar>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	; (800a4c4 <putchar+0xc>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	6882      	ldr	r2, [r0, #8]
 800a4c0:	f001 bf00 	b.w	800c2c4 <_putc_r>
 800a4c4:	20000088 	.word	0x20000088

0800a4c8 <_puts_r>:
 800a4c8:	6a03      	ldr	r3, [r0, #32]
 800a4ca:	b570      	push	{r4, r5, r6, lr}
 800a4cc:	6884      	ldr	r4, [r0, #8]
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	b90b      	cbnz	r3, 800a4d8 <_puts_r+0x10>
 800a4d4:	f7ff ffa8 	bl	800a428 <__sinit>
 800a4d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4da:	07db      	lsls	r3, r3, #31
 800a4dc:	d405      	bmi.n	800a4ea <_puts_r+0x22>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	0598      	lsls	r0, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_puts_r+0x22>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e6:	f000 f9a0 	bl	800a82a <__retarget_lock_acquire_recursive>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	0719      	lsls	r1, r3, #28
 800a4ee:	d513      	bpl.n	800a518 <_puts_r+0x50>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b18b      	cbz	r3, 800a518 <_puts_r+0x50>
 800a4f4:	3e01      	subs	r6, #1
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	60a3      	str	r3, [r4, #8]
 800a500:	b9e9      	cbnz	r1, 800a53e <_puts_r+0x76>
 800a502:	2b00      	cmp	r3, #0
 800a504:	da2e      	bge.n	800a564 <_puts_r+0x9c>
 800a506:	4622      	mov	r2, r4
 800a508:	210a      	movs	r1, #10
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f87b 	bl	800a606 <__swbuf_r>
 800a510:	3001      	adds	r0, #1
 800a512:	d007      	beq.n	800a524 <_puts_r+0x5c>
 800a514:	250a      	movs	r5, #10
 800a516:	e007      	b.n	800a528 <_puts_r+0x60>
 800a518:	4621      	mov	r1, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	f000 f8b0 	bl	800a680 <__swsetup_r>
 800a520:	2800      	cmp	r0, #0
 800a522:	d0e7      	beq.n	800a4f4 <_puts_r+0x2c>
 800a524:	f04f 35ff 	mov.w	r5, #4294967295
 800a528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a52a:	07da      	lsls	r2, r3, #31
 800a52c:	d405      	bmi.n	800a53a <_puts_r+0x72>
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	059b      	lsls	r3, r3, #22
 800a532:	d402      	bmi.n	800a53a <_puts_r+0x72>
 800a534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a536:	f000 f979 	bl	800a82c <__retarget_lock_release_recursive>
 800a53a:	4628      	mov	r0, r5
 800a53c:	bd70      	pop	{r4, r5, r6, pc}
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da04      	bge.n	800a54c <_puts_r+0x84>
 800a542:	69a2      	ldr	r2, [r4, #24]
 800a544:	429a      	cmp	r2, r3
 800a546:	dc06      	bgt.n	800a556 <_puts_r+0x8e>
 800a548:	290a      	cmp	r1, #10
 800a54a:	d004      	beq.n	800a556 <_puts_r+0x8e>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	6022      	str	r2, [r4, #0]
 800a552:	7019      	strb	r1, [r3, #0]
 800a554:	e7cf      	b.n	800a4f6 <_puts_r+0x2e>
 800a556:	4622      	mov	r2, r4
 800a558:	4628      	mov	r0, r5
 800a55a:	f000 f854 	bl	800a606 <__swbuf_r>
 800a55e:	3001      	adds	r0, #1
 800a560:	d1c9      	bne.n	800a4f6 <_puts_r+0x2e>
 800a562:	e7df      	b.n	800a524 <_puts_r+0x5c>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	250a      	movs	r5, #10
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	701d      	strb	r5, [r3, #0]
 800a56e:	e7db      	b.n	800a528 <_puts_r+0x60>

0800a570 <puts>:
 800a570:	4b02      	ldr	r3, [pc, #8]	; (800a57c <puts+0xc>)
 800a572:	4601      	mov	r1, r0
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f7ff bfa7 	b.w	800a4c8 <_puts_r>
 800a57a:	bf00      	nop
 800a57c:	20000088 	.word	0x20000088

0800a580 <__sread>:
 800a580:	b510      	push	{r4, lr}
 800a582:	460c      	mov	r4, r1
 800a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a588:	f000 f900 	bl	800a78c <_read_r>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	bfab      	itete	ge
 800a590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a592:	89a3      	ldrhlt	r3, [r4, #12]
 800a594:	181b      	addge	r3, r3, r0
 800a596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a59a:	bfac      	ite	ge
 800a59c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a59e:	81a3      	strhlt	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}

0800a5a2 <__swrite>:
 800a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	461f      	mov	r7, r3
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	05db      	lsls	r3, r3, #23
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	d505      	bpl.n	800a5c0 <__swrite+0x1e>
 800a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f000 f8d4 	bl	800a768 <_lseek_r>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	f000 b8eb 	b.w	800a7b0 <_write_r>

0800a5da <__sseek>:
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	460c      	mov	r4, r1
 800a5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e2:	f000 f8c1 	bl	800a768 <_lseek_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	bf15      	itete	ne
 800a5ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5f6:	81a3      	strheq	r3, [r4, #12]
 800a5f8:	bf18      	it	ne
 800a5fa:	81a3      	strhne	r3, [r4, #12]
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <__sclose>:
 800a5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a602:	f000 b8a1 	b.w	800a748 <_close_r>

0800a606 <__swbuf_r>:
 800a606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a608:	460e      	mov	r6, r1
 800a60a:	4614      	mov	r4, r2
 800a60c:	4605      	mov	r5, r0
 800a60e:	b118      	cbz	r0, 800a618 <__swbuf_r+0x12>
 800a610:	6a03      	ldr	r3, [r0, #32]
 800a612:	b90b      	cbnz	r3, 800a618 <__swbuf_r+0x12>
 800a614:	f7ff ff08 	bl	800a428 <__sinit>
 800a618:	69a3      	ldr	r3, [r4, #24]
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	071a      	lsls	r2, r3, #28
 800a620:	d525      	bpl.n	800a66e <__swbuf_r+0x68>
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	b31b      	cbz	r3, 800a66e <__swbuf_r+0x68>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	6922      	ldr	r2, [r4, #16]
 800a62a:	1a98      	subs	r0, r3, r2
 800a62c:	6963      	ldr	r3, [r4, #20]
 800a62e:	b2f6      	uxtb	r6, r6
 800a630:	4283      	cmp	r3, r0
 800a632:	4637      	mov	r7, r6
 800a634:	dc04      	bgt.n	800a640 <__swbuf_r+0x3a>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f001 fdb9 	bl	800c1b0 <_fflush_r>
 800a63e:	b9e0      	cbnz	r0, 800a67a <__swbuf_r+0x74>
 800a640:	68a3      	ldr	r3, [r4, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	6022      	str	r2, [r4, #0]
 800a64c:	701e      	strb	r6, [r3, #0]
 800a64e:	6962      	ldr	r2, [r4, #20]
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	429a      	cmp	r2, r3
 800a654:	d004      	beq.n	800a660 <__swbuf_r+0x5a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	07db      	lsls	r3, r3, #31
 800a65a:	d506      	bpl.n	800a66a <__swbuf_r+0x64>
 800a65c:	2e0a      	cmp	r6, #10
 800a65e:	d104      	bne.n	800a66a <__swbuf_r+0x64>
 800a660:	4621      	mov	r1, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f001 fda4 	bl	800c1b0 <_fflush_r>
 800a668:	b938      	cbnz	r0, 800a67a <__swbuf_r+0x74>
 800a66a:	4638      	mov	r0, r7
 800a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66e:	4621      	mov	r1, r4
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f805 	bl	800a680 <__swsetup_r>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0d5      	beq.n	800a626 <__swbuf_r+0x20>
 800a67a:	f04f 37ff 	mov.w	r7, #4294967295
 800a67e:	e7f4      	b.n	800a66a <__swbuf_r+0x64>

0800a680 <__swsetup_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <__swsetup_r+0xac>)
 800a684:	4605      	mov	r5, r0
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	460c      	mov	r4, r1
 800a68a:	b118      	cbz	r0, 800a694 <__swsetup_r+0x14>
 800a68c:	6a03      	ldr	r3, [r0, #32]
 800a68e:	b90b      	cbnz	r3, 800a694 <__swsetup_r+0x14>
 800a690:	f7ff feca 	bl	800a428 <__sinit>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69a:	0718      	lsls	r0, r3, #28
 800a69c:	d422      	bmi.n	800a6e4 <__swsetup_r+0x64>
 800a69e:	06d9      	lsls	r1, r3, #27
 800a6a0:	d407      	bmi.n	800a6b2 <__swsetup_r+0x32>
 800a6a2:	2309      	movs	r3, #9
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e034      	b.n	800a71c <__swsetup_r+0x9c>
 800a6b2:	0758      	lsls	r0, r3, #29
 800a6b4:	d512      	bpl.n	800a6dc <__swsetup_r+0x5c>
 800a6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6b8:	b141      	cbz	r1, 800a6cc <__swsetup_r+0x4c>
 800a6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6be:	4299      	cmp	r1, r3
 800a6c0:	d002      	beq.n	800a6c8 <__swsetup_r+0x48>
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 ff2e 	bl	800b524 <_free_r>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	6363      	str	r3, [r4, #52]	; 0x34
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6063      	str	r3, [r4, #4]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f043 0308 	orr.w	r3, r3, #8
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	b94b      	cbnz	r3, 800a6fc <__swsetup_r+0x7c>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f2:	d003      	beq.n	800a6fc <__swsetup_r+0x7c>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f001 fda8 	bl	800c24c <__smakebuf_r>
 800a6fc:	89a0      	ldrh	r0, [r4, #12]
 800a6fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a702:	f010 0301 	ands.w	r3, r0, #1
 800a706:	d00a      	beq.n	800a71e <__swsetup_r+0x9e>
 800a708:	2300      	movs	r3, #0
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	6963      	ldr	r3, [r4, #20]
 800a70e:	425b      	negs	r3, r3
 800a710:	61a3      	str	r3, [r4, #24]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	b943      	cbnz	r3, 800a728 <__swsetup_r+0xa8>
 800a716:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a71a:	d1c4      	bne.n	800a6a6 <__swsetup_r+0x26>
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	0781      	lsls	r1, r0, #30
 800a720:	bf58      	it	pl
 800a722:	6963      	ldrpl	r3, [r4, #20]
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	e7f4      	b.n	800a712 <__swsetup_r+0x92>
 800a728:	2000      	movs	r0, #0
 800a72a:	e7f7      	b.n	800a71c <__swsetup_r+0x9c>
 800a72c:	20000088 	.word	0x20000088

0800a730 <memset>:
 800a730:	4402      	add	r2, r0
 800a732:	4603      	mov	r3, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	d100      	bne.n	800a73a <memset+0xa>
 800a738:	4770      	bx	lr
 800a73a:	f803 1b01 	strb.w	r1, [r3], #1
 800a73e:	e7f9      	b.n	800a734 <memset+0x4>

0800a740 <_localeconv_r>:
 800a740:	4800      	ldr	r0, [pc, #0]	; (800a744 <_localeconv_r+0x4>)
 800a742:	4770      	bx	lr
 800a744:	2000017c 	.word	0x2000017c

0800a748 <_close_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	; (800a764 <_close_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f8 fb29 	bl	8002daa <_close>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_close_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_close_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20000874 	.word	0x20000874

0800a768 <_lseek_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	; (800a788 <_lseek_r+0x20>)
 800a76c:	4604      	mov	r4, r0
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f8 fb3e 	bl	8002df8 <_lseek>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_lseek_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_lseek_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20000874 	.word	0x20000874

0800a78c <_read_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d07      	ldr	r5, [pc, #28]	; (800a7ac <_read_r+0x20>)
 800a790:	4604      	mov	r4, r0
 800a792:	4608      	mov	r0, r1
 800a794:	4611      	mov	r1, r2
 800a796:	2200      	movs	r2, #0
 800a798:	602a      	str	r2, [r5, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f7f8 facc 	bl	8002d38 <_read>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_read_r+0x1e>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_read_r+0x1e>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20000874 	.word	0x20000874

0800a7b0 <_write_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d07      	ldr	r5, [pc, #28]	; (800a7d0 <_write_r+0x20>)
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	4608      	mov	r0, r1
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	602a      	str	r2, [r5, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f7f8 fad7 	bl	8002d72 <_write>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_write_r+0x1e>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_write_r+0x1e>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20000874 	.word	0x20000874

0800a7d4 <__errno>:
 800a7d4:	4b01      	ldr	r3, [pc, #4]	; (800a7dc <__errno+0x8>)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000088 	.word	0x20000088

0800a7e0 <__libc_init_array>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	4d0d      	ldr	r5, [pc, #52]	; (800a818 <__libc_init_array+0x38>)
 800a7e4:	4c0d      	ldr	r4, [pc, #52]	; (800a81c <__libc_init_array+0x3c>)
 800a7e6:	1b64      	subs	r4, r4, r5
 800a7e8:	10a4      	asrs	r4, r4, #2
 800a7ea:	2600      	movs	r6, #0
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	d109      	bne.n	800a804 <__libc_init_array+0x24>
 800a7f0:	4d0b      	ldr	r5, [pc, #44]	; (800a820 <__libc_init_array+0x40>)
 800a7f2:	4c0c      	ldr	r4, [pc, #48]	; (800a824 <__libc_init_array+0x44>)
 800a7f4:	f001 fe8c 	bl	800c510 <_init>
 800a7f8:	1b64      	subs	r4, r4, r5
 800a7fa:	10a4      	asrs	r4, r4, #2
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	42a6      	cmp	r6, r4
 800a800:	d105      	bne.n	800a80e <__libc_init_array+0x2e>
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	f855 3b04 	ldr.w	r3, [r5], #4
 800a808:	4798      	blx	r3
 800a80a:	3601      	adds	r6, #1
 800a80c:	e7ee      	b.n	800a7ec <__libc_init_array+0xc>
 800a80e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a812:	4798      	blx	r3
 800a814:	3601      	adds	r6, #1
 800a816:	e7f2      	b.n	800a7fe <__libc_init_array+0x1e>
 800a818:	0800cbbc 	.word	0x0800cbbc
 800a81c:	0800cbbc 	.word	0x0800cbbc
 800a820:	0800cbbc 	.word	0x0800cbbc
 800a824:	0800cbc0 	.word	0x0800cbc0

0800a828 <__retarget_lock_init_recursive>:
 800a828:	4770      	bx	lr

0800a82a <__retarget_lock_acquire_recursive>:
 800a82a:	4770      	bx	lr

0800a82c <__retarget_lock_release_recursive>:
 800a82c:	4770      	bx	lr

0800a82e <quorem>:
 800a82e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a832:	6903      	ldr	r3, [r0, #16]
 800a834:	690c      	ldr	r4, [r1, #16]
 800a836:	42a3      	cmp	r3, r4
 800a838:	4607      	mov	r7, r0
 800a83a:	db7e      	blt.n	800a93a <quorem+0x10c>
 800a83c:	3c01      	subs	r4, #1
 800a83e:	f101 0814 	add.w	r8, r1, #20
 800a842:	f100 0514 	add.w	r5, r0, #20
 800a846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a854:	3301      	adds	r3, #1
 800a856:	429a      	cmp	r2, r3
 800a858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a85c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a860:	fbb2 f6f3 	udiv	r6, r2, r3
 800a864:	d331      	bcc.n	800a8ca <quorem+0x9c>
 800a866:	f04f 0e00 	mov.w	lr, #0
 800a86a:	4640      	mov	r0, r8
 800a86c:	46ac      	mov	ip, r5
 800a86e:	46f2      	mov	sl, lr
 800a870:	f850 2b04 	ldr.w	r2, [r0], #4
 800a874:	b293      	uxth	r3, r2
 800a876:	fb06 e303 	mla	r3, r6, r3, lr
 800a87a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a87e:	0c1a      	lsrs	r2, r3, #16
 800a880:	b29b      	uxth	r3, r3
 800a882:	ebaa 0303 	sub.w	r3, sl, r3
 800a886:	f8dc a000 	ldr.w	sl, [ip]
 800a88a:	fa13 f38a 	uxtah	r3, r3, sl
 800a88e:	fb06 220e 	mla	r2, r6, lr, r2
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a89a:	b292      	uxth	r2, r2
 800a89c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a8a8:	4581      	cmp	r9, r0
 800a8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8ae:	f84c 3b04 	str.w	r3, [ip], #4
 800a8b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8b6:	d2db      	bcs.n	800a870 <quorem+0x42>
 800a8b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8bc:	b92b      	cbnz	r3, 800a8ca <quorem+0x9c>
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	3b04      	subs	r3, #4
 800a8c2:	429d      	cmp	r5, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	d32c      	bcc.n	800a922 <quorem+0xf4>
 800a8c8:	613c      	str	r4, [r7, #16]
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	f001 f9a6 	bl	800bc1c <__mcmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	db22      	blt.n	800a91a <quorem+0xec>
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8de:	f8d1 c000 	ldr.w	ip, [r1]
 800a8e2:	b293      	uxth	r3, r2
 800a8e4:	1ac3      	subs	r3, r0, r3
 800a8e6:	0c12      	lsrs	r2, r2, #16
 800a8e8:	fa13 f38c 	uxtah	r3, r3, ip
 800a8ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a8f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8fa:	45c1      	cmp	r9, r8
 800a8fc:	f841 3b04 	str.w	r3, [r1], #4
 800a900:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a904:	d2e9      	bcs.n	800a8da <quorem+0xac>
 800a906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a90e:	b922      	cbnz	r2, 800a91a <quorem+0xec>
 800a910:	3b04      	subs	r3, #4
 800a912:	429d      	cmp	r5, r3
 800a914:	461a      	mov	r2, r3
 800a916:	d30a      	bcc.n	800a92e <quorem+0x100>
 800a918:	613c      	str	r4, [r7, #16]
 800a91a:	4630      	mov	r0, r6
 800a91c:	b003      	add	sp, #12
 800a91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	3b04      	subs	r3, #4
 800a926:	2a00      	cmp	r2, #0
 800a928:	d1ce      	bne.n	800a8c8 <quorem+0x9a>
 800a92a:	3c01      	subs	r4, #1
 800a92c:	e7c9      	b.n	800a8c2 <quorem+0x94>
 800a92e:	6812      	ldr	r2, [r2, #0]
 800a930:	3b04      	subs	r3, #4
 800a932:	2a00      	cmp	r2, #0
 800a934:	d1f0      	bne.n	800a918 <quorem+0xea>
 800a936:	3c01      	subs	r4, #1
 800a938:	e7eb      	b.n	800a912 <quorem+0xe4>
 800a93a:	2000      	movs	r0, #0
 800a93c:	e7ee      	b.n	800a91c <quorem+0xee>
	...

0800a940 <_dtoa_r>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b04 	vpush	{d8-d9}
 800a948:	69c5      	ldr	r5, [r0, #28]
 800a94a:	b093      	sub	sp, #76	; 0x4c
 800a94c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a950:	ec57 6b10 	vmov	r6, r7, d0
 800a954:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a958:	9107      	str	r1, [sp, #28]
 800a95a:	4604      	mov	r4, r0
 800a95c:	920a      	str	r2, [sp, #40]	; 0x28
 800a95e:	930d      	str	r3, [sp, #52]	; 0x34
 800a960:	b975      	cbnz	r5, 800a980 <_dtoa_r+0x40>
 800a962:	2010      	movs	r0, #16
 800a964:	f000 fe2a 	bl	800b5bc <malloc>
 800a968:	4602      	mov	r2, r0
 800a96a:	61e0      	str	r0, [r4, #28]
 800a96c:	b920      	cbnz	r0, 800a978 <_dtoa_r+0x38>
 800a96e:	4bae      	ldr	r3, [pc, #696]	; (800ac28 <_dtoa_r+0x2e8>)
 800a970:	21ef      	movs	r1, #239	; 0xef
 800a972:	48ae      	ldr	r0, [pc, #696]	; (800ac2c <_dtoa_r+0x2ec>)
 800a974:	f001 fd1a 	bl	800c3ac <__assert_func>
 800a978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a97c:	6005      	str	r5, [r0, #0]
 800a97e:	60c5      	str	r5, [r0, #12]
 800a980:	69e3      	ldr	r3, [r4, #28]
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	b151      	cbz	r1, 800a99c <_dtoa_r+0x5c>
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	604a      	str	r2, [r1, #4]
 800a98a:	2301      	movs	r3, #1
 800a98c:	4093      	lsls	r3, r2
 800a98e:	608b      	str	r3, [r1, #8]
 800a990:	4620      	mov	r0, r4
 800a992:	f000 ff07 	bl	800b7a4 <_Bfree>
 800a996:	69e3      	ldr	r3, [r4, #28]
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	1e3b      	subs	r3, r7, #0
 800a99e:	bfbb      	ittet	lt
 800a9a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9a4:	9303      	strlt	r3, [sp, #12]
 800a9a6:	2300      	movge	r3, #0
 800a9a8:	2201      	movlt	r2, #1
 800a9aa:	bfac      	ite	ge
 800a9ac:	f8c8 3000 	strge.w	r3, [r8]
 800a9b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a9b4:	4b9e      	ldr	r3, [pc, #632]	; (800ac30 <_dtoa_r+0x2f0>)
 800a9b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a9ba:	ea33 0308 	bics.w	r3, r3, r8
 800a9be:	d11b      	bne.n	800a9f8 <_dtoa_r+0xb8>
 800a9c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a9cc:	4333      	orrs	r3, r6
 800a9ce:	f000 8593 	beq.w	800b4f8 <_dtoa_r+0xbb8>
 800a9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9d4:	b963      	cbnz	r3, 800a9f0 <_dtoa_r+0xb0>
 800a9d6:	4b97      	ldr	r3, [pc, #604]	; (800ac34 <_dtoa_r+0x2f4>)
 800a9d8:	e027      	b.n	800aa2a <_dtoa_r+0xea>
 800a9da:	4b97      	ldr	r3, [pc, #604]	; (800ac38 <_dtoa_r+0x2f8>)
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	9800      	ldr	r0, [sp, #0]
 800a9e6:	b013      	add	sp, #76	; 0x4c
 800a9e8:	ecbd 8b04 	vpop	{d8-d9}
 800a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f0:	4b90      	ldr	r3, [pc, #576]	; (800ac34 <_dtoa_r+0x2f4>)
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	3303      	adds	r3, #3
 800a9f6:	e7f3      	b.n	800a9e0 <_dtoa_r+0xa0>
 800a9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	ec51 0b17 	vmov	r0, r1, d7
 800aa02:	eeb0 8a47 	vmov.f32	s16, s14
 800aa06:	eef0 8a67 	vmov.f32	s17, s15
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f7f6 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa10:	4681      	mov	r9, r0
 800aa12:	b160      	cbz	r0, 800aa2e <_dtoa_r+0xee>
 800aa14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa16:	2301      	movs	r3, #1
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8568 	beq.w	800b4f2 <_dtoa_r+0xbb2>
 800aa22:	4b86      	ldr	r3, [pc, #536]	; (800ac3c <_dtoa_r+0x2fc>)
 800aa24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	e7da      	b.n	800a9e4 <_dtoa_r+0xa4>
 800aa2e:	aa10      	add	r2, sp, #64	; 0x40
 800aa30:	a911      	add	r1, sp, #68	; 0x44
 800aa32:	4620      	mov	r0, r4
 800aa34:	eeb0 0a48 	vmov.f32	s0, s16
 800aa38:	eef0 0a68 	vmov.f32	s1, s17
 800aa3c:	f001 f994 	bl	800bd68 <__d2b>
 800aa40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aa44:	4682      	mov	sl, r0
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	d07f      	beq.n	800ab4a <_dtoa_r+0x20a>
 800aa4a:	ee18 3a90 	vmov	r3, s17
 800aa4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa56:	ec51 0b18 	vmov	r0, r1, d8
 800aa5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa66:	4619      	mov	r1, r3
 800aa68:	2200      	movs	r2, #0
 800aa6a:	4b75      	ldr	r3, [pc, #468]	; (800ac40 <_dtoa_r+0x300>)
 800aa6c:	f7f5 fc0c 	bl	8000288 <__aeabi_dsub>
 800aa70:	a367      	add	r3, pc, #412	; (adr r3, 800ac10 <_dtoa_r+0x2d0>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	f7f5 fdbf 	bl	80005f8 <__aeabi_dmul>
 800aa7a:	a367      	add	r3, pc, #412	; (adr r3, 800ac18 <_dtoa_r+0x2d8>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fc04 	bl	800028c <__adddf3>
 800aa84:	4606      	mov	r6, r0
 800aa86:	4628      	mov	r0, r5
 800aa88:	460f      	mov	r7, r1
 800aa8a:	f7f5 fd4b 	bl	8000524 <__aeabi_i2d>
 800aa8e:	a364      	add	r3, pc, #400	; (adr r3, 800ac20 <_dtoa_r+0x2e0>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fdb0 	bl	80005f8 <__aeabi_dmul>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	f7f5 fbf4 	bl	800028c <__adddf3>
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	460f      	mov	r7, r1
 800aaa8:	f7f6 f856 	bl	8000b58 <__aeabi_d2iz>
 800aaac:	2200      	movs	r2, #0
 800aaae:	4683      	mov	fp, r0
 800aab0:	2300      	movs	r3, #0
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f6 f811 	bl	8000adc <__aeabi_dcmplt>
 800aaba:	b148      	cbz	r0, 800aad0 <_dtoa_r+0x190>
 800aabc:	4658      	mov	r0, fp
 800aabe:	f7f5 fd31 	bl	8000524 <__aeabi_i2d>
 800aac2:	4632      	mov	r2, r6
 800aac4:	463b      	mov	r3, r7
 800aac6:	f7f5 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaca:	b908      	cbnz	r0, 800aad0 <_dtoa_r+0x190>
 800aacc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aad0:	f1bb 0f16 	cmp.w	fp, #22
 800aad4:	d857      	bhi.n	800ab86 <_dtoa_r+0x246>
 800aad6:	4b5b      	ldr	r3, [pc, #364]	; (800ac44 <_dtoa_r+0x304>)
 800aad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	ec51 0b18 	vmov	r0, r1, d8
 800aae4:	f7f5 fffa 	bl	8000adc <__aeabi_dcmplt>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d04e      	beq.n	800ab8a <_dtoa_r+0x24a>
 800aaec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	930c      	str	r3, [sp, #48]	; 0x30
 800aaf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaf6:	1b5b      	subs	r3, r3, r5
 800aaf8:	1e5a      	subs	r2, r3, #1
 800aafa:	bf45      	ittet	mi
 800aafc:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab00:	9305      	strmi	r3, [sp, #20]
 800ab02:	2300      	movpl	r3, #0
 800ab04:	2300      	movmi	r3, #0
 800ab06:	9206      	str	r2, [sp, #24]
 800ab08:	bf54      	ite	pl
 800ab0a:	9305      	strpl	r3, [sp, #20]
 800ab0c:	9306      	strmi	r3, [sp, #24]
 800ab0e:	f1bb 0f00 	cmp.w	fp, #0
 800ab12:	db3c      	blt.n	800ab8e <_dtoa_r+0x24e>
 800ab14:	9b06      	ldr	r3, [sp, #24]
 800ab16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ab1a:	445b      	add	r3, fp
 800ab1c:	9306      	str	r3, [sp, #24]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9308      	str	r3, [sp, #32]
 800ab22:	9b07      	ldr	r3, [sp, #28]
 800ab24:	2b09      	cmp	r3, #9
 800ab26:	d868      	bhi.n	800abfa <_dtoa_r+0x2ba>
 800ab28:	2b05      	cmp	r3, #5
 800ab2a:	bfc4      	itt	gt
 800ab2c:	3b04      	subgt	r3, #4
 800ab2e:	9307      	strgt	r3, [sp, #28]
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	f1a3 0302 	sub.w	r3, r3, #2
 800ab36:	bfcc      	ite	gt
 800ab38:	2500      	movgt	r5, #0
 800ab3a:	2501      	movle	r5, #1
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	f200 8085 	bhi.w	800ac4c <_dtoa_r+0x30c>
 800ab42:	e8df f003 	tbb	[pc, r3]
 800ab46:	3b2e      	.short	0x3b2e
 800ab48:	5839      	.short	0x5839
 800ab4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab4e:	441d      	add	r5, r3
 800ab50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	bfc1      	itttt	gt
 800ab58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab5c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ab60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ab64:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab68:	bfd6      	itet	le
 800ab6a:	f1c3 0320 	rsble	r3, r3, #32
 800ab6e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ab72:	fa06 f003 	lslle.w	r0, r6, r3
 800ab76:	f7f5 fcc5 	bl	8000504 <__aeabi_ui2d>
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ab80:	3d01      	subs	r5, #1
 800ab82:	920e      	str	r2, [sp, #56]	; 0x38
 800ab84:	e76f      	b.n	800aa66 <_dtoa_r+0x126>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e7b3      	b.n	800aaf2 <_dtoa_r+0x1b2>
 800ab8a:	900c      	str	r0, [sp, #48]	; 0x30
 800ab8c:	e7b2      	b.n	800aaf4 <_dtoa_r+0x1b4>
 800ab8e:	9b05      	ldr	r3, [sp, #20]
 800ab90:	eba3 030b 	sub.w	r3, r3, fp
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	f1cb 0300 	rsb	r3, fp, #0
 800ab9a:	9308      	str	r3, [sp, #32]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba0:	e7bf      	b.n	800ab22 <_dtoa_r+0x1e2>
 800aba2:	2300      	movs	r3, #0
 800aba4:	9309      	str	r3, [sp, #36]	; 0x24
 800aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dc52      	bgt.n	800ac52 <_dtoa_r+0x312>
 800abac:	2301      	movs	r3, #1
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	461a      	mov	r2, r3
 800abb4:	920a      	str	r2, [sp, #40]	; 0x28
 800abb6:	e00b      	b.n	800abd0 <_dtoa_r+0x290>
 800abb8:	2301      	movs	r3, #1
 800abba:	e7f3      	b.n	800aba4 <_dtoa_r+0x264>
 800abbc:	2300      	movs	r3, #0
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
 800abc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc2:	445b      	add	r3, fp
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	3301      	adds	r3, #1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	bfb8      	it	lt
 800abce:	2301      	movlt	r3, #1
 800abd0:	69e0      	ldr	r0, [r4, #28]
 800abd2:	2100      	movs	r1, #0
 800abd4:	2204      	movs	r2, #4
 800abd6:	f102 0614 	add.w	r6, r2, #20
 800abda:	429e      	cmp	r6, r3
 800abdc:	d93d      	bls.n	800ac5a <_dtoa_r+0x31a>
 800abde:	6041      	str	r1, [r0, #4]
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 fd9f 	bl	800b724 <_Balloc>
 800abe6:	9000      	str	r0, [sp, #0]
 800abe8:	2800      	cmp	r0, #0
 800abea:	d139      	bne.n	800ac60 <_dtoa_r+0x320>
 800abec:	4b16      	ldr	r3, [pc, #88]	; (800ac48 <_dtoa_r+0x308>)
 800abee:	4602      	mov	r2, r0
 800abf0:	f240 11af 	movw	r1, #431	; 0x1af
 800abf4:	e6bd      	b.n	800a972 <_dtoa_r+0x32>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e7e1      	b.n	800abbe <_dtoa_r+0x27e>
 800abfa:	2501      	movs	r5, #1
 800abfc:	2300      	movs	r3, #0
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	9509      	str	r5, [sp, #36]	; 0x24
 800ac02:	f04f 33ff 	mov.w	r3, #4294967295
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2312      	movs	r3, #18
 800ac0e:	e7d1      	b.n	800abb4 <_dtoa_r+0x274>
 800ac10:	636f4361 	.word	0x636f4361
 800ac14:	3fd287a7 	.word	0x3fd287a7
 800ac18:	8b60c8b3 	.word	0x8b60c8b3
 800ac1c:	3fc68a28 	.word	0x3fc68a28
 800ac20:	509f79fb 	.word	0x509f79fb
 800ac24:	3fd34413 	.word	0x3fd34413
 800ac28:	0800c884 	.word	0x0800c884
 800ac2c:	0800c89b 	.word	0x0800c89b
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	0800c880 	.word	0x0800c880
 800ac38:	0800c877 	.word	0x0800c877
 800ac3c:	0800c854 	.word	0x0800c854
 800ac40:	3ff80000 	.word	0x3ff80000
 800ac44:	0800c988 	.word	0x0800c988
 800ac48:	0800c8f3 	.word	0x0800c8f3
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac50:	e7d7      	b.n	800ac02 <_dtoa_r+0x2c2>
 800ac52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	e7ba      	b.n	800abd0 <_dtoa_r+0x290>
 800ac5a:	3101      	adds	r1, #1
 800ac5c:	0052      	lsls	r2, r2, #1
 800ac5e:	e7ba      	b.n	800abd6 <_dtoa_r+0x296>
 800ac60:	69e3      	ldr	r3, [r4, #28]
 800ac62:	9a00      	ldr	r2, [sp, #0]
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	2b0e      	cmp	r3, #14
 800ac6a:	f200 80a8 	bhi.w	800adbe <_dtoa_r+0x47e>
 800ac6e:	2d00      	cmp	r5, #0
 800ac70:	f000 80a5 	beq.w	800adbe <_dtoa_r+0x47e>
 800ac74:	f1bb 0f00 	cmp.w	fp, #0
 800ac78:	dd38      	ble.n	800acec <_dtoa_r+0x3ac>
 800ac7a:	4bc0      	ldr	r3, [pc, #768]	; (800af7c <_dtoa_r+0x63c>)
 800ac7c:	f00b 020f 	and.w	r2, fp, #15
 800ac80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ac88:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ac8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ac90:	d019      	beq.n	800acc6 <_dtoa_r+0x386>
 800ac92:	4bbb      	ldr	r3, [pc, #748]	; (800af80 <_dtoa_r+0x640>)
 800ac94:	ec51 0b18 	vmov	r0, r1, d8
 800ac98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac9c:	f7f5 fdd6 	bl	800084c <__aeabi_ddiv>
 800aca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca4:	f008 080f 	and.w	r8, r8, #15
 800aca8:	2503      	movs	r5, #3
 800acaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800af80 <_dtoa_r+0x640>
 800acae:	f1b8 0f00 	cmp.w	r8, #0
 800acb2:	d10a      	bne.n	800acca <_dtoa_r+0x38a>
 800acb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb8:	4632      	mov	r2, r6
 800acba:	463b      	mov	r3, r7
 800acbc:	f7f5 fdc6 	bl	800084c <__aeabi_ddiv>
 800acc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc4:	e02b      	b.n	800ad1e <_dtoa_r+0x3de>
 800acc6:	2502      	movs	r5, #2
 800acc8:	e7ef      	b.n	800acaa <_dtoa_r+0x36a>
 800acca:	f018 0f01 	tst.w	r8, #1
 800acce:	d008      	beq.n	800ace2 <_dtoa_r+0x3a2>
 800acd0:	4630      	mov	r0, r6
 800acd2:	4639      	mov	r1, r7
 800acd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800acd8:	f7f5 fc8e 	bl	80005f8 <__aeabi_dmul>
 800acdc:	3501      	adds	r5, #1
 800acde:	4606      	mov	r6, r0
 800ace0:	460f      	mov	r7, r1
 800ace2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ace6:	f109 0908 	add.w	r9, r9, #8
 800acea:	e7e0      	b.n	800acae <_dtoa_r+0x36e>
 800acec:	f000 809f 	beq.w	800ae2e <_dtoa_r+0x4ee>
 800acf0:	f1cb 0600 	rsb	r6, fp, #0
 800acf4:	4ba1      	ldr	r3, [pc, #644]	; (800af7c <_dtoa_r+0x63c>)
 800acf6:	4fa2      	ldr	r7, [pc, #648]	; (800af80 <_dtoa_r+0x640>)
 800acf8:	f006 020f 	and.w	r2, r6, #15
 800acfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	ec51 0b18 	vmov	r0, r1, d8
 800ad08:	f7f5 fc76 	bl	80005f8 <__aeabi_dmul>
 800ad0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad10:	1136      	asrs	r6, r6, #4
 800ad12:	2300      	movs	r3, #0
 800ad14:	2502      	movs	r5, #2
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	d17e      	bne.n	800ae18 <_dtoa_r+0x4d8>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1d0      	bne.n	800acc0 <_dtoa_r+0x380>
 800ad1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8084 	beq.w	800ae32 <_dtoa_r+0x4f2>
 800ad2a:	4b96      	ldr	r3, [pc, #600]	; (800af84 <_dtoa_r+0x644>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 fed3 	bl	8000adc <__aeabi_dcmplt>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d07b      	beq.n	800ae32 <_dtoa_r+0x4f2>
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d078      	beq.n	800ae32 <_dtoa_r+0x4f2>
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dd39      	ble.n	800adba <_dtoa_r+0x47a>
 800ad46:	4b90      	ldr	r3, [pc, #576]	; (800af88 <_dtoa_r+0x648>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	f7f5 fc53 	bl	80005f8 <__aeabi_dmul>
 800ad52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad56:	9e01      	ldr	r6, [sp, #4]
 800ad58:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad62:	4628      	mov	r0, r5
 800ad64:	f7f5 fbde 	bl	8000524 <__aeabi_i2d>
 800ad68:	4642      	mov	r2, r8
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	4b86      	ldr	r3, [pc, #536]	; (800af8c <_dtoa_r+0x64c>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	f7f5 fa8a 	bl	800028c <__adddf3>
 800ad78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	d158      	bne.n	800ae38 <_dtoa_r+0x4f8>
 800ad86:	4b82      	ldr	r3, [pc, #520]	; (800af90 <_dtoa_r+0x650>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	f7f5 fa7b 	bl	8000288 <__aeabi_dsub>
 800ad92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad96:	4680      	mov	r8, r0
 800ad98:	4689      	mov	r9, r1
 800ad9a:	f7f5 febd 	bl	8000b18 <__aeabi_dcmpgt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f040 8296 	bne.w	800b2d0 <_dtoa_r+0x990>
 800ada4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ada8:	4640      	mov	r0, r8
 800adaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adae:	4649      	mov	r1, r9
 800adb0:	f7f5 fe94 	bl	8000adc <__aeabi_dcmplt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 8289 	bne.w	800b2cc <_dtoa_r+0x98c>
 800adba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800adbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f2c0 814e 	blt.w	800b062 <_dtoa_r+0x722>
 800adc6:	f1bb 0f0e 	cmp.w	fp, #14
 800adca:	f300 814a 	bgt.w	800b062 <_dtoa_r+0x722>
 800adce:	4b6b      	ldr	r3, [pc, #428]	; (800af7c <_dtoa_r+0x63c>)
 800add0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800add4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800add8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adda:	2b00      	cmp	r3, #0
 800addc:	f280 80dc 	bge.w	800af98 <_dtoa_r+0x658>
 800ade0:	9b04      	ldr	r3, [sp, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f300 80d8 	bgt.w	800af98 <_dtoa_r+0x658>
 800ade8:	f040 826f 	bne.w	800b2ca <_dtoa_r+0x98a>
 800adec:	4b68      	ldr	r3, [pc, #416]	; (800af90 <_dtoa_r+0x650>)
 800adee:	2200      	movs	r2, #0
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 fc00 	bl	80005f8 <__aeabi_dmul>
 800adf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adfc:	f7f5 fe82 	bl	8000b04 <__aeabi_dcmpge>
 800ae00:	9e04      	ldr	r6, [sp, #16]
 800ae02:	4637      	mov	r7, r6
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f040 8245 	bne.w	800b294 <_dtoa_r+0x954>
 800ae0a:	9d00      	ldr	r5, [sp, #0]
 800ae0c:	2331      	movs	r3, #49	; 0x31
 800ae0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ae12:	f10b 0b01 	add.w	fp, fp, #1
 800ae16:	e241      	b.n	800b29c <_dtoa_r+0x95c>
 800ae18:	07f2      	lsls	r2, r6, #31
 800ae1a:	d505      	bpl.n	800ae28 <_dtoa_r+0x4e8>
 800ae1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae20:	f7f5 fbea 	bl	80005f8 <__aeabi_dmul>
 800ae24:	3501      	adds	r5, #1
 800ae26:	2301      	movs	r3, #1
 800ae28:	1076      	asrs	r6, r6, #1
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	e773      	b.n	800ad16 <_dtoa_r+0x3d6>
 800ae2e:	2502      	movs	r5, #2
 800ae30:	e775      	b.n	800ad1e <_dtoa_r+0x3de>
 800ae32:	9e04      	ldr	r6, [sp, #16]
 800ae34:	465f      	mov	r7, fp
 800ae36:	e792      	b.n	800ad5e <_dtoa_r+0x41e>
 800ae38:	9900      	ldr	r1, [sp, #0]
 800ae3a:	4b50      	ldr	r3, [pc, #320]	; (800af7c <_dtoa_r+0x63c>)
 800ae3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae40:	4431      	add	r1, r6
 800ae42:	9102      	str	r1, [sp, #8]
 800ae44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae46:	eeb0 9a47 	vmov.f32	s18, s14
 800ae4a:	eef0 9a67 	vmov.f32	s19, s15
 800ae4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d044      	beq.n	800aee4 <_dtoa_r+0x5a4>
 800ae5a:	494e      	ldr	r1, [pc, #312]	; (800af94 <_dtoa_r+0x654>)
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f5 fcf5 	bl	800084c <__aeabi_ddiv>
 800ae62:	ec53 2b19 	vmov	r2, r3, d9
 800ae66:	f7f5 fa0f 	bl	8000288 <__aeabi_dsub>
 800ae6a:	9d00      	ldr	r5, [sp, #0]
 800ae6c:	ec41 0b19 	vmov	d9, r0, r1
 800ae70:	4649      	mov	r1, r9
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7f5 fe70 	bl	8000b58 <__aeabi_d2iz>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	f7f5 fb53 	bl	8000524 <__aeabi_i2d>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 f9ff 	bl	8000288 <__aeabi_dsub>
 800ae8a:	3630      	adds	r6, #48	; 0x30
 800ae8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae90:	ec53 2b19 	vmov	r2, r3, d9
 800ae94:	4680      	mov	r8, r0
 800ae96:	4689      	mov	r9, r1
 800ae98:	f7f5 fe20 	bl	8000adc <__aeabi_dcmplt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d164      	bne.n	800af6a <_dtoa_r+0x62a>
 800aea0:	4642      	mov	r2, r8
 800aea2:	464b      	mov	r3, r9
 800aea4:	4937      	ldr	r1, [pc, #220]	; (800af84 <_dtoa_r+0x644>)
 800aea6:	2000      	movs	r0, #0
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	ec53 2b19 	vmov	r2, r3, d9
 800aeb0:	f7f5 fe14 	bl	8000adc <__aeabi_dcmplt>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f040 80b6 	bne.w	800b026 <_dtoa_r+0x6e6>
 800aeba:	9b02      	ldr	r3, [sp, #8]
 800aebc:	429d      	cmp	r5, r3
 800aebe:	f43f af7c 	beq.w	800adba <_dtoa_r+0x47a>
 800aec2:	4b31      	ldr	r3, [pc, #196]	; (800af88 <_dtoa_r+0x648>)
 800aec4:	ec51 0b19 	vmov	r0, r1, d9
 800aec8:	2200      	movs	r2, #0
 800aeca:	f7f5 fb95 	bl	80005f8 <__aeabi_dmul>
 800aece:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <_dtoa_r+0x648>)
 800aed0:	ec41 0b19 	vmov	d9, r0, r1
 800aed4:	2200      	movs	r2, #0
 800aed6:	4640      	mov	r0, r8
 800aed8:	4649      	mov	r1, r9
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	4680      	mov	r8, r0
 800aee0:	4689      	mov	r9, r1
 800aee2:	e7c5      	b.n	800ae70 <_dtoa_r+0x530>
 800aee4:	ec51 0b17 	vmov	r0, r1, d7
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	9b02      	ldr	r3, [sp, #8]
 800aeee:	9d00      	ldr	r5, [sp, #0]
 800aef0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aef2:	ec41 0b19 	vmov	d9, r0, r1
 800aef6:	4649      	mov	r1, r9
 800aef8:	4640      	mov	r0, r8
 800aefa:	f7f5 fe2d 	bl	8000b58 <__aeabi_d2iz>
 800aefe:	4606      	mov	r6, r0
 800af00:	f7f5 fb10 	bl	8000524 <__aeabi_i2d>
 800af04:	3630      	adds	r6, #48	; 0x30
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	f7f5 f9bb 	bl	8000288 <__aeabi_dsub>
 800af12:	f805 6b01 	strb.w	r6, [r5], #1
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	429d      	cmp	r5, r3
 800af1a:	4680      	mov	r8, r0
 800af1c:	4689      	mov	r9, r1
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	d124      	bne.n	800af6e <_dtoa_r+0x62e>
 800af24:	4b1b      	ldr	r3, [pc, #108]	; (800af94 <_dtoa_r+0x654>)
 800af26:	ec51 0b19 	vmov	r0, r1, d9
 800af2a:	f7f5 f9af 	bl	800028c <__adddf3>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f7f5 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d173      	bne.n	800b026 <_dtoa_r+0x6e6>
 800af3e:	ec53 2b19 	vmov	r2, r3, d9
 800af42:	4914      	ldr	r1, [pc, #80]	; (800af94 <_dtoa_r+0x654>)
 800af44:	2000      	movs	r0, #0
 800af46:	f7f5 f99f 	bl	8000288 <__aeabi_dsub>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7f5 fdc3 	bl	8000adc <__aeabi_dcmplt>
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f af2f 	beq.w	800adba <_dtoa_r+0x47a>
 800af5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af5e:	1e6b      	subs	r3, r5, #1
 800af60:	930f      	str	r3, [sp, #60]	; 0x3c
 800af62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af66:	2b30      	cmp	r3, #48	; 0x30
 800af68:	d0f8      	beq.n	800af5c <_dtoa_r+0x61c>
 800af6a:	46bb      	mov	fp, r7
 800af6c:	e04a      	b.n	800b004 <_dtoa_r+0x6c4>
 800af6e:	4b06      	ldr	r3, [pc, #24]	; (800af88 <_dtoa_r+0x648>)
 800af70:	f7f5 fb42 	bl	80005f8 <__aeabi_dmul>
 800af74:	4680      	mov	r8, r0
 800af76:	4689      	mov	r9, r1
 800af78:	e7bd      	b.n	800aef6 <_dtoa_r+0x5b6>
 800af7a:	bf00      	nop
 800af7c:	0800c988 	.word	0x0800c988
 800af80:	0800c960 	.word	0x0800c960
 800af84:	3ff00000 	.word	0x3ff00000
 800af88:	40240000 	.word	0x40240000
 800af8c:	401c0000 	.word	0x401c0000
 800af90:	40140000 	.word	0x40140000
 800af94:	3fe00000 	.word	0x3fe00000
 800af98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af9c:	9d00      	ldr	r5, [sp, #0]
 800af9e:	4642      	mov	r2, r8
 800afa0:	464b      	mov	r3, r9
 800afa2:	4630      	mov	r0, r6
 800afa4:	4639      	mov	r1, r7
 800afa6:	f7f5 fc51 	bl	800084c <__aeabi_ddiv>
 800afaa:	f7f5 fdd5 	bl	8000b58 <__aeabi_d2iz>
 800afae:	9001      	str	r0, [sp, #4]
 800afb0:	f7f5 fab8 	bl	8000524 <__aeabi_i2d>
 800afb4:	4642      	mov	r2, r8
 800afb6:	464b      	mov	r3, r9
 800afb8:	f7f5 fb1e 	bl	80005f8 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7f5 f960 	bl	8000288 <__aeabi_dsub>
 800afc8:	9e01      	ldr	r6, [sp, #4]
 800afca:	9f04      	ldr	r7, [sp, #16]
 800afcc:	3630      	adds	r6, #48	; 0x30
 800afce:	f805 6b01 	strb.w	r6, [r5], #1
 800afd2:	9e00      	ldr	r6, [sp, #0]
 800afd4:	1bae      	subs	r6, r5, r6
 800afd6:	42b7      	cmp	r7, r6
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	d134      	bne.n	800b048 <_dtoa_r+0x708>
 800afde:	f7f5 f955 	bl	800028c <__adddf3>
 800afe2:	4642      	mov	r2, r8
 800afe4:	464b      	mov	r3, r9
 800afe6:	4606      	mov	r6, r0
 800afe8:	460f      	mov	r7, r1
 800afea:	f7f5 fd95 	bl	8000b18 <__aeabi_dcmpgt>
 800afee:	b9c8      	cbnz	r0, 800b024 <_dtoa_r+0x6e4>
 800aff0:	4642      	mov	r2, r8
 800aff2:	464b      	mov	r3, r9
 800aff4:	4630      	mov	r0, r6
 800aff6:	4639      	mov	r1, r7
 800aff8:	f7f5 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 800affc:	b110      	cbz	r0, 800b004 <_dtoa_r+0x6c4>
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	07db      	lsls	r3, r3, #31
 800b002:	d40f      	bmi.n	800b024 <_dtoa_r+0x6e4>
 800b004:	4651      	mov	r1, sl
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fbcc 	bl	800b7a4 <_Bfree>
 800b00c:	2300      	movs	r3, #0
 800b00e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b010:	702b      	strb	r3, [r5, #0]
 800b012:	f10b 0301 	add.w	r3, fp, #1
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f43f ace2 	beq.w	800a9e4 <_dtoa_r+0xa4>
 800b020:	601d      	str	r5, [r3, #0]
 800b022:	e4df      	b.n	800a9e4 <_dtoa_r+0xa4>
 800b024:	465f      	mov	r7, fp
 800b026:	462b      	mov	r3, r5
 800b028:	461d      	mov	r5, r3
 800b02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b02e:	2a39      	cmp	r2, #57	; 0x39
 800b030:	d106      	bne.n	800b040 <_dtoa_r+0x700>
 800b032:	9a00      	ldr	r2, [sp, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d1f7      	bne.n	800b028 <_dtoa_r+0x6e8>
 800b038:	9900      	ldr	r1, [sp, #0]
 800b03a:	2230      	movs	r2, #48	; 0x30
 800b03c:	3701      	adds	r7, #1
 800b03e:	700a      	strb	r2, [r1, #0]
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	3201      	adds	r2, #1
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	e790      	b.n	800af6a <_dtoa_r+0x62a>
 800b048:	4ba3      	ldr	r3, [pc, #652]	; (800b2d8 <_dtoa_r+0x998>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	2200      	movs	r2, #0
 800b052:	2300      	movs	r3, #0
 800b054:	4606      	mov	r6, r0
 800b056:	460f      	mov	r7, r1
 800b058:	f7f5 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d09e      	beq.n	800af9e <_dtoa_r+0x65e>
 800b060:	e7d0      	b.n	800b004 <_dtoa_r+0x6c4>
 800b062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b064:	2a00      	cmp	r2, #0
 800b066:	f000 80ca 	beq.w	800b1fe <_dtoa_r+0x8be>
 800b06a:	9a07      	ldr	r2, [sp, #28]
 800b06c:	2a01      	cmp	r2, #1
 800b06e:	f300 80ad 	bgt.w	800b1cc <_dtoa_r+0x88c>
 800b072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b074:	2a00      	cmp	r2, #0
 800b076:	f000 80a5 	beq.w	800b1c4 <_dtoa_r+0x884>
 800b07a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b07e:	9e08      	ldr	r6, [sp, #32]
 800b080:	9d05      	ldr	r5, [sp, #20]
 800b082:	9a05      	ldr	r2, [sp, #20]
 800b084:	441a      	add	r2, r3
 800b086:	9205      	str	r2, [sp, #20]
 800b088:	9a06      	ldr	r2, [sp, #24]
 800b08a:	2101      	movs	r1, #1
 800b08c:	441a      	add	r2, r3
 800b08e:	4620      	mov	r0, r4
 800b090:	9206      	str	r2, [sp, #24]
 800b092:	f000 fc3d 	bl	800b910 <__i2b>
 800b096:	4607      	mov	r7, r0
 800b098:	b165      	cbz	r5, 800b0b4 <_dtoa_r+0x774>
 800b09a:	9b06      	ldr	r3, [sp, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd09      	ble.n	800b0b4 <_dtoa_r+0x774>
 800b0a0:	42ab      	cmp	r3, r5
 800b0a2:	9a05      	ldr	r2, [sp, #20]
 800b0a4:	bfa8      	it	ge
 800b0a6:	462b      	movge	r3, r5
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	9205      	str	r2, [sp, #20]
 800b0ac:	9a06      	ldr	r2, [sp, #24]
 800b0ae:	1aed      	subs	r5, r5, r3
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	9306      	str	r3, [sp, #24]
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	b1f3      	cbz	r3, 800b0f6 <_dtoa_r+0x7b6>
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80a3 	beq.w	800b206 <_dtoa_r+0x8c6>
 800b0c0:	2e00      	cmp	r6, #0
 800b0c2:	dd10      	ble.n	800b0e6 <_dtoa_r+0x7a6>
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fce1 	bl	800ba90 <__pow5mult>
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 fc31 	bl	800b93c <__multiply>
 800b0da:	4651      	mov	r1, sl
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 fb60 	bl	800b7a4 <_Bfree>
 800b0e4:	46c2      	mov	sl, r8
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	1b9a      	subs	r2, r3, r6
 800b0ea:	d004      	beq.n	800b0f6 <_dtoa_r+0x7b6>
 800b0ec:	4651      	mov	r1, sl
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fcce 	bl	800ba90 <__pow5mult>
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 fc09 	bl	800b910 <__i2b>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b100:	2b00      	cmp	r3, #0
 800b102:	4606      	mov	r6, r0
 800b104:	f340 8081 	ble.w	800b20a <_dtoa_r+0x8ca>
 800b108:	461a      	mov	r2, r3
 800b10a:	4601      	mov	r1, r0
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 fcbf 	bl	800ba90 <__pow5mult>
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	2b01      	cmp	r3, #1
 800b116:	4606      	mov	r6, r0
 800b118:	dd7a      	ble.n	800b210 <_dtoa_r+0x8d0>
 800b11a:	f04f 0800 	mov.w	r8, #0
 800b11e:	6933      	ldr	r3, [r6, #16]
 800b120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b124:	6918      	ldr	r0, [r3, #16]
 800b126:	f000 fba5 	bl	800b874 <__hi0bits>
 800b12a:	f1c0 0020 	rsb	r0, r0, #32
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	4418      	add	r0, r3
 800b132:	f010 001f 	ands.w	r0, r0, #31
 800b136:	f000 8094 	beq.w	800b262 <_dtoa_r+0x922>
 800b13a:	f1c0 0320 	rsb	r3, r0, #32
 800b13e:	2b04      	cmp	r3, #4
 800b140:	f340 8085 	ble.w	800b24e <_dtoa_r+0x90e>
 800b144:	9b05      	ldr	r3, [sp, #20]
 800b146:	f1c0 001c 	rsb	r0, r0, #28
 800b14a:	4403      	add	r3, r0
 800b14c:	9305      	str	r3, [sp, #20]
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	4403      	add	r3, r0
 800b152:	4405      	add	r5, r0
 800b154:	9306      	str	r3, [sp, #24]
 800b156:	9b05      	ldr	r3, [sp, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dd05      	ble.n	800b168 <_dtoa_r+0x828>
 800b15c:	4651      	mov	r1, sl
 800b15e:	461a      	mov	r2, r3
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fcef 	bl	800bb44 <__lshift>
 800b166:	4682      	mov	sl, r0
 800b168:	9b06      	ldr	r3, [sp, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dd05      	ble.n	800b17a <_dtoa_r+0x83a>
 800b16e:	4631      	mov	r1, r6
 800b170:	461a      	mov	r2, r3
 800b172:	4620      	mov	r0, r4
 800b174:	f000 fce6 	bl	800bb44 <__lshift>
 800b178:	4606      	mov	r6, r0
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d072      	beq.n	800b266 <_dtoa_r+0x926>
 800b180:	4631      	mov	r1, r6
 800b182:	4650      	mov	r0, sl
 800b184:	f000 fd4a 	bl	800bc1c <__mcmp>
 800b188:	2800      	cmp	r0, #0
 800b18a:	da6c      	bge.n	800b266 <_dtoa_r+0x926>
 800b18c:	2300      	movs	r3, #0
 800b18e:	4651      	mov	r1, sl
 800b190:	220a      	movs	r2, #10
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fb28 	bl	800b7e8 <__multadd>
 800b198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b19e:	4682      	mov	sl, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 81b0 	beq.w	800b506 <_dtoa_r+0xbc6>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	220a      	movs	r2, #10
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fb1b 	bl	800b7e8 <__multadd>
 800b1b2:	9b01      	ldr	r3, [sp, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	f300 8096 	bgt.w	800b2e8 <_dtoa_r+0x9a8>
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	dc59      	bgt.n	800b276 <_dtoa_r+0x936>
 800b1c2:	e091      	b.n	800b2e8 <_dtoa_r+0x9a8>
 800b1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1ca:	e758      	b.n	800b07e <_dtoa_r+0x73e>
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	1e5e      	subs	r6, r3, #1
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	42b3      	cmp	r3, r6
 800b1d4:	bfbf      	itttt	lt
 800b1d6:	9b08      	ldrlt	r3, [sp, #32]
 800b1d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b1da:	9608      	strlt	r6, [sp, #32]
 800b1dc:	1af3      	sublt	r3, r6, r3
 800b1de:	bfb4      	ite	lt
 800b1e0:	18d2      	addlt	r2, r2, r3
 800b1e2:	1b9e      	subge	r6, r3, r6
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	bfbc      	itt	lt
 800b1e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b1ea:	2600      	movlt	r6, #0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	bfb7      	itett	lt
 800b1f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b1f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b1f8:	1a9d      	sublt	r5, r3, r2
 800b1fa:	2300      	movlt	r3, #0
 800b1fc:	e741      	b.n	800b082 <_dtoa_r+0x742>
 800b1fe:	9e08      	ldr	r6, [sp, #32]
 800b200:	9d05      	ldr	r5, [sp, #20]
 800b202:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b204:	e748      	b.n	800b098 <_dtoa_r+0x758>
 800b206:	9a08      	ldr	r2, [sp, #32]
 800b208:	e770      	b.n	800b0ec <_dtoa_r+0x7ac>
 800b20a:	9b07      	ldr	r3, [sp, #28]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	dc19      	bgt.n	800b244 <_dtoa_r+0x904>
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	b9bb      	cbnz	r3, 800b244 <_dtoa_r+0x904>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b21a:	b99b      	cbnz	r3, 800b244 <_dtoa_r+0x904>
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b222:	0d1b      	lsrs	r3, r3, #20
 800b224:	051b      	lsls	r3, r3, #20
 800b226:	b183      	cbz	r3, 800b24a <_dtoa_r+0x90a>
 800b228:	9b05      	ldr	r3, [sp, #20]
 800b22a:	3301      	adds	r3, #1
 800b22c:	9305      	str	r3, [sp, #20]
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	3301      	adds	r3, #1
 800b232:	9306      	str	r3, [sp, #24]
 800b234:	f04f 0801 	mov.w	r8, #1
 800b238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f47f af6f 	bne.w	800b11e <_dtoa_r+0x7de>
 800b240:	2001      	movs	r0, #1
 800b242:	e774      	b.n	800b12e <_dtoa_r+0x7ee>
 800b244:	f04f 0800 	mov.w	r8, #0
 800b248:	e7f6      	b.n	800b238 <_dtoa_r+0x8f8>
 800b24a:	4698      	mov	r8, r3
 800b24c:	e7f4      	b.n	800b238 <_dtoa_r+0x8f8>
 800b24e:	d082      	beq.n	800b156 <_dtoa_r+0x816>
 800b250:	9a05      	ldr	r2, [sp, #20]
 800b252:	331c      	adds	r3, #28
 800b254:	441a      	add	r2, r3
 800b256:	9205      	str	r2, [sp, #20]
 800b258:	9a06      	ldr	r2, [sp, #24]
 800b25a:	441a      	add	r2, r3
 800b25c:	441d      	add	r5, r3
 800b25e:	9206      	str	r2, [sp, #24]
 800b260:	e779      	b.n	800b156 <_dtoa_r+0x816>
 800b262:	4603      	mov	r3, r0
 800b264:	e7f4      	b.n	800b250 <_dtoa_r+0x910>
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dc37      	bgt.n	800b2dc <_dtoa_r+0x99c>
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	dd34      	ble.n	800b2dc <_dtoa_r+0x99c>
 800b272:	9b04      	ldr	r3, [sp, #16]
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	b963      	cbnz	r3, 800b294 <_dtoa_r+0x954>
 800b27a:	4631      	mov	r1, r6
 800b27c:	2205      	movs	r2, #5
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fab2 	bl	800b7e8 <__multadd>
 800b284:	4601      	mov	r1, r0
 800b286:	4606      	mov	r6, r0
 800b288:	4650      	mov	r0, sl
 800b28a:	f000 fcc7 	bl	800bc1c <__mcmp>
 800b28e:	2800      	cmp	r0, #0
 800b290:	f73f adbb 	bgt.w	800ae0a <_dtoa_r+0x4ca>
 800b294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b296:	9d00      	ldr	r5, [sp, #0]
 800b298:	ea6f 0b03 	mvn.w	fp, r3
 800b29c:	f04f 0800 	mov.w	r8, #0
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f000 fa7e 	bl	800b7a4 <_Bfree>
 800b2a8:	2f00      	cmp	r7, #0
 800b2aa:	f43f aeab 	beq.w	800b004 <_dtoa_r+0x6c4>
 800b2ae:	f1b8 0f00 	cmp.w	r8, #0
 800b2b2:	d005      	beq.n	800b2c0 <_dtoa_r+0x980>
 800b2b4:	45b8      	cmp	r8, r7
 800b2b6:	d003      	beq.n	800b2c0 <_dtoa_r+0x980>
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fa72 	bl	800b7a4 <_Bfree>
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fa6e 	bl	800b7a4 <_Bfree>
 800b2c8:	e69c      	b.n	800b004 <_dtoa_r+0x6c4>
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	4637      	mov	r7, r6
 800b2ce:	e7e1      	b.n	800b294 <_dtoa_r+0x954>
 800b2d0:	46bb      	mov	fp, r7
 800b2d2:	4637      	mov	r7, r6
 800b2d4:	e599      	b.n	800ae0a <_dtoa_r+0x4ca>
 800b2d6:	bf00      	nop
 800b2d8:	40240000 	.word	0x40240000
 800b2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 80c8 	beq.w	800b474 <_dtoa_r+0xb34>
 800b2e4:	9b04      	ldr	r3, [sp, #16]
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	2d00      	cmp	r5, #0
 800b2ea:	dd05      	ble.n	800b2f8 <_dtoa_r+0x9b8>
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 fc27 	bl	800bb44 <__lshift>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	f1b8 0f00 	cmp.w	r8, #0
 800b2fc:	d05b      	beq.n	800b3b6 <_dtoa_r+0xa76>
 800b2fe:	6879      	ldr	r1, [r7, #4]
 800b300:	4620      	mov	r0, r4
 800b302:	f000 fa0f 	bl	800b724 <_Balloc>
 800b306:	4605      	mov	r5, r0
 800b308:	b928      	cbnz	r0, 800b316 <_dtoa_r+0x9d6>
 800b30a:	4b83      	ldr	r3, [pc, #524]	; (800b518 <_dtoa_r+0xbd8>)
 800b30c:	4602      	mov	r2, r0
 800b30e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b312:	f7ff bb2e 	b.w	800a972 <_dtoa_r+0x32>
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	3202      	adds	r2, #2
 800b31a:	0092      	lsls	r2, r2, #2
 800b31c:	f107 010c 	add.w	r1, r7, #12
 800b320:	300c      	adds	r0, #12
 800b322:	f001 f835 	bl	800c390 <memcpy>
 800b326:	2201      	movs	r2, #1
 800b328:	4629      	mov	r1, r5
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 fc0a 	bl	800bb44 <__lshift>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	9304      	str	r3, [sp, #16]
 800b336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b33a:	4413      	add	r3, r2
 800b33c:	9308      	str	r3, [sp, #32]
 800b33e:	9b02      	ldr	r3, [sp, #8]
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	46b8      	mov	r8, r7
 800b346:	9306      	str	r3, [sp, #24]
 800b348:	4607      	mov	r7, r0
 800b34a:	9b04      	ldr	r3, [sp, #16]
 800b34c:	4631      	mov	r1, r6
 800b34e:	3b01      	subs	r3, #1
 800b350:	4650      	mov	r0, sl
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	f7ff fa6b 	bl	800a82e <quorem>
 800b358:	4641      	mov	r1, r8
 800b35a:	9002      	str	r0, [sp, #8]
 800b35c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b360:	4650      	mov	r0, sl
 800b362:	f000 fc5b 	bl	800bc1c <__mcmp>
 800b366:	463a      	mov	r2, r7
 800b368:	9005      	str	r0, [sp, #20]
 800b36a:	4631      	mov	r1, r6
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fc71 	bl	800bc54 <__mdiff>
 800b372:	68c2      	ldr	r2, [r0, #12]
 800b374:	4605      	mov	r5, r0
 800b376:	bb02      	cbnz	r2, 800b3ba <_dtoa_r+0xa7a>
 800b378:	4601      	mov	r1, r0
 800b37a:	4650      	mov	r0, sl
 800b37c:	f000 fc4e 	bl	800bc1c <__mcmp>
 800b380:	4602      	mov	r2, r0
 800b382:	4629      	mov	r1, r5
 800b384:	4620      	mov	r0, r4
 800b386:	9209      	str	r2, [sp, #36]	; 0x24
 800b388:	f000 fa0c 	bl	800b7a4 <_Bfree>
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b390:	9d04      	ldr	r5, [sp, #16]
 800b392:	ea43 0102 	orr.w	r1, r3, r2
 800b396:	9b06      	ldr	r3, [sp, #24]
 800b398:	4319      	orrs	r1, r3
 800b39a:	d110      	bne.n	800b3be <_dtoa_r+0xa7e>
 800b39c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3a0:	d029      	beq.n	800b3f6 <_dtoa_r+0xab6>
 800b3a2:	9b05      	ldr	r3, [sp, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd02      	ble.n	800b3ae <_dtoa_r+0xa6e>
 800b3a8:	9b02      	ldr	r3, [sp, #8]
 800b3aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	f883 9000 	strb.w	r9, [r3]
 800b3b4:	e774      	b.n	800b2a0 <_dtoa_r+0x960>
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	e7ba      	b.n	800b330 <_dtoa_r+0x9f0>
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	e7e1      	b.n	800b382 <_dtoa_r+0xa42>
 800b3be:	9b05      	ldr	r3, [sp, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	db04      	blt.n	800b3ce <_dtoa_r+0xa8e>
 800b3c4:	9907      	ldr	r1, [sp, #28]
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	9906      	ldr	r1, [sp, #24]
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	d120      	bne.n	800b410 <_dtoa_r+0xad0>
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	dded      	ble.n	800b3ae <_dtoa_r+0xa6e>
 800b3d2:	4651      	mov	r1, sl
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 fbb4 	bl	800bb44 <__lshift>
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4682      	mov	sl, r0
 800b3e0:	f000 fc1c 	bl	800bc1c <__mcmp>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	dc03      	bgt.n	800b3f0 <_dtoa_r+0xab0>
 800b3e8:	d1e1      	bne.n	800b3ae <_dtoa_r+0xa6e>
 800b3ea:	f019 0f01 	tst.w	r9, #1
 800b3ee:	d0de      	beq.n	800b3ae <_dtoa_r+0xa6e>
 800b3f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3f4:	d1d8      	bne.n	800b3a8 <_dtoa_r+0xa68>
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	2339      	movs	r3, #57	; 0x39
 800b3fa:	7013      	strb	r3, [r2, #0]
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	461d      	mov	r5, r3
 800b400:	3b01      	subs	r3, #1
 800b402:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b406:	2a39      	cmp	r2, #57	; 0x39
 800b408:	d06c      	beq.n	800b4e4 <_dtoa_r+0xba4>
 800b40a:	3201      	adds	r2, #1
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	e747      	b.n	800b2a0 <_dtoa_r+0x960>
 800b410:	2a00      	cmp	r2, #0
 800b412:	dd07      	ble.n	800b424 <_dtoa_r+0xae4>
 800b414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b418:	d0ed      	beq.n	800b3f6 <_dtoa_r+0xab6>
 800b41a:	9a01      	ldr	r2, [sp, #4]
 800b41c:	f109 0301 	add.w	r3, r9, #1
 800b420:	7013      	strb	r3, [r2, #0]
 800b422:	e73d      	b.n	800b2a0 <_dtoa_r+0x960>
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	9a08      	ldr	r2, [sp, #32]
 800b428:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d043      	beq.n	800b4b8 <_dtoa_r+0xb78>
 800b430:	4651      	mov	r1, sl
 800b432:	2300      	movs	r3, #0
 800b434:	220a      	movs	r2, #10
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f9d6 	bl	800b7e8 <__multadd>
 800b43c:	45b8      	cmp	r8, r7
 800b43e:	4682      	mov	sl, r0
 800b440:	f04f 0300 	mov.w	r3, #0
 800b444:	f04f 020a 	mov.w	r2, #10
 800b448:	4641      	mov	r1, r8
 800b44a:	4620      	mov	r0, r4
 800b44c:	d107      	bne.n	800b45e <_dtoa_r+0xb1e>
 800b44e:	f000 f9cb 	bl	800b7e8 <__multadd>
 800b452:	4680      	mov	r8, r0
 800b454:	4607      	mov	r7, r0
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	3301      	adds	r3, #1
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	e775      	b.n	800b34a <_dtoa_r+0xa0a>
 800b45e:	f000 f9c3 	bl	800b7e8 <__multadd>
 800b462:	4639      	mov	r1, r7
 800b464:	4680      	mov	r8, r0
 800b466:	2300      	movs	r3, #0
 800b468:	220a      	movs	r2, #10
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 f9bc 	bl	800b7e8 <__multadd>
 800b470:	4607      	mov	r7, r0
 800b472:	e7f0      	b.n	800b456 <_dtoa_r+0xb16>
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	9d00      	ldr	r5, [sp, #0]
 800b47a:	4631      	mov	r1, r6
 800b47c:	4650      	mov	r0, sl
 800b47e:	f7ff f9d6 	bl	800a82e <quorem>
 800b482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b486:	9b00      	ldr	r3, [sp, #0]
 800b488:	f805 9b01 	strb.w	r9, [r5], #1
 800b48c:	1aea      	subs	r2, r5, r3
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	4293      	cmp	r3, r2
 800b492:	dd07      	ble.n	800b4a4 <_dtoa_r+0xb64>
 800b494:	4651      	mov	r1, sl
 800b496:	2300      	movs	r3, #0
 800b498:	220a      	movs	r2, #10
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 f9a4 	bl	800b7e8 <__multadd>
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	e7ea      	b.n	800b47a <_dtoa_r+0xb3a>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfc8      	it	gt
 800b4aa:	461d      	movgt	r5, r3
 800b4ac:	9b00      	ldr	r3, [sp, #0]
 800b4ae:	bfd8      	it	le
 800b4b0:	2501      	movle	r5, #1
 800b4b2:	441d      	add	r5, r3
 800b4b4:	f04f 0800 	mov.w	r8, #0
 800b4b8:	4651      	mov	r1, sl
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fb41 	bl	800bb44 <__lshift>
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4682      	mov	sl, r0
 800b4c6:	f000 fba9 	bl	800bc1c <__mcmp>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	dc96      	bgt.n	800b3fc <_dtoa_r+0xabc>
 800b4ce:	d102      	bne.n	800b4d6 <_dtoa_r+0xb96>
 800b4d0:	f019 0f01 	tst.w	r9, #1
 800b4d4:	d192      	bne.n	800b3fc <_dtoa_r+0xabc>
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	461d      	mov	r5, r3
 800b4da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4de:	2a30      	cmp	r2, #48	; 0x30
 800b4e0:	d0fa      	beq.n	800b4d8 <_dtoa_r+0xb98>
 800b4e2:	e6dd      	b.n	800b2a0 <_dtoa_r+0x960>
 800b4e4:	9a00      	ldr	r2, [sp, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d189      	bne.n	800b3fe <_dtoa_r+0xabe>
 800b4ea:	f10b 0b01 	add.w	fp, fp, #1
 800b4ee:	2331      	movs	r3, #49	; 0x31
 800b4f0:	e796      	b.n	800b420 <_dtoa_r+0xae0>
 800b4f2:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <_dtoa_r+0xbdc>)
 800b4f4:	f7ff ba99 	b.w	800aa2a <_dtoa_r+0xea>
 800b4f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f47f aa6d 	bne.w	800a9da <_dtoa_r+0x9a>
 800b500:	4b07      	ldr	r3, [pc, #28]	; (800b520 <_dtoa_r+0xbe0>)
 800b502:	f7ff ba92 	b.w	800aa2a <_dtoa_r+0xea>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dcb5      	bgt.n	800b478 <_dtoa_r+0xb38>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	f73f aeb1 	bgt.w	800b276 <_dtoa_r+0x936>
 800b514:	e7b0      	b.n	800b478 <_dtoa_r+0xb38>
 800b516:	bf00      	nop
 800b518:	0800c8f3 	.word	0x0800c8f3
 800b51c:	0800c853 	.word	0x0800c853
 800b520:	0800c877 	.word	0x0800c877

0800b524 <_free_r>:
 800b524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b526:	2900      	cmp	r1, #0
 800b528:	d044      	beq.n	800b5b4 <_free_r+0x90>
 800b52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b52e:	9001      	str	r0, [sp, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f1a1 0404 	sub.w	r4, r1, #4
 800b536:	bfb8      	it	lt
 800b538:	18e4      	addlt	r4, r4, r3
 800b53a:	f000 f8e7 	bl	800b70c <__malloc_lock>
 800b53e:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <_free_r+0x94>)
 800b540:	9801      	ldr	r0, [sp, #4]
 800b542:	6813      	ldr	r3, [r2, #0]
 800b544:	b933      	cbnz	r3, 800b554 <_free_r+0x30>
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	6014      	str	r4, [r2, #0]
 800b54a:	b003      	add	sp, #12
 800b54c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b550:	f000 b8e2 	b.w	800b718 <__malloc_unlock>
 800b554:	42a3      	cmp	r3, r4
 800b556:	d908      	bls.n	800b56a <_free_r+0x46>
 800b558:	6825      	ldr	r5, [r4, #0]
 800b55a:	1961      	adds	r1, r4, r5
 800b55c:	428b      	cmp	r3, r1
 800b55e:	bf01      	itttt	eq
 800b560:	6819      	ldreq	r1, [r3, #0]
 800b562:	685b      	ldreq	r3, [r3, #4]
 800b564:	1949      	addeq	r1, r1, r5
 800b566:	6021      	streq	r1, [r4, #0]
 800b568:	e7ed      	b.n	800b546 <_free_r+0x22>
 800b56a:	461a      	mov	r2, r3
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	b10b      	cbz	r3, 800b574 <_free_r+0x50>
 800b570:	42a3      	cmp	r3, r4
 800b572:	d9fa      	bls.n	800b56a <_free_r+0x46>
 800b574:	6811      	ldr	r1, [r2, #0]
 800b576:	1855      	adds	r5, r2, r1
 800b578:	42a5      	cmp	r5, r4
 800b57a:	d10b      	bne.n	800b594 <_free_r+0x70>
 800b57c:	6824      	ldr	r4, [r4, #0]
 800b57e:	4421      	add	r1, r4
 800b580:	1854      	adds	r4, r2, r1
 800b582:	42a3      	cmp	r3, r4
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	d1e0      	bne.n	800b54a <_free_r+0x26>
 800b588:	681c      	ldr	r4, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	6053      	str	r3, [r2, #4]
 800b58e:	440c      	add	r4, r1
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	e7da      	b.n	800b54a <_free_r+0x26>
 800b594:	d902      	bls.n	800b59c <_free_r+0x78>
 800b596:	230c      	movs	r3, #12
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	e7d6      	b.n	800b54a <_free_r+0x26>
 800b59c:	6825      	ldr	r5, [r4, #0]
 800b59e:	1961      	adds	r1, r4, r5
 800b5a0:	428b      	cmp	r3, r1
 800b5a2:	bf04      	itt	eq
 800b5a4:	6819      	ldreq	r1, [r3, #0]
 800b5a6:	685b      	ldreq	r3, [r3, #4]
 800b5a8:	6063      	str	r3, [r4, #4]
 800b5aa:	bf04      	itt	eq
 800b5ac:	1949      	addeq	r1, r1, r5
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	6054      	str	r4, [r2, #4]
 800b5b2:	e7ca      	b.n	800b54a <_free_r+0x26>
 800b5b4:	b003      	add	sp, #12
 800b5b6:	bd30      	pop	{r4, r5, pc}
 800b5b8:	2000087c 	.word	0x2000087c

0800b5bc <malloc>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	; (800b5c8 <malloc+0xc>)
 800b5be:	4601      	mov	r1, r0
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f000 b823 	b.w	800b60c <_malloc_r>
 800b5c6:	bf00      	nop
 800b5c8:	20000088 	.word	0x20000088

0800b5cc <sbrk_aligned>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4e0e      	ldr	r6, [pc, #56]	; (800b608 <sbrk_aligned+0x3c>)
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	6831      	ldr	r1, [r6, #0]
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	b911      	cbnz	r1, 800b5de <sbrk_aligned+0x12>
 800b5d8:	f000 feca 	bl	800c370 <_sbrk_r>
 800b5dc:	6030      	str	r0, [r6, #0]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 fec5 	bl	800c370 <_sbrk_r>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d00a      	beq.n	800b600 <sbrk_aligned+0x34>
 800b5ea:	1cc4      	adds	r4, r0, #3
 800b5ec:	f024 0403 	bic.w	r4, r4, #3
 800b5f0:	42a0      	cmp	r0, r4
 800b5f2:	d007      	beq.n	800b604 <sbrk_aligned+0x38>
 800b5f4:	1a21      	subs	r1, r4, r0
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f000 feba 	bl	800c370 <_sbrk_r>
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d101      	bne.n	800b604 <sbrk_aligned+0x38>
 800b600:	f04f 34ff 	mov.w	r4, #4294967295
 800b604:	4620      	mov	r0, r4
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	20000880 	.word	0x20000880

0800b60c <_malloc_r>:
 800b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b610:	1ccd      	adds	r5, r1, #3
 800b612:	f025 0503 	bic.w	r5, r5, #3
 800b616:	3508      	adds	r5, #8
 800b618:	2d0c      	cmp	r5, #12
 800b61a:	bf38      	it	cc
 800b61c:	250c      	movcc	r5, #12
 800b61e:	2d00      	cmp	r5, #0
 800b620:	4607      	mov	r7, r0
 800b622:	db01      	blt.n	800b628 <_malloc_r+0x1c>
 800b624:	42a9      	cmp	r1, r5
 800b626:	d905      	bls.n	800b634 <_malloc_r+0x28>
 800b628:	230c      	movs	r3, #12
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	2600      	movs	r6, #0
 800b62e:	4630      	mov	r0, r6
 800b630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b708 <_malloc_r+0xfc>
 800b638:	f000 f868 	bl	800b70c <__malloc_lock>
 800b63c:	f8d8 3000 	ldr.w	r3, [r8]
 800b640:	461c      	mov	r4, r3
 800b642:	bb5c      	cbnz	r4, 800b69c <_malloc_r+0x90>
 800b644:	4629      	mov	r1, r5
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ffc0 	bl	800b5cc <sbrk_aligned>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	4604      	mov	r4, r0
 800b650:	d155      	bne.n	800b6fe <_malloc_r+0xf2>
 800b652:	f8d8 4000 	ldr.w	r4, [r8]
 800b656:	4626      	mov	r6, r4
 800b658:	2e00      	cmp	r6, #0
 800b65a:	d145      	bne.n	800b6e8 <_malloc_r+0xdc>
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	d048      	beq.n	800b6f2 <_malloc_r+0xe6>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	4631      	mov	r1, r6
 800b664:	4638      	mov	r0, r7
 800b666:	eb04 0903 	add.w	r9, r4, r3
 800b66a:	f000 fe81 	bl	800c370 <_sbrk_r>
 800b66e:	4581      	cmp	r9, r0
 800b670:	d13f      	bne.n	800b6f2 <_malloc_r+0xe6>
 800b672:	6821      	ldr	r1, [r4, #0]
 800b674:	1a6d      	subs	r5, r5, r1
 800b676:	4629      	mov	r1, r5
 800b678:	4638      	mov	r0, r7
 800b67a:	f7ff ffa7 	bl	800b5cc <sbrk_aligned>
 800b67e:	3001      	adds	r0, #1
 800b680:	d037      	beq.n	800b6f2 <_malloc_r+0xe6>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	442b      	add	r3, r5
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	f8d8 3000 	ldr.w	r3, [r8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d038      	beq.n	800b702 <_malloc_r+0xf6>
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	42a2      	cmp	r2, r4
 800b694:	d12b      	bne.n	800b6ee <_malloc_r+0xe2>
 800b696:	2200      	movs	r2, #0
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	e00f      	b.n	800b6bc <_malloc_r+0xb0>
 800b69c:	6822      	ldr	r2, [r4, #0]
 800b69e:	1b52      	subs	r2, r2, r5
 800b6a0:	d41f      	bmi.n	800b6e2 <_malloc_r+0xd6>
 800b6a2:	2a0b      	cmp	r2, #11
 800b6a4:	d917      	bls.n	800b6d6 <_malloc_r+0xca>
 800b6a6:	1961      	adds	r1, r4, r5
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	6025      	str	r5, [r4, #0]
 800b6ac:	bf18      	it	ne
 800b6ae:	6059      	strne	r1, [r3, #4]
 800b6b0:	6863      	ldr	r3, [r4, #4]
 800b6b2:	bf08      	it	eq
 800b6b4:	f8c8 1000 	streq.w	r1, [r8]
 800b6b8:	5162      	str	r2, [r4, r5]
 800b6ba:	604b      	str	r3, [r1, #4]
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f104 060b 	add.w	r6, r4, #11
 800b6c2:	f000 f829 	bl	800b718 <__malloc_unlock>
 800b6c6:	f026 0607 	bic.w	r6, r6, #7
 800b6ca:	1d23      	adds	r3, r4, #4
 800b6cc:	1af2      	subs	r2, r6, r3
 800b6ce:	d0ae      	beq.n	800b62e <_malloc_r+0x22>
 800b6d0:	1b9b      	subs	r3, r3, r6
 800b6d2:	50a3      	str	r3, [r4, r2]
 800b6d4:	e7ab      	b.n	800b62e <_malloc_r+0x22>
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	d1dd      	bne.n	800b698 <_malloc_r+0x8c>
 800b6dc:	f8c8 2000 	str.w	r2, [r8]
 800b6e0:	e7ec      	b.n	800b6bc <_malloc_r+0xb0>
 800b6e2:	4623      	mov	r3, r4
 800b6e4:	6864      	ldr	r4, [r4, #4]
 800b6e6:	e7ac      	b.n	800b642 <_malloc_r+0x36>
 800b6e8:	4634      	mov	r4, r6
 800b6ea:	6876      	ldr	r6, [r6, #4]
 800b6ec:	e7b4      	b.n	800b658 <_malloc_r+0x4c>
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	e7cc      	b.n	800b68c <_malloc_r+0x80>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	603b      	str	r3, [r7, #0]
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f000 f80e 	bl	800b718 <__malloc_unlock>
 800b6fc:	e797      	b.n	800b62e <_malloc_r+0x22>
 800b6fe:	6025      	str	r5, [r4, #0]
 800b700:	e7dc      	b.n	800b6bc <_malloc_r+0xb0>
 800b702:	605b      	str	r3, [r3, #4]
 800b704:	deff      	udf	#255	; 0xff
 800b706:	bf00      	nop
 800b708:	2000087c 	.word	0x2000087c

0800b70c <__malloc_lock>:
 800b70c:	4801      	ldr	r0, [pc, #4]	; (800b714 <__malloc_lock+0x8>)
 800b70e:	f7ff b88c 	b.w	800a82a <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	20000878 	.word	0x20000878

0800b718 <__malloc_unlock>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__malloc_unlock+0x8>)
 800b71a:	f7ff b887 	b.w	800a82c <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	20000878 	.word	0x20000878

0800b724 <_Balloc>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	69c6      	ldr	r6, [r0, #28]
 800b728:	4604      	mov	r4, r0
 800b72a:	460d      	mov	r5, r1
 800b72c:	b976      	cbnz	r6, 800b74c <_Balloc+0x28>
 800b72e:	2010      	movs	r0, #16
 800b730:	f7ff ff44 	bl	800b5bc <malloc>
 800b734:	4602      	mov	r2, r0
 800b736:	61e0      	str	r0, [r4, #28]
 800b738:	b920      	cbnz	r0, 800b744 <_Balloc+0x20>
 800b73a:	4b18      	ldr	r3, [pc, #96]	; (800b79c <_Balloc+0x78>)
 800b73c:	4818      	ldr	r0, [pc, #96]	; (800b7a0 <_Balloc+0x7c>)
 800b73e:	216b      	movs	r1, #107	; 0x6b
 800b740:	f000 fe34 	bl	800c3ac <__assert_func>
 800b744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b748:	6006      	str	r6, [r0, #0]
 800b74a:	60c6      	str	r6, [r0, #12]
 800b74c:	69e6      	ldr	r6, [r4, #28]
 800b74e:	68f3      	ldr	r3, [r6, #12]
 800b750:	b183      	cbz	r3, 800b774 <_Balloc+0x50>
 800b752:	69e3      	ldr	r3, [r4, #28]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b75a:	b9b8      	cbnz	r0, 800b78c <_Balloc+0x68>
 800b75c:	2101      	movs	r1, #1
 800b75e:	fa01 f605 	lsl.w	r6, r1, r5
 800b762:	1d72      	adds	r2, r6, #5
 800b764:	0092      	lsls	r2, r2, #2
 800b766:	4620      	mov	r0, r4
 800b768:	f000 fe3e 	bl	800c3e8 <_calloc_r>
 800b76c:	b160      	cbz	r0, 800b788 <_Balloc+0x64>
 800b76e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b772:	e00e      	b.n	800b792 <_Balloc+0x6e>
 800b774:	2221      	movs	r2, #33	; 0x21
 800b776:	2104      	movs	r1, #4
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fe35 	bl	800c3e8 <_calloc_r>
 800b77e:	69e3      	ldr	r3, [r4, #28]
 800b780:	60f0      	str	r0, [r6, #12]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e4      	bne.n	800b752 <_Balloc+0x2e>
 800b788:	2000      	movs	r0, #0
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	6802      	ldr	r2, [r0, #0]
 800b78e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b792:	2300      	movs	r3, #0
 800b794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b798:	e7f7      	b.n	800b78a <_Balloc+0x66>
 800b79a:	bf00      	nop
 800b79c:	0800c884 	.word	0x0800c884
 800b7a0:	0800c904 	.word	0x0800c904

0800b7a4 <_Bfree>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	69c6      	ldr	r6, [r0, #28]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	b976      	cbnz	r6, 800b7cc <_Bfree+0x28>
 800b7ae:	2010      	movs	r0, #16
 800b7b0:	f7ff ff04 	bl	800b5bc <malloc>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	61e8      	str	r0, [r5, #28]
 800b7b8:	b920      	cbnz	r0, 800b7c4 <_Bfree+0x20>
 800b7ba:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <_Bfree+0x3c>)
 800b7bc:	4809      	ldr	r0, [pc, #36]	; (800b7e4 <_Bfree+0x40>)
 800b7be:	218f      	movs	r1, #143	; 0x8f
 800b7c0:	f000 fdf4 	bl	800c3ac <__assert_func>
 800b7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7c8:	6006      	str	r6, [r0, #0]
 800b7ca:	60c6      	str	r6, [r0, #12]
 800b7cc:	b13c      	cbz	r4, 800b7de <_Bfree+0x3a>
 800b7ce:	69eb      	ldr	r3, [r5, #28]
 800b7d0:	6862      	ldr	r2, [r4, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7d8:	6021      	str	r1, [r4, #0]
 800b7da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	0800c884 	.word	0x0800c884
 800b7e4:	0800c904 	.word	0x0800c904

0800b7e8 <__multadd>:
 800b7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ec:	690d      	ldr	r5, [r1, #16]
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	461e      	mov	r6, r3
 800b7f4:	f101 0c14 	add.w	ip, r1, #20
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b7fe:	b299      	uxth	r1, r3
 800b800:	fb02 6101 	mla	r1, r2, r1, r6
 800b804:	0c1e      	lsrs	r6, r3, #16
 800b806:	0c0b      	lsrs	r3, r1, #16
 800b808:	fb02 3306 	mla	r3, r2, r6, r3
 800b80c:	b289      	uxth	r1, r1
 800b80e:	3001      	adds	r0, #1
 800b810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b814:	4285      	cmp	r5, r0
 800b816:	f84c 1b04 	str.w	r1, [ip], #4
 800b81a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b81e:	dcec      	bgt.n	800b7fa <__multadd+0x12>
 800b820:	b30e      	cbz	r6, 800b866 <__multadd+0x7e>
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	42ab      	cmp	r3, r5
 800b826:	dc19      	bgt.n	800b85c <__multadd+0x74>
 800b828:	6861      	ldr	r1, [r4, #4]
 800b82a:	4638      	mov	r0, r7
 800b82c:	3101      	adds	r1, #1
 800b82e:	f7ff ff79 	bl	800b724 <_Balloc>
 800b832:	4680      	mov	r8, r0
 800b834:	b928      	cbnz	r0, 800b842 <__multadd+0x5a>
 800b836:	4602      	mov	r2, r0
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <__multadd+0x84>)
 800b83a:	480d      	ldr	r0, [pc, #52]	; (800b870 <__multadd+0x88>)
 800b83c:	21ba      	movs	r1, #186	; 0xba
 800b83e:	f000 fdb5 	bl	800c3ac <__assert_func>
 800b842:	6922      	ldr	r2, [r4, #16]
 800b844:	3202      	adds	r2, #2
 800b846:	f104 010c 	add.w	r1, r4, #12
 800b84a:	0092      	lsls	r2, r2, #2
 800b84c:	300c      	adds	r0, #12
 800b84e:	f000 fd9f 	bl	800c390 <memcpy>
 800b852:	4621      	mov	r1, r4
 800b854:	4638      	mov	r0, r7
 800b856:	f7ff ffa5 	bl	800b7a4 <_Bfree>
 800b85a:	4644      	mov	r4, r8
 800b85c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b860:	3501      	adds	r5, #1
 800b862:	615e      	str	r6, [r3, #20]
 800b864:	6125      	str	r5, [r4, #16]
 800b866:	4620      	mov	r0, r4
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	0800c8f3 	.word	0x0800c8f3
 800b870:	0800c904 	.word	0x0800c904

0800b874 <__hi0bits>:
 800b874:	0c03      	lsrs	r3, r0, #16
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	b9d3      	cbnz	r3, 800b8b0 <__hi0bits+0x3c>
 800b87a:	0400      	lsls	r0, r0, #16
 800b87c:	2310      	movs	r3, #16
 800b87e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b882:	bf04      	itt	eq
 800b884:	0200      	lsleq	r0, r0, #8
 800b886:	3308      	addeq	r3, #8
 800b888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b88c:	bf04      	itt	eq
 800b88e:	0100      	lsleq	r0, r0, #4
 800b890:	3304      	addeq	r3, #4
 800b892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b896:	bf04      	itt	eq
 800b898:	0080      	lsleq	r0, r0, #2
 800b89a:	3302      	addeq	r3, #2
 800b89c:	2800      	cmp	r0, #0
 800b89e:	db05      	blt.n	800b8ac <__hi0bits+0x38>
 800b8a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8a4:	f103 0301 	add.w	r3, r3, #1
 800b8a8:	bf08      	it	eq
 800b8aa:	2320      	moveq	r3, #32
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	4770      	bx	lr
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e7e4      	b.n	800b87e <__hi0bits+0xa>

0800b8b4 <__lo0bits>:
 800b8b4:	6803      	ldr	r3, [r0, #0]
 800b8b6:	f013 0207 	ands.w	r2, r3, #7
 800b8ba:	d00c      	beq.n	800b8d6 <__lo0bits+0x22>
 800b8bc:	07d9      	lsls	r1, r3, #31
 800b8be:	d422      	bmi.n	800b906 <__lo0bits+0x52>
 800b8c0:	079a      	lsls	r2, r3, #30
 800b8c2:	bf49      	itett	mi
 800b8c4:	085b      	lsrmi	r3, r3, #1
 800b8c6:	089b      	lsrpl	r3, r3, #2
 800b8c8:	6003      	strmi	r3, [r0, #0]
 800b8ca:	2201      	movmi	r2, #1
 800b8cc:	bf5c      	itt	pl
 800b8ce:	6003      	strpl	r3, [r0, #0]
 800b8d0:	2202      	movpl	r2, #2
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	4770      	bx	lr
 800b8d6:	b299      	uxth	r1, r3
 800b8d8:	b909      	cbnz	r1, 800b8de <__lo0bits+0x2a>
 800b8da:	0c1b      	lsrs	r3, r3, #16
 800b8dc:	2210      	movs	r2, #16
 800b8de:	b2d9      	uxtb	r1, r3
 800b8e0:	b909      	cbnz	r1, 800b8e6 <__lo0bits+0x32>
 800b8e2:	3208      	adds	r2, #8
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	0719      	lsls	r1, r3, #28
 800b8e8:	bf04      	itt	eq
 800b8ea:	091b      	lsreq	r3, r3, #4
 800b8ec:	3204      	addeq	r2, #4
 800b8ee:	0799      	lsls	r1, r3, #30
 800b8f0:	bf04      	itt	eq
 800b8f2:	089b      	lsreq	r3, r3, #2
 800b8f4:	3202      	addeq	r2, #2
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	d403      	bmi.n	800b902 <__lo0bits+0x4e>
 800b8fa:	085b      	lsrs	r3, r3, #1
 800b8fc:	f102 0201 	add.w	r2, r2, #1
 800b900:	d003      	beq.n	800b90a <__lo0bits+0x56>
 800b902:	6003      	str	r3, [r0, #0]
 800b904:	e7e5      	b.n	800b8d2 <__lo0bits+0x1e>
 800b906:	2200      	movs	r2, #0
 800b908:	e7e3      	b.n	800b8d2 <__lo0bits+0x1e>
 800b90a:	2220      	movs	r2, #32
 800b90c:	e7e1      	b.n	800b8d2 <__lo0bits+0x1e>
	...

0800b910 <__i2b>:
 800b910:	b510      	push	{r4, lr}
 800b912:	460c      	mov	r4, r1
 800b914:	2101      	movs	r1, #1
 800b916:	f7ff ff05 	bl	800b724 <_Balloc>
 800b91a:	4602      	mov	r2, r0
 800b91c:	b928      	cbnz	r0, 800b92a <__i2b+0x1a>
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <__i2b+0x24>)
 800b920:	4805      	ldr	r0, [pc, #20]	; (800b938 <__i2b+0x28>)
 800b922:	f240 1145 	movw	r1, #325	; 0x145
 800b926:	f000 fd41 	bl	800c3ac <__assert_func>
 800b92a:	2301      	movs	r3, #1
 800b92c:	6144      	str	r4, [r0, #20]
 800b92e:	6103      	str	r3, [r0, #16]
 800b930:	bd10      	pop	{r4, pc}
 800b932:	bf00      	nop
 800b934:	0800c8f3 	.word	0x0800c8f3
 800b938:	0800c904 	.word	0x0800c904

0800b93c <__multiply>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	4691      	mov	r9, r2
 800b942:	690a      	ldr	r2, [r1, #16]
 800b944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b948:	429a      	cmp	r2, r3
 800b94a:	bfb8      	it	lt
 800b94c:	460b      	movlt	r3, r1
 800b94e:	460c      	mov	r4, r1
 800b950:	bfbc      	itt	lt
 800b952:	464c      	movlt	r4, r9
 800b954:	4699      	movlt	r9, r3
 800b956:	6927      	ldr	r7, [r4, #16]
 800b958:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b95c:	68a3      	ldr	r3, [r4, #8]
 800b95e:	6861      	ldr	r1, [r4, #4]
 800b960:	eb07 060a 	add.w	r6, r7, sl
 800b964:	42b3      	cmp	r3, r6
 800b966:	b085      	sub	sp, #20
 800b968:	bfb8      	it	lt
 800b96a:	3101      	addlt	r1, #1
 800b96c:	f7ff feda 	bl	800b724 <_Balloc>
 800b970:	b930      	cbnz	r0, 800b980 <__multiply+0x44>
 800b972:	4602      	mov	r2, r0
 800b974:	4b44      	ldr	r3, [pc, #272]	; (800ba88 <__multiply+0x14c>)
 800b976:	4845      	ldr	r0, [pc, #276]	; (800ba8c <__multiply+0x150>)
 800b978:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b97c:	f000 fd16 	bl	800c3ac <__assert_func>
 800b980:	f100 0514 	add.w	r5, r0, #20
 800b984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b988:	462b      	mov	r3, r5
 800b98a:	2200      	movs	r2, #0
 800b98c:	4543      	cmp	r3, r8
 800b98e:	d321      	bcc.n	800b9d4 <__multiply+0x98>
 800b990:	f104 0314 	add.w	r3, r4, #20
 800b994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b998:	f109 0314 	add.w	r3, r9, #20
 800b99c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9a0:	9202      	str	r2, [sp, #8]
 800b9a2:	1b3a      	subs	r2, r7, r4
 800b9a4:	3a15      	subs	r2, #21
 800b9a6:	f022 0203 	bic.w	r2, r2, #3
 800b9aa:	3204      	adds	r2, #4
 800b9ac:	f104 0115 	add.w	r1, r4, #21
 800b9b0:	428f      	cmp	r7, r1
 800b9b2:	bf38      	it	cc
 800b9b4:	2204      	movcc	r2, #4
 800b9b6:	9201      	str	r2, [sp, #4]
 800b9b8:	9a02      	ldr	r2, [sp, #8]
 800b9ba:	9303      	str	r3, [sp, #12]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d80c      	bhi.n	800b9da <__multiply+0x9e>
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	dd03      	ble.n	800b9cc <__multiply+0x90>
 800b9c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d05b      	beq.n	800ba84 <__multiply+0x148>
 800b9cc:	6106      	str	r6, [r0, #16]
 800b9ce:	b005      	add	sp, #20
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	f843 2b04 	str.w	r2, [r3], #4
 800b9d8:	e7d8      	b.n	800b98c <__multiply+0x50>
 800b9da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9de:	f1ba 0f00 	cmp.w	sl, #0
 800b9e2:	d024      	beq.n	800ba2e <__multiply+0xf2>
 800b9e4:	f104 0e14 	add.w	lr, r4, #20
 800b9e8:	46a9      	mov	r9, r5
 800b9ea:	f04f 0c00 	mov.w	ip, #0
 800b9ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b9f6:	fa1f fb82 	uxth.w	fp, r2
 800b9fa:	b289      	uxth	r1, r1
 800b9fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba04:	f8d9 2000 	ldr.w	r2, [r9]
 800ba08:	4461      	add	r1, ip
 800ba0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba16:	b289      	uxth	r1, r1
 800ba18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba1c:	4577      	cmp	r7, lr
 800ba1e:	f849 1b04 	str.w	r1, [r9], #4
 800ba22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba26:	d8e2      	bhi.n	800b9ee <__multiply+0xb2>
 800ba28:	9a01      	ldr	r2, [sp, #4]
 800ba2a:	f845 c002 	str.w	ip, [r5, r2]
 800ba2e:	9a03      	ldr	r2, [sp, #12]
 800ba30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba34:	3304      	adds	r3, #4
 800ba36:	f1b9 0f00 	cmp.w	r9, #0
 800ba3a:	d021      	beq.n	800ba80 <__multiply+0x144>
 800ba3c:	6829      	ldr	r1, [r5, #0]
 800ba3e:	f104 0c14 	add.w	ip, r4, #20
 800ba42:	46ae      	mov	lr, r5
 800ba44:	f04f 0a00 	mov.w	sl, #0
 800ba48:	f8bc b000 	ldrh.w	fp, [ip]
 800ba4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba50:	fb09 220b 	mla	r2, r9, fp, r2
 800ba54:	4452      	add	r2, sl
 800ba56:	b289      	uxth	r1, r1
 800ba58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba5c:	f84e 1b04 	str.w	r1, [lr], #4
 800ba60:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba68:	f8be 1000 	ldrh.w	r1, [lr]
 800ba6c:	fb09 110a 	mla	r1, r9, sl, r1
 800ba70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ba74:	4567      	cmp	r7, ip
 800ba76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba7a:	d8e5      	bhi.n	800ba48 <__multiply+0x10c>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	50a9      	str	r1, [r5, r2]
 800ba80:	3504      	adds	r5, #4
 800ba82:	e799      	b.n	800b9b8 <__multiply+0x7c>
 800ba84:	3e01      	subs	r6, #1
 800ba86:	e79b      	b.n	800b9c0 <__multiply+0x84>
 800ba88:	0800c8f3 	.word	0x0800c8f3
 800ba8c:	0800c904 	.word	0x0800c904

0800ba90 <__pow5mult>:
 800ba90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba94:	4615      	mov	r5, r2
 800ba96:	f012 0203 	ands.w	r2, r2, #3
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	d007      	beq.n	800bab0 <__pow5mult+0x20>
 800baa0:	4c25      	ldr	r4, [pc, #148]	; (800bb38 <__pow5mult+0xa8>)
 800baa2:	3a01      	subs	r2, #1
 800baa4:	2300      	movs	r3, #0
 800baa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baaa:	f7ff fe9d 	bl	800b7e8 <__multadd>
 800baae:	4607      	mov	r7, r0
 800bab0:	10ad      	asrs	r5, r5, #2
 800bab2:	d03d      	beq.n	800bb30 <__pow5mult+0xa0>
 800bab4:	69f4      	ldr	r4, [r6, #28]
 800bab6:	b97c      	cbnz	r4, 800bad8 <__pow5mult+0x48>
 800bab8:	2010      	movs	r0, #16
 800baba:	f7ff fd7f 	bl	800b5bc <malloc>
 800babe:	4602      	mov	r2, r0
 800bac0:	61f0      	str	r0, [r6, #28]
 800bac2:	b928      	cbnz	r0, 800bad0 <__pow5mult+0x40>
 800bac4:	4b1d      	ldr	r3, [pc, #116]	; (800bb3c <__pow5mult+0xac>)
 800bac6:	481e      	ldr	r0, [pc, #120]	; (800bb40 <__pow5mult+0xb0>)
 800bac8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bacc:	f000 fc6e 	bl	800c3ac <__assert_func>
 800bad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bad4:	6004      	str	r4, [r0, #0]
 800bad6:	60c4      	str	r4, [r0, #12]
 800bad8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800badc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bae0:	b94c      	cbnz	r4, 800baf6 <__pow5mult+0x66>
 800bae2:	f240 2171 	movw	r1, #625	; 0x271
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7ff ff12 	bl	800b910 <__i2b>
 800baec:	2300      	movs	r3, #0
 800baee:	f8c8 0008 	str.w	r0, [r8, #8]
 800baf2:	4604      	mov	r4, r0
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	f04f 0900 	mov.w	r9, #0
 800bafa:	07eb      	lsls	r3, r5, #31
 800bafc:	d50a      	bpl.n	800bb14 <__pow5mult+0x84>
 800bafe:	4639      	mov	r1, r7
 800bb00:	4622      	mov	r2, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7ff ff1a 	bl	800b93c <__multiply>
 800bb08:	4639      	mov	r1, r7
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f7ff fe49 	bl	800b7a4 <_Bfree>
 800bb12:	4647      	mov	r7, r8
 800bb14:	106d      	asrs	r5, r5, #1
 800bb16:	d00b      	beq.n	800bb30 <__pow5mult+0xa0>
 800bb18:	6820      	ldr	r0, [r4, #0]
 800bb1a:	b938      	cbnz	r0, 800bb2c <__pow5mult+0x9c>
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7ff ff0b 	bl	800b93c <__multiply>
 800bb26:	6020      	str	r0, [r4, #0]
 800bb28:	f8c0 9000 	str.w	r9, [r0]
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	e7e4      	b.n	800bafa <__pow5mult+0x6a>
 800bb30:	4638      	mov	r0, r7
 800bb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb36:	bf00      	nop
 800bb38:	0800ca50 	.word	0x0800ca50
 800bb3c:	0800c884 	.word	0x0800c884
 800bb40:	0800c904 	.word	0x0800c904

0800bb44 <__lshift>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	6849      	ldr	r1, [r1, #4]
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	4607      	mov	r7, r0
 800bb56:	4691      	mov	r9, r2
 800bb58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb5c:	f108 0601 	add.w	r6, r8, #1
 800bb60:	42b3      	cmp	r3, r6
 800bb62:	db0b      	blt.n	800bb7c <__lshift+0x38>
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff fddd 	bl	800b724 <_Balloc>
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	b948      	cbnz	r0, 800bb82 <__lshift+0x3e>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b28      	ldr	r3, [pc, #160]	; (800bc14 <__lshift+0xd0>)
 800bb72:	4829      	ldr	r0, [pc, #164]	; (800bc18 <__lshift+0xd4>)
 800bb74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bb78:	f000 fc18 	bl	800c3ac <__assert_func>
 800bb7c:	3101      	adds	r1, #1
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	e7ee      	b.n	800bb60 <__lshift+0x1c>
 800bb82:	2300      	movs	r3, #0
 800bb84:	f100 0114 	add.w	r1, r0, #20
 800bb88:	f100 0210 	add.w	r2, r0, #16
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	4553      	cmp	r3, sl
 800bb90:	db33      	blt.n	800bbfa <__lshift+0xb6>
 800bb92:	6920      	ldr	r0, [r4, #16]
 800bb94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb98:	f104 0314 	add.w	r3, r4, #20
 800bb9c:	f019 091f 	ands.w	r9, r9, #31
 800bba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bba8:	d02b      	beq.n	800bc02 <__lshift+0xbe>
 800bbaa:	f1c9 0e20 	rsb	lr, r9, #32
 800bbae:	468a      	mov	sl, r1
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	fa00 f009 	lsl.w	r0, r0, r9
 800bbb8:	4310      	orrs	r0, r2
 800bbba:	f84a 0b04 	str.w	r0, [sl], #4
 800bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc2:	459c      	cmp	ip, r3
 800bbc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbc8:	d8f3      	bhi.n	800bbb2 <__lshift+0x6e>
 800bbca:	ebac 0304 	sub.w	r3, ip, r4
 800bbce:	3b15      	subs	r3, #21
 800bbd0:	f023 0303 	bic.w	r3, r3, #3
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	f104 0015 	add.w	r0, r4, #21
 800bbda:	4584      	cmp	ip, r0
 800bbdc:	bf38      	it	cc
 800bbde:	2304      	movcc	r3, #4
 800bbe0:	50ca      	str	r2, [r1, r3]
 800bbe2:	b10a      	cbz	r2, 800bbe8 <__lshift+0xa4>
 800bbe4:	f108 0602 	add.w	r6, r8, #2
 800bbe8:	3e01      	subs	r6, #1
 800bbea:	4638      	mov	r0, r7
 800bbec:	612e      	str	r6, [r5, #16]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f7ff fdd8 	bl	800b7a4 <_Bfree>
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbfe:	3301      	adds	r3, #1
 800bc00:	e7c5      	b.n	800bb8e <__lshift+0x4a>
 800bc02:	3904      	subs	r1, #4
 800bc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc08:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc0c:	459c      	cmp	ip, r3
 800bc0e:	d8f9      	bhi.n	800bc04 <__lshift+0xc0>
 800bc10:	e7ea      	b.n	800bbe8 <__lshift+0xa4>
 800bc12:	bf00      	nop
 800bc14:	0800c8f3 	.word	0x0800c8f3
 800bc18:	0800c904 	.word	0x0800c904

0800bc1c <__mcmp>:
 800bc1c:	b530      	push	{r4, r5, lr}
 800bc1e:	6902      	ldr	r2, [r0, #16]
 800bc20:	690c      	ldr	r4, [r1, #16]
 800bc22:	1b12      	subs	r2, r2, r4
 800bc24:	d10e      	bne.n	800bc44 <__mcmp+0x28>
 800bc26:	f100 0314 	add.w	r3, r0, #20
 800bc2a:	3114      	adds	r1, #20
 800bc2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc3c:	42a5      	cmp	r5, r4
 800bc3e:	d003      	beq.n	800bc48 <__mcmp+0x2c>
 800bc40:	d305      	bcc.n	800bc4e <__mcmp+0x32>
 800bc42:	2201      	movs	r2, #1
 800bc44:	4610      	mov	r0, r2
 800bc46:	bd30      	pop	{r4, r5, pc}
 800bc48:	4283      	cmp	r3, r0
 800bc4a:	d3f3      	bcc.n	800bc34 <__mcmp+0x18>
 800bc4c:	e7fa      	b.n	800bc44 <__mcmp+0x28>
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc52:	e7f7      	b.n	800bc44 <__mcmp+0x28>

0800bc54 <__mdiff>:
 800bc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4690      	mov	r8, r2
 800bc62:	f7ff ffdb 	bl	800bc1c <__mcmp>
 800bc66:	1e05      	subs	r5, r0, #0
 800bc68:	d110      	bne.n	800bc8c <__mdiff+0x38>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff fd59 	bl	800b724 <_Balloc>
 800bc72:	b930      	cbnz	r0, 800bc82 <__mdiff+0x2e>
 800bc74:	4b3a      	ldr	r3, [pc, #232]	; (800bd60 <__mdiff+0x10c>)
 800bc76:	4602      	mov	r2, r0
 800bc78:	f240 2137 	movw	r1, #567	; 0x237
 800bc7c:	4839      	ldr	r0, [pc, #228]	; (800bd64 <__mdiff+0x110>)
 800bc7e:	f000 fb95 	bl	800c3ac <__assert_func>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	bfa4      	itt	ge
 800bc8e:	4643      	movge	r3, r8
 800bc90:	46a0      	movge	r8, r4
 800bc92:	4630      	mov	r0, r6
 800bc94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc98:	bfa6      	itte	ge
 800bc9a:	461c      	movge	r4, r3
 800bc9c:	2500      	movge	r5, #0
 800bc9e:	2501      	movlt	r5, #1
 800bca0:	f7ff fd40 	bl	800b724 <_Balloc>
 800bca4:	b920      	cbnz	r0, 800bcb0 <__mdiff+0x5c>
 800bca6:	4b2e      	ldr	r3, [pc, #184]	; (800bd60 <__mdiff+0x10c>)
 800bca8:	4602      	mov	r2, r0
 800bcaa:	f240 2145 	movw	r1, #581	; 0x245
 800bcae:	e7e5      	b.n	800bc7c <__mdiff+0x28>
 800bcb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcb4:	6926      	ldr	r6, [r4, #16]
 800bcb6:	60c5      	str	r5, [r0, #12]
 800bcb8:	f104 0914 	add.w	r9, r4, #20
 800bcbc:	f108 0514 	add.w	r5, r8, #20
 800bcc0:	f100 0e14 	add.w	lr, r0, #20
 800bcc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bcc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bccc:	f108 0210 	add.w	r2, r8, #16
 800bcd0:	46f2      	mov	sl, lr
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcdc:	fa11 f88b 	uxtah	r8, r1, fp
 800bce0:	b299      	uxth	r1, r3
 800bce2:	0c1b      	lsrs	r3, r3, #16
 800bce4:	eba8 0801 	sub.w	r8, r8, r1
 800bce8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcf0:	fa1f f888 	uxth.w	r8, r8
 800bcf4:	1419      	asrs	r1, r3, #16
 800bcf6:	454e      	cmp	r6, r9
 800bcf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcfc:	f84a 3b04 	str.w	r3, [sl], #4
 800bd00:	d8e8      	bhi.n	800bcd4 <__mdiff+0x80>
 800bd02:	1b33      	subs	r3, r6, r4
 800bd04:	3b15      	subs	r3, #21
 800bd06:	f023 0303 	bic.w	r3, r3, #3
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	3415      	adds	r4, #21
 800bd0e:	42a6      	cmp	r6, r4
 800bd10:	bf38      	it	cc
 800bd12:	2304      	movcc	r3, #4
 800bd14:	441d      	add	r5, r3
 800bd16:	4473      	add	r3, lr
 800bd18:	469e      	mov	lr, r3
 800bd1a:	462e      	mov	r6, r5
 800bd1c:	4566      	cmp	r6, ip
 800bd1e:	d30e      	bcc.n	800bd3e <__mdiff+0xea>
 800bd20:	f10c 0203 	add.w	r2, ip, #3
 800bd24:	1b52      	subs	r2, r2, r5
 800bd26:	f022 0203 	bic.w	r2, r2, #3
 800bd2a:	3d03      	subs	r5, #3
 800bd2c:	45ac      	cmp	ip, r5
 800bd2e:	bf38      	it	cc
 800bd30:	2200      	movcc	r2, #0
 800bd32:	4413      	add	r3, r2
 800bd34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd38:	b17a      	cbz	r2, 800bd5a <__mdiff+0x106>
 800bd3a:	6107      	str	r7, [r0, #16]
 800bd3c:	e7a4      	b.n	800bc88 <__mdiff+0x34>
 800bd3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd42:	fa11 f288 	uxtah	r2, r1, r8
 800bd46:	1414      	asrs	r4, r2, #16
 800bd48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd52:	f84e 2b04 	str.w	r2, [lr], #4
 800bd56:	1421      	asrs	r1, r4, #16
 800bd58:	e7e0      	b.n	800bd1c <__mdiff+0xc8>
 800bd5a:	3f01      	subs	r7, #1
 800bd5c:	e7ea      	b.n	800bd34 <__mdiff+0xe0>
 800bd5e:	bf00      	nop
 800bd60:	0800c8f3 	.word	0x0800c8f3
 800bd64:	0800c904 	.word	0x0800c904

0800bd68 <__d2b>:
 800bd68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	2101      	movs	r1, #1
 800bd70:	ec59 8b10 	vmov	r8, r9, d0
 800bd74:	4616      	mov	r6, r2
 800bd76:	f7ff fcd5 	bl	800b724 <_Balloc>
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	b930      	cbnz	r0, 800bd8c <__d2b+0x24>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	4b24      	ldr	r3, [pc, #144]	; (800be14 <__d2b+0xac>)
 800bd82:	4825      	ldr	r0, [pc, #148]	; (800be18 <__d2b+0xb0>)
 800bd84:	f240 310f 	movw	r1, #783	; 0x30f
 800bd88:	f000 fb10 	bl	800c3ac <__assert_func>
 800bd8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd94:	bb2d      	cbnz	r5, 800bde2 <__d2b+0x7a>
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	f1b8 0300 	subs.w	r3, r8, #0
 800bd9c:	d026      	beq.n	800bdec <__d2b+0x84>
 800bd9e:	4668      	mov	r0, sp
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	f7ff fd87 	bl	800b8b4 <__lo0bits>
 800bda6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdaa:	b1e8      	cbz	r0, 800bde8 <__d2b+0x80>
 800bdac:	f1c0 0320 	rsb	r3, r0, #32
 800bdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	40c2      	lsrs	r2, r0
 800bdb8:	6163      	str	r3, [r4, #20]
 800bdba:	9201      	str	r2, [sp, #4]
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	61a3      	str	r3, [r4, #24]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	bf14      	ite	ne
 800bdc4:	2202      	movne	r2, #2
 800bdc6:	2201      	moveq	r2, #1
 800bdc8:	6122      	str	r2, [r4, #16]
 800bdca:	b1bd      	cbz	r5, 800bdfc <__d2b+0x94>
 800bdcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdd0:	4405      	add	r5, r0
 800bdd2:	603d      	str	r5, [r7, #0]
 800bdd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bdd8:	6030      	str	r0, [r6, #0]
 800bdda:	4620      	mov	r0, r4
 800bddc:	b003      	add	sp, #12
 800bdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bde6:	e7d6      	b.n	800bd96 <__d2b+0x2e>
 800bde8:	6161      	str	r1, [r4, #20]
 800bdea:	e7e7      	b.n	800bdbc <__d2b+0x54>
 800bdec:	a801      	add	r0, sp, #4
 800bdee:	f7ff fd61 	bl	800b8b4 <__lo0bits>
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	6163      	str	r3, [r4, #20]
 800bdf6:	3020      	adds	r0, #32
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	e7e5      	b.n	800bdc8 <__d2b+0x60>
 800bdfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be04:	6038      	str	r0, [r7, #0]
 800be06:	6918      	ldr	r0, [r3, #16]
 800be08:	f7ff fd34 	bl	800b874 <__hi0bits>
 800be0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be10:	e7e2      	b.n	800bdd8 <__d2b+0x70>
 800be12:	bf00      	nop
 800be14:	0800c8f3 	.word	0x0800c8f3
 800be18:	0800c904 	.word	0x0800c904

0800be1c <__sfputc_r>:
 800be1c:	6893      	ldr	r3, [r2, #8]
 800be1e:	3b01      	subs	r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	b410      	push	{r4}
 800be24:	6093      	str	r3, [r2, #8]
 800be26:	da08      	bge.n	800be3a <__sfputc_r+0x1e>
 800be28:	6994      	ldr	r4, [r2, #24]
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	db01      	blt.n	800be32 <__sfputc_r+0x16>
 800be2e:	290a      	cmp	r1, #10
 800be30:	d103      	bne.n	800be3a <__sfputc_r+0x1e>
 800be32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be36:	f7fe bbe6 	b.w	800a606 <__swbuf_r>
 800be3a:	6813      	ldr	r3, [r2, #0]
 800be3c:	1c58      	adds	r0, r3, #1
 800be3e:	6010      	str	r0, [r2, #0]
 800be40:	7019      	strb	r1, [r3, #0]
 800be42:	4608      	mov	r0, r1
 800be44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <__sfputs_r>:
 800be4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4c:	4606      	mov	r6, r0
 800be4e:	460f      	mov	r7, r1
 800be50:	4614      	mov	r4, r2
 800be52:	18d5      	adds	r5, r2, r3
 800be54:	42ac      	cmp	r4, r5
 800be56:	d101      	bne.n	800be5c <__sfputs_r+0x12>
 800be58:	2000      	movs	r0, #0
 800be5a:	e007      	b.n	800be6c <__sfputs_r+0x22>
 800be5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be60:	463a      	mov	r2, r7
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffda 	bl	800be1c <__sfputc_r>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d1f3      	bne.n	800be54 <__sfputs_r+0xa>
 800be6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be70 <_vfiprintf_r>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	460d      	mov	r5, r1
 800be76:	b09d      	sub	sp, #116	; 0x74
 800be78:	4614      	mov	r4, r2
 800be7a:	4698      	mov	r8, r3
 800be7c:	4606      	mov	r6, r0
 800be7e:	b118      	cbz	r0, 800be88 <_vfiprintf_r+0x18>
 800be80:	6a03      	ldr	r3, [r0, #32]
 800be82:	b90b      	cbnz	r3, 800be88 <_vfiprintf_r+0x18>
 800be84:	f7fe fad0 	bl	800a428 <__sinit>
 800be88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be8a:	07d9      	lsls	r1, r3, #31
 800be8c:	d405      	bmi.n	800be9a <_vfiprintf_r+0x2a>
 800be8e:	89ab      	ldrh	r3, [r5, #12]
 800be90:	059a      	lsls	r2, r3, #22
 800be92:	d402      	bmi.n	800be9a <_vfiprintf_r+0x2a>
 800be94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be96:	f7fe fcc8 	bl	800a82a <__retarget_lock_acquire_recursive>
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	071b      	lsls	r3, r3, #28
 800be9e:	d501      	bpl.n	800bea4 <_vfiprintf_r+0x34>
 800bea0:	692b      	ldr	r3, [r5, #16]
 800bea2:	b99b      	cbnz	r3, 800becc <_vfiprintf_r+0x5c>
 800bea4:	4629      	mov	r1, r5
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7fe fbea 	bl	800a680 <__swsetup_r>
 800beac:	b170      	cbz	r0, 800becc <_vfiprintf_r+0x5c>
 800beae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beb0:	07dc      	lsls	r4, r3, #31
 800beb2:	d504      	bpl.n	800bebe <_vfiprintf_r+0x4e>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	b01d      	add	sp, #116	; 0x74
 800beba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebe:	89ab      	ldrh	r3, [r5, #12]
 800bec0:	0598      	lsls	r0, r3, #22
 800bec2:	d4f7      	bmi.n	800beb4 <_vfiprintf_r+0x44>
 800bec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec6:	f7fe fcb1 	bl	800a82c <__retarget_lock_release_recursive>
 800beca:	e7f3      	b.n	800beb4 <_vfiprintf_r+0x44>
 800becc:	2300      	movs	r3, #0
 800bece:	9309      	str	r3, [sp, #36]	; 0x24
 800bed0:	2320      	movs	r3, #32
 800bed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bed6:	f8cd 800c 	str.w	r8, [sp, #12]
 800beda:	2330      	movs	r3, #48	; 0x30
 800bedc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c090 <_vfiprintf_r+0x220>
 800bee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bee4:	f04f 0901 	mov.w	r9, #1
 800bee8:	4623      	mov	r3, r4
 800beea:	469a      	mov	sl, r3
 800beec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef0:	b10a      	cbz	r2, 800bef6 <_vfiprintf_r+0x86>
 800bef2:	2a25      	cmp	r2, #37	; 0x25
 800bef4:	d1f9      	bne.n	800beea <_vfiprintf_r+0x7a>
 800bef6:	ebba 0b04 	subs.w	fp, sl, r4
 800befa:	d00b      	beq.n	800bf14 <_vfiprintf_r+0xa4>
 800befc:	465b      	mov	r3, fp
 800befe:	4622      	mov	r2, r4
 800bf00:	4629      	mov	r1, r5
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7ff ffa1 	bl	800be4a <__sfputs_r>
 800bf08:	3001      	adds	r0, #1
 800bf0a:	f000 80a9 	beq.w	800c060 <_vfiprintf_r+0x1f0>
 800bf0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf10:	445a      	add	r2, fp
 800bf12:	9209      	str	r2, [sp, #36]	; 0x24
 800bf14:	f89a 3000 	ldrb.w	r3, [sl]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 80a1 	beq.w	800c060 <_vfiprintf_r+0x1f0>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f04f 32ff 	mov.w	r2, #4294967295
 800bf24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf28:	f10a 0a01 	add.w	sl, sl, #1
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	9307      	str	r3, [sp, #28]
 800bf30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf34:	931a      	str	r3, [sp, #104]	; 0x68
 800bf36:	4654      	mov	r4, sl
 800bf38:	2205      	movs	r2, #5
 800bf3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3e:	4854      	ldr	r0, [pc, #336]	; (800c090 <_vfiprintf_r+0x220>)
 800bf40:	f7f4 f946 	bl	80001d0 <memchr>
 800bf44:	9a04      	ldr	r2, [sp, #16]
 800bf46:	b9d8      	cbnz	r0, 800bf80 <_vfiprintf_r+0x110>
 800bf48:	06d1      	lsls	r1, r2, #27
 800bf4a:	bf44      	itt	mi
 800bf4c:	2320      	movmi	r3, #32
 800bf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf52:	0713      	lsls	r3, r2, #28
 800bf54:	bf44      	itt	mi
 800bf56:	232b      	movmi	r3, #43	; 0x2b
 800bf58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf60:	2b2a      	cmp	r3, #42	; 0x2a
 800bf62:	d015      	beq.n	800bf90 <_vfiprintf_r+0x120>
 800bf64:	9a07      	ldr	r2, [sp, #28]
 800bf66:	4654      	mov	r4, sl
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f04f 0c0a 	mov.w	ip, #10
 800bf6e:	4621      	mov	r1, r4
 800bf70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf74:	3b30      	subs	r3, #48	; 0x30
 800bf76:	2b09      	cmp	r3, #9
 800bf78:	d94d      	bls.n	800c016 <_vfiprintf_r+0x1a6>
 800bf7a:	b1b0      	cbz	r0, 800bfaa <_vfiprintf_r+0x13a>
 800bf7c:	9207      	str	r2, [sp, #28]
 800bf7e:	e014      	b.n	800bfaa <_vfiprintf_r+0x13a>
 800bf80:	eba0 0308 	sub.w	r3, r0, r8
 800bf84:	fa09 f303 	lsl.w	r3, r9, r3
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	46a2      	mov	sl, r4
 800bf8e:	e7d2      	b.n	800bf36 <_vfiprintf_r+0xc6>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	1d19      	adds	r1, r3, #4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	9103      	str	r1, [sp, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bfbb      	ittet	lt
 800bf9c:	425b      	neglt	r3, r3
 800bf9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bfa2:	9307      	strge	r3, [sp, #28]
 800bfa4:	9307      	strlt	r3, [sp, #28]
 800bfa6:	bfb8      	it	lt
 800bfa8:	9204      	strlt	r2, [sp, #16]
 800bfaa:	7823      	ldrb	r3, [r4, #0]
 800bfac:	2b2e      	cmp	r3, #46	; 0x2e
 800bfae:	d10c      	bne.n	800bfca <_vfiprintf_r+0x15a>
 800bfb0:	7863      	ldrb	r3, [r4, #1]
 800bfb2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfb4:	d134      	bne.n	800c020 <_vfiprintf_r+0x1b0>
 800bfb6:	9b03      	ldr	r3, [sp, #12]
 800bfb8:	1d1a      	adds	r2, r3, #4
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	9203      	str	r2, [sp, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	bfb8      	it	lt
 800bfc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfc6:	3402      	adds	r4, #2
 800bfc8:	9305      	str	r3, [sp, #20]
 800bfca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0a0 <_vfiprintf_r+0x230>
 800bfce:	7821      	ldrb	r1, [r4, #0]
 800bfd0:	2203      	movs	r2, #3
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	f7f4 f8fc 	bl	80001d0 <memchr>
 800bfd8:	b138      	cbz	r0, 800bfea <_vfiprintf_r+0x17a>
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	eba0 000a 	sub.w	r0, r0, sl
 800bfe0:	2240      	movs	r2, #64	; 0x40
 800bfe2:	4082      	lsls	r2, r0
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	3401      	adds	r4, #1
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfee:	4829      	ldr	r0, [pc, #164]	; (800c094 <_vfiprintf_r+0x224>)
 800bff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bff4:	2206      	movs	r2, #6
 800bff6:	f7f4 f8eb 	bl	80001d0 <memchr>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d03f      	beq.n	800c07e <_vfiprintf_r+0x20e>
 800bffe:	4b26      	ldr	r3, [pc, #152]	; (800c098 <_vfiprintf_r+0x228>)
 800c000:	bb1b      	cbnz	r3, 800c04a <_vfiprintf_r+0x1da>
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	3307      	adds	r3, #7
 800c006:	f023 0307 	bic.w	r3, r3, #7
 800c00a:	3308      	adds	r3, #8
 800c00c:	9303      	str	r3, [sp, #12]
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	443b      	add	r3, r7
 800c012:	9309      	str	r3, [sp, #36]	; 0x24
 800c014:	e768      	b.n	800bee8 <_vfiprintf_r+0x78>
 800c016:	fb0c 3202 	mla	r2, ip, r2, r3
 800c01a:	460c      	mov	r4, r1
 800c01c:	2001      	movs	r0, #1
 800c01e:	e7a6      	b.n	800bf6e <_vfiprintf_r+0xfe>
 800c020:	2300      	movs	r3, #0
 800c022:	3401      	adds	r4, #1
 800c024:	9305      	str	r3, [sp, #20]
 800c026:	4619      	mov	r1, r3
 800c028:	f04f 0c0a 	mov.w	ip, #10
 800c02c:	4620      	mov	r0, r4
 800c02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c032:	3a30      	subs	r2, #48	; 0x30
 800c034:	2a09      	cmp	r2, #9
 800c036:	d903      	bls.n	800c040 <_vfiprintf_r+0x1d0>
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0c6      	beq.n	800bfca <_vfiprintf_r+0x15a>
 800c03c:	9105      	str	r1, [sp, #20]
 800c03e:	e7c4      	b.n	800bfca <_vfiprintf_r+0x15a>
 800c040:	fb0c 2101 	mla	r1, ip, r1, r2
 800c044:	4604      	mov	r4, r0
 800c046:	2301      	movs	r3, #1
 800c048:	e7f0      	b.n	800c02c <_vfiprintf_r+0x1bc>
 800c04a:	ab03      	add	r3, sp, #12
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	462a      	mov	r2, r5
 800c050:	4b12      	ldr	r3, [pc, #72]	; (800c09c <_vfiprintf_r+0x22c>)
 800c052:	a904      	add	r1, sp, #16
 800c054:	4630      	mov	r0, r6
 800c056:	f7fd fd95 	bl	8009b84 <_printf_float>
 800c05a:	4607      	mov	r7, r0
 800c05c:	1c78      	adds	r0, r7, #1
 800c05e:	d1d6      	bne.n	800c00e <_vfiprintf_r+0x19e>
 800c060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c062:	07d9      	lsls	r1, r3, #31
 800c064:	d405      	bmi.n	800c072 <_vfiprintf_r+0x202>
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	059a      	lsls	r2, r3, #22
 800c06a:	d402      	bmi.n	800c072 <_vfiprintf_r+0x202>
 800c06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06e:	f7fe fbdd 	bl	800a82c <__retarget_lock_release_recursive>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	065b      	lsls	r3, r3, #25
 800c076:	f53f af1d 	bmi.w	800beb4 <_vfiprintf_r+0x44>
 800c07a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07c:	e71c      	b.n	800beb8 <_vfiprintf_r+0x48>
 800c07e:	ab03      	add	r3, sp, #12
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	462a      	mov	r2, r5
 800c084:	4b05      	ldr	r3, [pc, #20]	; (800c09c <_vfiprintf_r+0x22c>)
 800c086:	a904      	add	r1, sp, #16
 800c088:	4630      	mov	r0, r6
 800c08a:	f7fe f81f 	bl	800a0cc <_printf_i>
 800c08e:	e7e4      	b.n	800c05a <_vfiprintf_r+0x1ea>
 800c090:	0800ca5c 	.word	0x0800ca5c
 800c094:	0800ca66 	.word	0x0800ca66
 800c098:	08009b85 	.word	0x08009b85
 800c09c:	0800be4b 	.word	0x0800be4b
 800c0a0:	0800ca62 	.word	0x0800ca62

0800c0a4 <__sflush_r>:
 800c0a4:	898a      	ldrh	r2, [r1, #12]
 800c0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	0710      	lsls	r0, r2, #28
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	d458      	bmi.n	800c164 <__sflush_r+0xc0>
 800c0b2:	684b      	ldr	r3, [r1, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dc05      	bgt.n	800c0c4 <__sflush_r+0x20>
 800c0b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	dc02      	bgt.n	800c0c4 <__sflush_r+0x20>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	d0f9      	beq.n	800c0be <__sflush_r+0x1a>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0d0:	682f      	ldr	r7, [r5, #0]
 800c0d2:	6a21      	ldr	r1, [r4, #32]
 800c0d4:	602b      	str	r3, [r5, #0]
 800c0d6:	d032      	beq.n	800c13e <__sflush_r+0x9a>
 800c0d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	075a      	lsls	r2, r3, #29
 800c0de:	d505      	bpl.n	800c0ec <__sflush_r+0x48>
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	1ac0      	subs	r0, r0, r3
 800c0e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0e6:	b10b      	cbz	r3, 800c0ec <__sflush_r+0x48>
 800c0e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0ea:	1ac0      	subs	r0, r0, r3
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0f2:	6a21      	ldr	r1, [r4, #32]
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b0      	blx	r6
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	d106      	bne.n	800c10c <__sflush_r+0x68>
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	291d      	cmp	r1, #29
 800c102:	d82b      	bhi.n	800c15c <__sflush_r+0xb8>
 800c104:	4a29      	ldr	r2, [pc, #164]	; (800c1ac <__sflush_r+0x108>)
 800c106:	410a      	asrs	r2, r1
 800c108:	07d6      	lsls	r6, r2, #31
 800c10a:	d427      	bmi.n	800c15c <__sflush_r+0xb8>
 800c10c:	2200      	movs	r2, #0
 800c10e:	6062      	str	r2, [r4, #4]
 800c110:	04d9      	lsls	r1, r3, #19
 800c112:	6922      	ldr	r2, [r4, #16]
 800c114:	6022      	str	r2, [r4, #0]
 800c116:	d504      	bpl.n	800c122 <__sflush_r+0x7e>
 800c118:	1c42      	adds	r2, r0, #1
 800c11a:	d101      	bne.n	800c120 <__sflush_r+0x7c>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b903      	cbnz	r3, 800c122 <__sflush_r+0x7e>
 800c120:	6560      	str	r0, [r4, #84]	; 0x54
 800c122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c124:	602f      	str	r7, [r5, #0]
 800c126:	2900      	cmp	r1, #0
 800c128:	d0c9      	beq.n	800c0be <__sflush_r+0x1a>
 800c12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c12e:	4299      	cmp	r1, r3
 800c130:	d002      	beq.n	800c138 <__sflush_r+0x94>
 800c132:	4628      	mov	r0, r5
 800c134:	f7ff f9f6 	bl	800b524 <_free_r>
 800c138:	2000      	movs	r0, #0
 800c13a:	6360      	str	r0, [r4, #52]	; 0x34
 800c13c:	e7c0      	b.n	800c0c0 <__sflush_r+0x1c>
 800c13e:	2301      	movs	r3, #1
 800c140:	4628      	mov	r0, r5
 800c142:	47b0      	blx	r6
 800c144:	1c41      	adds	r1, r0, #1
 800c146:	d1c8      	bne.n	800c0da <__sflush_r+0x36>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0c5      	beq.n	800c0da <__sflush_r+0x36>
 800c14e:	2b1d      	cmp	r3, #29
 800c150:	d001      	beq.n	800c156 <__sflush_r+0xb2>
 800c152:	2b16      	cmp	r3, #22
 800c154:	d101      	bne.n	800c15a <__sflush_r+0xb6>
 800c156:	602f      	str	r7, [r5, #0]
 800c158:	e7b1      	b.n	800c0be <__sflush_r+0x1a>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	e7ad      	b.n	800c0c0 <__sflush_r+0x1c>
 800c164:	690f      	ldr	r7, [r1, #16]
 800c166:	2f00      	cmp	r7, #0
 800c168:	d0a9      	beq.n	800c0be <__sflush_r+0x1a>
 800c16a:	0793      	lsls	r3, r2, #30
 800c16c:	680e      	ldr	r6, [r1, #0]
 800c16e:	bf08      	it	eq
 800c170:	694b      	ldreq	r3, [r1, #20]
 800c172:	600f      	str	r7, [r1, #0]
 800c174:	bf18      	it	ne
 800c176:	2300      	movne	r3, #0
 800c178:	eba6 0807 	sub.w	r8, r6, r7
 800c17c:	608b      	str	r3, [r1, #8]
 800c17e:	f1b8 0f00 	cmp.w	r8, #0
 800c182:	dd9c      	ble.n	800c0be <__sflush_r+0x1a>
 800c184:	6a21      	ldr	r1, [r4, #32]
 800c186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c188:	4643      	mov	r3, r8
 800c18a:	463a      	mov	r2, r7
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b0      	blx	r6
 800c190:	2800      	cmp	r0, #0
 800c192:	dc06      	bgt.n	800c1a2 <__sflush_r+0xfe>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	e78e      	b.n	800c0c0 <__sflush_r+0x1c>
 800c1a2:	4407      	add	r7, r0
 800c1a4:	eba8 0800 	sub.w	r8, r8, r0
 800c1a8:	e7e9      	b.n	800c17e <__sflush_r+0xda>
 800c1aa:	bf00      	nop
 800c1ac:	dfbffffe 	.word	0xdfbffffe

0800c1b0 <_fflush_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	690b      	ldr	r3, [r1, #16]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b913      	cbnz	r3, 800c1c0 <_fflush_r+0x10>
 800c1ba:	2500      	movs	r5, #0
 800c1bc:	4628      	mov	r0, r5
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	b118      	cbz	r0, 800c1ca <_fflush_r+0x1a>
 800c1c2:	6a03      	ldr	r3, [r0, #32]
 800c1c4:	b90b      	cbnz	r3, 800c1ca <_fflush_r+0x1a>
 800c1c6:	f7fe f92f 	bl	800a428 <__sinit>
 800c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0f3      	beq.n	800c1ba <_fflush_r+0xa>
 800c1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1d4:	07d0      	lsls	r0, r2, #31
 800c1d6:	d404      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1d8:	0599      	lsls	r1, r3, #22
 800c1da:	d402      	bmi.n	800c1e2 <_fflush_r+0x32>
 800c1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1de:	f7fe fb24 	bl	800a82a <__retarget_lock_acquire_recursive>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f7ff ff5d 	bl	800c0a4 <__sflush_r>
 800c1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ec:	07da      	lsls	r2, r3, #31
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	d4e4      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	059b      	lsls	r3, r3, #22
 800c1f6:	d4e1      	bmi.n	800c1bc <_fflush_r+0xc>
 800c1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1fa:	f7fe fb17 	bl	800a82c <__retarget_lock_release_recursive>
 800c1fe:	e7dd      	b.n	800c1bc <_fflush_r+0xc>

0800c200 <__swhatbuf_r>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2900      	cmp	r1, #0
 800c20a:	b096      	sub	sp, #88	; 0x58
 800c20c:	4615      	mov	r5, r2
 800c20e:	461e      	mov	r6, r3
 800c210:	da0d      	bge.n	800c22e <__swhatbuf_r+0x2e>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c218:	f04f 0100 	mov.w	r1, #0
 800c21c:	bf0c      	ite	eq
 800c21e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c222:	2340      	movne	r3, #64	; 0x40
 800c224:	2000      	movs	r0, #0
 800c226:	6031      	str	r1, [r6, #0]
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	b016      	add	sp, #88	; 0x58
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	466a      	mov	r2, sp
 800c230:	f000 f87c 	bl	800c32c <_fstat_r>
 800c234:	2800      	cmp	r0, #0
 800c236:	dbec      	blt.n	800c212 <__swhatbuf_r+0x12>
 800c238:	9901      	ldr	r1, [sp, #4]
 800c23a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c23e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c242:	4259      	negs	r1, r3
 800c244:	4159      	adcs	r1, r3
 800c246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c24a:	e7eb      	b.n	800c224 <__swhatbuf_r+0x24>

0800c24c <__smakebuf_r>:
 800c24c:	898b      	ldrh	r3, [r1, #12]
 800c24e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c250:	079d      	lsls	r5, r3, #30
 800c252:	4606      	mov	r6, r0
 800c254:	460c      	mov	r4, r1
 800c256:	d507      	bpl.n	800c268 <__smakebuf_r+0x1c>
 800c258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	6123      	str	r3, [r4, #16]
 800c260:	2301      	movs	r3, #1
 800c262:	6163      	str	r3, [r4, #20]
 800c264:	b002      	add	sp, #8
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	ab01      	add	r3, sp, #4
 800c26a:	466a      	mov	r2, sp
 800c26c:	f7ff ffc8 	bl	800c200 <__swhatbuf_r>
 800c270:	9900      	ldr	r1, [sp, #0]
 800c272:	4605      	mov	r5, r0
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff f9c9 	bl	800b60c <_malloc_r>
 800c27a:	b948      	cbnz	r0, 800c290 <__smakebuf_r+0x44>
 800c27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d4ef      	bmi.n	800c264 <__smakebuf_r+0x18>
 800c284:	f023 0303 	bic.w	r3, r3, #3
 800c288:	f043 0302 	orr.w	r3, r3, #2
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	e7e3      	b.n	800c258 <__smakebuf_r+0xc>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	6163      	str	r3, [r4, #20]
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	6120      	str	r0, [r4, #16]
 800c2a2:	b15b      	cbz	r3, 800c2bc <__smakebuf_r+0x70>
 800c2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f851 	bl	800c350 <_isatty_r>
 800c2ae:	b128      	cbz	r0, 800c2bc <__smakebuf_r+0x70>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	431d      	orrs	r5, r3
 800c2c0:	81a5      	strh	r5, [r4, #12]
 800c2c2:	e7cf      	b.n	800c264 <__smakebuf_r+0x18>

0800c2c4 <_putc_r>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	b118      	cbz	r0, 800c2d6 <_putc_r+0x12>
 800c2ce:	6a03      	ldr	r3, [r0, #32]
 800c2d0:	b90b      	cbnz	r3, 800c2d6 <_putc_r+0x12>
 800c2d2:	f7fe f8a9 	bl	800a428 <__sinit>
 800c2d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2d8:	07d8      	lsls	r0, r3, #31
 800c2da:	d405      	bmi.n	800c2e8 <_putc_r+0x24>
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	0599      	lsls	r1, r3, #22
 800c2e0:	d402      	bmi.n	800c2e8 <_putc_r+0x24>
 800c2e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e4:	f7fe faa1 	bl	800a82a <__retarget_lock_acquire_recursive>
 800c2e8:	68a3      	ldr	r3, [r4, #8]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	60a3      	str	r3, [r4, #8]
 800c2f0:	da05      	bge.n	800c2fe <_putc_r+0x3a>
 800c2f2:	69a2      	ldr	r2, [r4, #24]
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	db12      	blt.n	800c31e <_putc_r+0x5a>
 800c2f8:	b2eb      	uxtb	r3, r5
 800c2fa:	2b0a      	cmp	r3, #10
 800c2fc:	d00f      	beq.n	800c31e <_putc_r+0x5a>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	701d      	strb	r5, [r3, #0]
 800c306:	b2ed      	uxtb	r5, r5
 800c308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c30a:	07da      	lsls	r2, r3, #31
 800c30c:	d405      	bmi.n	800c31a <_putc_r+0x56>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	059b      	lsls	r3, r3, #22
 800c312:	d402      	bmi.n	800c31a <_putc_r+0x56>
 800c314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c316:	f7fe fa89 	bl	800a82c <__retarget_lock_release_recursive>
 800c31a:	4628      	mov	r0, r5
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	4629      	mov	r1, r5
 800c320:	4622      	mov	r2, r4
 800c322:	4630      	mov	r0, r6
 800c324:	f7fe f96f 	bl	800a606 <__swbuf_r>
 800c328:	4605      	mov	r5, r0
 800c32a:	e7ed      	b.n	800c308 <_putc_r+0x44>

0800c32c <_fstat_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	; (800c34c <_fstat_r+0x20>)
 800c330:	2300      	movs	r3, #0
 800c332:	4604      	mov	r4, r0
 800c334:	4608      	mov	r0, r1
 800c336:	4611      	mov	r1, r2
 800c338:	602b      	str	r3, [r5, #0]
 800c33a:	f7f6 fd42 	bl	8002dc2 <_fstat>
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	d102      	bne.n	800c348 <_fstat_r+0x1c>
 800c342:	682b      	ldr	r3, [r5, #0]
 800c344:	b103      	cbz	r3, 800c348 <_fstat_r+0x1c>
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	bd38      	pop	{r3, r4, r5, pc}
 800c34a:	bf00      	nop
 800c34c:	20000874 	.word	0x20000874

0800c350 <_isatty_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d06      	ldr	r5, [pc, #24]	; (800c36c <_isatty_r+0x1c>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	f7f6 fd41 	bl	8002de2 <_isatty>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_isatty_r+0x1a>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_isatty_r+0x1a>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	20000874 	.word	0x20000874

0800c370 <_sbrk_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d06      	ldr	r5, [pc, #24]	; (800c38c <_sbrk_r+0x1c>)
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	602b      	str	r3, [r5, #0]
 800c37c:	f7f6 fd4a 	bl	8002e14 <_sbrk>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_sbrk_r+0x1a>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_sbrk_r+0x1a>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20000874 	.word	0x20000874

0800c390 <memcpy>:
 800c390:	440a      	add	r2, r1
 800c392:	4291      	cmp	r1, r2
 800c394:	f100 33ff 	add.w	r3, r0, #4294967295
 800c398:	d100      	bne.n	800c39c <memcpy+0xc>
 800c39a:	4770      	bx	lr
 800c39c:	b510      	push	{r4, lr}
 800c39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3a6:	4291      	cmp	r1, r2
 800c3a8:	d1f9      	bne.n	800c39e <memcpy+0xe>
 800c3aa:	bd10      	pop	{r4, pc}

0800c3ac <__assert_func>:
 800c3ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <__assert_func+0x2c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	68d8      	ldr	r0, [r3, #12]
 800c3ba:	b14c      	cbz	r4, 800c3d0 <__assert_func+0x24>
 800c3bc:	4b07      	ldr	r3, [pc, #28]	; (800c3dc <__assert_func+0x30>)
 800c3be:	9100      	str	r1, [sp, #0]
 800c3c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3c4:	4906      	ldr	r1, [pc, #24]	; (800c3e0 <__assert_func+0x34>)
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	f000 f844 	bl	800c454 <fiprintf>
 800c3cc:	f000 f854 	bl	800c478 <abort>
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <__assert_func+0x38>)
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	e7f3      	b.n	800c3be <__assert_func+0x12>
 800c3d6:	bf00      	nop
 800c3d8:	20000088 	.word	0x20000088
 800c3dc:	0800ca77 	.word	0x0800ca77
 800c3e0:	0800ca84 	.word	0x0800ca84
 800c3e4:	0800cab2 	.word	0x0800cab2

0800c3e8 <_calloc_r>:
 800c3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ea:	fba1 2402 	umull	r2, r4, r1, r2
 800c3ee:	b94c      	cbnz	r4, 800c404 <_calloc_r+0x1c>
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	9201      	str	r2, [sp, #4]
 800c3f4:	f7ff f90a 	bl	800b60c <_malloc_r>
 800c3f8:	9a01      	ldr	r2, [sp, #4]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	b930      	cbnz	r0, 800c40c <_calloc_r+0x24>
 800c3fe:	4628      	mov	r0, r5
 800c400:	b003      	add	sp, #12
 800c402:	bd30      	pop	{r4, r5, pc}
 800c404:	220c      	movs	r2, #12
 800c406:	6002      	str	r2, [r0, #0]
 800c408:	2500      	movs	r5, #0
 800c40a:	e7f8      	b.n	800c3fe <_calloc_r+0x16>
 800c40c:	4621      	mov	r1, r4
 800c40e:	f7fe f98f 	bl	800a730 <memset>
 800c412:	e7f4      	b.n	800c3fe <_calloc_r+0x16>

0800c414 <__ascii_mbtowc>:
 800c414:	b082      	sub	sp, #8
 800c416:	b901      	cbnz	r1, 800c41a <__ascii_mbtowc+0x6>
 800c418:	a901      	add	r1, sp, #4
 800c41a:	b142      	cbz	r2, 800c42e <__ascii_mbtowc+0x1a>
 800c41c:	b14b      	cbz	r3, 800c432 <__ascii_mbtowc+0x1e>
 800c41e:	7813      	ldrb	r3, [r2, #0]
 800c420:	600b      	str	r3, [r1, #0]
 800c422:	7812      	ldrb	r2, [r2, #0]
 800c424:	1e10      	subs	r0, r2, #0
 800c426:	bf18      	it	ne
 800c428:	2001      	movne	r0, #1
 800c42a:	b002      	add	sp, #8
 800c42c:	4770      	bx	lr
 800c42e:	4610      	mov	r0, r2
 800c430:	e7fb      	b.n	800c42a <__ascii_mbtowc+0x16>
 800c432:	f06f 0001 	mvn.w	r0, #1
 800c436:	e7f8      	b.n	800c42a <__ascii_mbtowc+0x16>

0800c438 <__ascii_wctomb>:
 800c438:	b149      	cbz	r1, 800c44e <__ascii_wctomb+0x16>
 800c43a:	2aff      	cmp	r2, #255	; 0xff
 800c43c:	bf85      	ittet	hi
 800c43e:	238a      	movhi	r3, #138	; 0x8a
 800c440:	6003      	strhi	r3, [r0, #0]
 800c442:	700a      	strbls	r2, [r1, #0]
 800c444:	f04f 30ff 	movhi.w	r0, #4294967295
 800c448:	bf98      	it	ls
 800c44a:	2001      	movls	r0, #1
 800c44c:	4770      	bx	lr
 800c44e:	4608      	mov	r0, r1
 800c450:	4770      	bx	lr
	...

0800c454 <fiprintf>:
 800c454:	b40e      	push	{r1, r2, r3}
 800c456:	b503      	push	{r0, r1, lr}
 800c458:	4601      	mov	r1, r0
 800c45a:	ab03      	add	r3, sp, #12
 800c45c:	4805      	ldr	r0, [pc, #20]	; (800c474 <fiprintf+0x20>)
 800c45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c462:	6800      	ldr	r0, [r0, #0]
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	f7ff fd03 	bl	800be70 <_vfiprintf_r>
 800c46a:	b002      	add	sp, #8
 800c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c470:	b003      	add	sp, #12
 800c472:	4770      	bx	lr
 800c474:	20000088 	.word	0x20000088

0800c478 <abort>:
 800c478:	b508      	push	{r3, lr}
 800c47a:	2006      	movs	r0, #6
 800c47c:	f000 f82c 	bl	800c4d8 <raise>
 800c480:	2001      	movs	r0, #1
 800c482:	f7f6 fc4f 	bl	8002d24 <_exit>

0800c486 <_raise_r>:
 800c486:	291f      	cmp	r1, #31
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4604      	mov	r4, r0
 800c48c:	460d      	mov	r5, r1
 800c48e:	d904      	bls.n	800c49a <_raise_r+0x14>
 800c490:	2316      	movs	r3, #22
 800c492:	6003      	str	r3, [r0, #0]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	bd38      	pop	{r3, r4, r5, pc}
 800c49a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c49c:	b112      	cbz	r2, 800c4a4 <_raise_r+0x1e>
 800c49e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4a2:	b94b      	cbnz	r3, 800c4b8 <_raise_r+0x32>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 f831 	bl	800c50c <_getpid_r>
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4b4:	f000 b818 	b.w	800c4e8 <_kill_r>
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d00a      	beq.n	800c4d2 <_raise_r+0x4c>
 800c4bc:	1c59      	adds	r1, r3, #1
 800c4be:	d103      	bne.n	800c4c8 <_raise_r+0x42>
 800c4c0:	2316      	movs	r3, #22
 800c4c2:	6003      	str	r3, [r0, #0]
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	e7e7      	b.n	800c498 <_raise_r+0x12>
 800c4c8:	2400      	movs	r4, #0
 800c4ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	4798      	blx	r3
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e7e0      	b.n	800c498 <_raise_r+0x12>
	...

0800c4d8 <raise>:
 800c4d8:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <raise+0xc>)
 800c4da:	4601      	mov	r1, r0
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	f7ff bfd2 	b.w	800c486 <_raise_r>
 800c4e2:	bf00      	nop
 800c4e4:	20000088 	.word	0x20000088

0800c4e8 <_kill_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	4d07      	ldr	r5, [pc, #28]	; (800c508 <_kill_r+0x20>)
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f7f6 fc05 	bl	8002d04 <_kill>
 800c4fa:	1c43      	adds	r3, r0, #1
 800c4fc:	d102      	bne.n	800c504 <_kill_r+0x1c>
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	b103      	cbz	r3, 800c504 <_kill_r+0x1c>
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	bf00      	nop
 800c508:	20000874 	.word	0x20000874

0800c50c <_getpid_r>:
 800c50c:	f7f6 bbf2 	b.w	8002cf4 <_getpid>

0800c510 <_init>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	bf00      	nop
 800c514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c516:	bc08      	pop	{r3}
 800c518:	469e      	mov	lr, r3
 800c51a:	4770      	bx	lr

0800c51c <_fini>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr
