
RobotCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009298  08009298  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a0  080092a0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080092a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000084  0800932c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800932c  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001687c  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2c  00000000  00000000  00036973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  000397a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001044  00000000  00000000  0003ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cfb  00000000  00000000  0003bcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019407  00000000  00000000  000649a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8bbc  00000000  00000000  0007ddae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006018  00000000  00000000  0017696c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fc4 	.word	0x08008fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008fc4 	.word	0x08008fc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <TOF_INIT>:
 * Lösung: Variable TOF_COUNT um eins erhöhen um bei 6 Sensoren 7 I2C Adressen zu generieren, dabei die erste nicht nutzen und auswertnen. Sensoren belgen den Bus auf Device[1-7], Device [0] wird nicht genutzt.
 *
 */

static void TOF_INIT(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
	 uint8_t i;

	RESET_ALL_TOF_SEN();
 8000572:	f000 f97d 	bl	8000870 <RESET_ALL_TOF_SEN>

	  for (i = 0; i < TOF_COUNT; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e06b      	b.n	8000654 <TOF_INIT+0xe8>
	  {
		  SET_TOF_PIN(i, GPIO_PIN_SET);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2101      	movs	r1, #1
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f937 	bl	80007f4 <SET_TOF_PIN>

		  Dev_t i2cAddr = 0x52;		// !!! Wichtig !!! defaultAdress nicht ändern, führt zu I2C Problemen
 8000586:	2352      	movs	r3, #82	; 0x52
 8000588:	80bb      	strh	r3, [r7, #4]
		  device[i]  = (i2cAddr + i*2);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	b29b      	uxth	r3, r3
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b299      	uxth	r1, r3
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	88ba      	ldrh	r2, [r7, #4]
 8000596:	440a      	add	r2, r1
 8000598:	b291      	uxth	r1, r2
 800059a:	4a35      	ldr	r2, [pc, #212]	; (8000670 <TOF_INIT+0x104>)
 800059c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  // Setzen der neuen I2C Adressen und auslesen der Sensor ID (0xEBAA)
		  VL53L4CD_SetI2CAddress(i2cAddr, device[i]);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <TOF_INIT+0x104>)
 80005a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	88bb      	ldrh	r3, [r7, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f007 f99b 	bl	80078ea <VL53L4CD_SetI2CAddress>
		  VL53L4CD_GetSensorId(device[i], &sensor_id[i]);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4a2e      	ldr	r2, [pc, #184]	; (8000670 <TOF_INIT+0x104>)
 80005b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	492c      	ldr	r1, [pc, #176]	; (8000674 <TOF_INIT+0x108>)
 80005c2:	440b      	add	r3, r1
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f007 f9ab 	bl	8007922 <VL53L4CD_GetSensorId>

		  if (device[i] != 0x52)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4a28      	ldr	r2, [pc, #160]	; (8000670 <TOF_INIT+0x104>)
 80005d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d4:	2b52      	cmp	r3, #82	; 0x52
 80005d6:	d010      	beq.n	80005fa <TOF_INIT+0x8e>
		  {
			  printf("Init [ToF: %d]: Device -> %s 	ID: %04lX\n", device[i], TofDevStr[i], (unsigned long)sensor_id[i]);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <TOF_INIT+0x104>)
 80005dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e0:	4618      	mov	r0, r3
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4a24      	ldr	r2, [pc, #144]	; (8000678 <TOF_INIT+0x10c>)
 80005e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4921      	ldr	r1, [pc, #132]	; (8000674 <TOF_INIT+0x108>)
 80005ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005f2:	4601      	mov	r1, r0
 80005f4:	4821      	ldr	r0, [pc, #132]	; (800067c <TOF_INIT+0x110>)
 80005f6:	f007 fdd9 	bl	80081ac <iprintf>
		  }

		  if(status[i] || (sensor_id[i] != 0xEBAA))
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4a20      	ldr	r2, [pc, #128]	; (8000680 <TOF_INIT+0x114>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d107      	bne.n	8000614 <TOF_INIT+0xa8>
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <TOF_INIT+0x108>)
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060c:	f64e 32aa 	movw	r2, #60330	; 0xebaa
 8000610:	4293      	cmp	r3, r2
 8000612:	d002      	beq.n	800061a <TOF_INIT+0xae>
		  	{
		  		printf("VL53L4CD not detected at requested address\n");
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <TOF_INIT+0x118>)
 8000616:	f007 fe37 	bl	8008288 <puts>
		  	}

		  //Sensor initialisieren
		  if (device[i] != 0x52)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <TOF_INIT+0x104>)
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	2b52      	cmp	r3, #82	; 0x52
 8000624:	d00b      	beq.n	800063e <TOF_INIT+0xd2>
		  		  {
			  	  	  status[i] = VL53L4CD_SensorInit(device[i]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <TOF_INIT+0x104>)
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	79fc      	ldrb	r4, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f007 f98f 	bl	8007954 <VL53L4CD_SensorInit>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <TOF_INIT+0x114>)
 800063c:	551a      	strb	r2, [r3, r4]
		  		  }

		  	if(status[i])
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <TOF_INIT+0x114>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <TOF_INIT+0xe2>
		  	{
		  		printf("VL53L4CD ULD Loading failed\n");
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <TOF_INIT+0x11c>)
 800064a:	f007 fe1d 	bl	8008288 <puts>
	  for (i = 0; i < TOF_COUNT; i++)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	3301      	adds	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d990      	bls.n	800057c <TOF_INIT+0x10>
		  	}
	  	}

	  	printf("\n");
 800065a:	200a      	movs	r0, #10
 800065c:	f007 fdb8 	bl	80081d0 <putchar>
	  	printf("VL53L4CD: Ultra Light Driver ready !\n");
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <TOF_INIT+0x120>)
 8000662:	f007 fe11 	bl	8008288 <puts>
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	bf00      	nop
 8000670:	200000a0 	.word	0x200000a0
 8000674:	200000c0 	.word	0x200000c0
 8000678:	20000000 	.word	0x20000000
 800067c:	08009028 	.word	0x08009028
 8000680:	200000b0 	.word	0x200000b0
 8000684:	08009054 	.word	0x08009054
 8000688:	08009080 	.word	0x08009080
 800068c:	0800909c 	.word	0x0800909c

08000690 <GET_TOF_DATA>:
/**
 * Auswertung der TOF-Sensoren
 */

static void GET_TOF_DATA(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	int delayTOF = 10;
 8000696:	230a      	movs	r3, #10
 8000698:	607b      	str	r3, [r7, #4]
	printf("\n");
 800069a:	200a      	movs	r0, #10
 800069c:	f007 fd98 	bl	80081d0 <putchar>

	for(int i = 1; i < TOF_COUNT; i++)		// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor vorhanden
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e08e      	b.n	80007c4 <GET_TOF_DATA+0x134>
	{

		status[i] = VL53L4CD_StartRanging(device[i]);
 80006a6:	4a4c      	ldr	r2, [pc, #304]	; (80007d8 <GET_TOF_DATA+0x148>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fa2b 	bl	8007b0a <VL53L4CD_StartRanging>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4619      	mov	r1, r3
 80006b8:	4a48      	ldr	r2, [pc, #288]	; (80007dc <GET_TOF_DATA+0x14c>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]

		if(status[i] == 0)
 80006c2:	4a46      	ldr	r2, [pc, #280]	; (80007dc <GET_TOF_DATA+0x14c>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d165      	bne.n	800079a <GET_TOF_DATA+0x10a>
		{
			uint8_t messungen = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]
			// Jeden Messung zwei mal um Genauigkeit zu erhöhen
			while(messungen < 2)
 80006d2:	e05f      	b.n	8000794 <GET_TOF_DATA+0x104>
			{
				//Polling um zu pruefen ob eine neue Messung abgeschlossen ist
					HAL_Delay(delayTOF);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fbf8 	bl	8001ecc <HAL_Delay>
					status[i] = VL53L4CD_CheckForDataReady(device[i], &isReady[i]);
 80006dc:	4a3e      	ldr	r2, [pc, #248]	; (80007d8 <GET_TOF_DATA+0x148>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	493e      	ldr	r1, [pc, #248]	; (80007e0 <GET_TOF_DATA+0x150>)
 80006e8:	440b      	add	r3, r1
 80006ea:	4619      	mov	r1, r3
 80006ec:	4610      	mov	r0, r2
 80006ee:	f007 fa55 	bl	8007b9c <VL53L4CD_CheckForDataReady>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4619      	mov	r1, r3
 80006f6:	4a39      	ldr	r2, [pc, #228]	; (80007dc <GET_TOF_DATA+0x14c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	460a      	mov	r2, r1
 80006fe:	701a      	strb	r2, [r3, #0]

					if(isReady[i])
 8000700:	4a37      	ldr	r2, [pc, #220]	; (80007e0 <GET_TOF_DATA+0x150>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d037      	beq.n	800077c <GET_TOF_DATA+0xec>
					{
						HAL_Delay(delayTOF);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fbdc 	bl	8001ecc <HAL_Delay>

						//Hardwareinterrupt des Sensors löschen, sonst kann keine weitere Messung erfolgen
						VL53L4CD_ClearInterrupt(device[i]);
 8000714:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <GET_TOF_DATA+0x148>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071c:	4618      	mov	r0, r3
 800071e:	f007 f9dd 	bl	8007adc <VL53L4CD_ClearInterrupt>

						//Entfernung auslesen
						//Die Entfernung wird immer direkt nach dem auslesen wieder gespeichert!
						HAL_Delay(delayTOF);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fbd1 	bl	8001ecc <HAL_Delay>
						VL53L4CD_GetResult(device[i], &result[i]);
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <GET_TOF_DATA+0x148>)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	492b      	ldr	r1, [pc, #172]	; (80007e4 <GET_TOF_DATA+0x154>)
 8000738:	440b      	add	r3, r1
 800073a:	4619      	mov	r1, r3
 800073c:	4610      	mov	r0, r2
 800073e:	f007 fb8f 	bl	8007e60 <VL53L4CD_GetResult>
						if(result[i].range_status == 0)
 8000742:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <GET_TOF_DATA+0x154>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d115      	bne.n	800077c <GET_TOF_DATA+0xec>
						{
							distance[i] = result[i].distance_mm;
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <GET_TOF_DATA+0x154>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	4413      	add	r3, r2
 8000758:	3302      	adds	r3, #2
 800075a:	8819      	ldrh	r1, [r3, #0]
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <GET_TOF_DATA+0x158>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							printf("%s	-> Distance = %5d mm\n",TofDevStr[i], distance[i]);
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <GET_TOF_DATA+0x15c>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <GET_TOF_DATA+0x158>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000774:	461a      	mov	r2, r3
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <GET_TOF_DATA+0x160>)
 8000778:	f007 fd18 	bl	80081ac <iprintf>
						}
					}
					messungen++;
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	3301      	adds	r3, #1
 8000780:	72fb      	strb	r3, [r7, #11]
					WaitMs(device[i], delayTOF);
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <GET_TOF_DATA+0x148>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 feb8 	bl	8001504 <WaitMs>
			while(messungen < 2)
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d99c      	bls.n	80006d4 <GET_TOF_DATA+0x44>
			}
		}
		HAL_Delay(delayTOF);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fb95 	bl	8001ecc <HAL_Delay>
		status[i] = VL53L4CD_StopRanging(device[i]);
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <GET_TOF_DATA+0x148>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 f9df 	bl	8007b6e <VL53L4CD_StopRanging>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <GET_TOF_DATA+0x14c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < TOF_COUNT; i++)		// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor vorhanden
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	f67f af6d 	bls.w	80006a6 <GET_TOF_DATA+0x16>
	}
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000a0 	.word	0x200000a0
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	200000d0 	.word	0x200000d0
 80007e8:	20000140 	.word	0x20000140
 80007ec:	20000000 	.word	0x20000000
 80007f0:	080090c4 	.word	0x080090c4

080007f4 <SET_TOF_PIN>:
 *	PIN Set der ToF Sensoren (jeden Sonsor einzeln)
 *	Set der Pins über Register (ohne HAL-Funktion)
 */

static void SET_TOF_PIN(uint8_t device, GPIO_PinState pin_state)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
	switch (device)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d828      	bhi.n	800085c <SET_TOF_PIN+0x68>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <SET_TOF_PIN+0x1c>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000829 	.word	0x08000829
 8000814:	08000831 	.word	0x08000831
 8000818:	08000839 	.word	0x08000839
 800081c:	08000841 	.word	0x08000841
 8000820:	08000849 	.word	0x08000849
 8000824:	08000853 	.word	0x08000853
	{
		case 0:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_4;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <SET_TOF_PIN+0x78>)
 800082a:	2210      	movs	r2, #16
 800082c:	619a      	str	r2, [r3, #24]
			break;
 800082e:	e016      	b.n	800085e <SET_TOF_PIN+0x6a>
		case 1:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_5;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <SET_TOF_PIN+0x78>)
 8000832:	2220      	movs	r2, #32
 8000834:	619a      	str	r2, [r3, #24]
			break;
 8000836:	e012      	b.n	800085e <SET_TOF_PIN+0x6a>
		case 2:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_6;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <SET_TOF_PIN+0x78>)
 800083a:	2240      	movs	r2, #64	; 0x40
 800083c:	619a      	str	r2, [r3, #24]
			break;
 800083e:	e00e      	b.n	800085e <SET_TOF_PIN+0x6a>
		case 3:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_7;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <SET_TOF_PIN+0x78>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	619a      	str	r2, [r3, #24]
			break;
 8000846:	e00a      	b.n	800085e <SET_TOF_PIN+0x6a>
		case 4:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_8;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <SET_TOF_PIN+0x78>)
 800084a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084e:	619a      	str	r2, [r3, #24]
			break;
 8000850:	e005      	b.n	800085e <SET_TOF_PIN+0x6a>
		case 5:
			GPIOC->BSRR = (uint32_t)GPIO_PIN_9;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <SET_TOF_PIN+0x78>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
			break;
 800085a:	e000      	b.n	800085e <SET_TOF_PIN+0x6a>

		default:
			break;
 800085c:	bf00      	nop
	}
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	48000800 	.word	0x48000800

08000870 <RESET_ALL_TOF_SEN>:
 *	PIN Reset aller ToF Sensoren (GPIOC)
 *	Reset der Pins über Register (ohne HAL-Funktion)
 */

static void RESET_ALL_TOF_SEN(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	  GPIOC->BRR = (uint32_t)GPIO_PIN_4;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 8000876:	2210      	movs	r2, #16
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_5;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 800087c:	2220      	movs	r2, #32
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_6;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 8000882:	2240      	movs	r2, #64	; 0x40
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_7;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_8;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 800088e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_9;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <RESET_ALL_TOF_SEN+0x38>)
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(2);
 800089c:	2002      	movs	r0, #2
 800089e:	f001 fb15 	bl	8001ecc <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000800 	.word	0x48000800

080008ac <TOGGLE_PIN>:
 *	Toggelt Pin zwischen HIGH-LOW
 *
 */

static void TOGGLE_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]

	  /* Check the parameters */
	  assert_param(IS_GPIO_PIN(GPIO_Pin));

	  /* get current Output Data Register value */
	  odr = GPIOx->ODR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	60fb      	str	r3, [r7, #12]

	  /* Set selected pins that were at low level, and reset ones that were high */
	  GPIOx->BSRR = ((odr & GPIO_Pin) << 16U) | (~odr & GPIO_Pin);
 80008be:	887a      	ldrh	r2, [r7, #2]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4013      	ands	r3, r2
 80008c4:	041a      	lsls	r2, r3, #16
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	43d9      	mvns	r1, r3
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	400b      	ands	r3, r1
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	619a      	str	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SET_OFFSET>:
 * Falls eine Glasabdeckung für die Sensoren benutzt wird, muss zusätzlich eine Crosstalk kalibrierung erfolgen. Glas reflektiert eventuell Licht, was zu falschen Messungen führen kann
 *
 */

static void SET_OFFSET(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	int16_t offsetvalue;

	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 80008e6:	2301      	movs	r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	e03b      	b.n	8000964 <SET_OFFSET+0x84>
	{
		switch (i) /* Offsetparameter in mm für jeden Sensor */
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	d827      	bhi.n	8000944 <SET_OFFSET+0x64>
 80008f4:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <SET_OFFSET+0x1c>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	08000915 	.word	0x08000915
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000925 	.word	0x08000925
 8000908:	0800092d 	.word	0x0800092d
 800090c:	08000935 	.word	0x08000935
 8000910:	0800093d 	.word	0x0800093d
		{
			case 1:	//FRONT_CENTER	(PC04)
				offsetvalue = -10;
 8000914:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8000918:	80fb      	strh	r3, [r7, #6]
				break;
 800091a:	e013      	b.n	8000944 <SET_OFFSET+0x64>
			case 2:	//FRONT_LEFT	(PC05)
				offsetvalue = -12;
 800091c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8000920:	80fb      	strh	r3, [r7, #6]
				break;
 8000922:	e00f      	b.n	8000944 <SET_OFFSET+0x64>
			case 3:	//FRONT_RIGHT	(PC06)
				offsetvalue = -10;
 8000924:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8000928:	80fb      	strh	r3, [r7, #6]
				break;
 800092a:	e00b      	b.n	8000944 <SET_OFFSET+0x64>
			case 4:	//BACK_LEFT		(PC07)
				offsetvalue = -10;
 800092c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8000930:	80fb      	strh	r3, [r7, #6]
				break;
 8000932:	e007      	b.n	8000944 <SET_OFFSET+0x64>
			case 5:	//BACK_RIGHT	(PC08)
				offsetvalue = -8;
 8000934:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000938:	80fb      	strh	r3, [r7, #6]
				break;
 800093a:	e003      	b.n	8000944 <SET_OFFSET+0x64>
			case 6:	//BACK_CENTER	(PC09)
				offsetvalue = -15;
 800093c:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 8000940:	80fb      	strh	r3, [r7, #6]
				break;
 8000942:	bf00      	nop
		}

		VL53L4CD_SetOffset(device[i], offsetvalue);
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <SET_OFFSET+0x94>)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f007 fb34 	bl	8007fc0 <VL53L4CD_SetOffset>
		HAL_Delay(2);
 8000958:	2002      	movs	r0, #2
 800095a:	f001 fab7 	bl	8001ecc <HAL_Delay>
	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b06      	cmp	r3, #6
 8000968:	d9c0      	bls.n	80008ec <SET_OFFSET+0xc>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000a0 	.word	0x200000a0

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f001 fa29 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f891 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 fb05 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 800098a:	f000 facd 	bl	8000f28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800098e:	f000 fa9b 	bl	8000ec8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000992:	f000 f8db 	bl	8000b4c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000996:	f000 f973 	bl	8000c80 <MX_TIM2_Init>
  MX_TIM1_Init();
 800099a:	f000 f917 	bl	8000bcc <MX_TIM1_Init>
  MX_TIM3_Init();
 800099e:	f000 f9e7 	bl	8000d70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80009a2:	f000 fa61 	bl	8000e68 <MX_USART1_UART_Init>
  TOF_INIT();
 80009a6:	f7ff fde1 	bl	800056c <TOF_INIT>
  /* USER CODE BEGIN 2 */

  SET_OFFSET();
 80009aa:	f7ff ff99 	bl	80008e0 <SET_OFFSET>

  //UART
//  uint8_t tx_buff[10]={11,12,13,14,15,16,17,18,19};
  uint8_t rx_buff[10]={0};
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	809a      	strh	r2, [r3, #4]
//  uint8_t rx_buff2[10]={0};
  state = PARK;
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <main+0x110>)
 80009be:	2202      	movs	r2, #2
 80009c0:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart1,rx_buff,10);
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	220a      	movs	r2, #10
 80009c6:	4619      	mov	r1, r3
 80009c8:	4830      	ldr	r0, [pc, #192]	; (8000a8c <main+0x114>)
 80009ca:	f005 fcf7 	bl	80063bc <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart2,"System Startup from Reset State\n",32);
 80009ce:	2220      	movs	r2, #32
 80009d0:	492f      	ldr	r1, [pc, #188]	; (8000a90 <main+0x118>)
 80009d2:	4830      	ldr	r0, [pc, #192]	; (8000a94 <main+0x11c>)
 80009d4:	f005 fc76 	bl	80062c4 <HAL_UART_Transmit_DMA>
  int UART_Tick = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]


  //PWM Servo Lenkung
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 80009dc:	2100      	movs	r1, #0
 80009de:	482e      	ldr	r0, [pc, #184]	; (8000a98 <main+0x120>)
 80009e0:	f004 f976 	bl	8004cd0 <HAL_TIM_PWM_Start>
  rx_buff[8]=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	733b      	strb	r3, [r7, #12]
  //50Hz==20ms Pin Linker Block rechts 6.von unten (PA0)

  //PWM Motor Antrieb
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 80009e8:	2100      	movs	r1, #0
 80009ea:	482c      	ldr	r0, [pc, #176]	; (8000a9c <main+0x124>)
 80009ec:	f004 f970 	bl	8004cd0 <HAL_TIM_PWM_Start>
  //PA6

  //Encoder
  uint32_t timer_counter=0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);
 80009f4:	2100      	movs	r1, #0
 80009f6:	482a      	ldr	r0, [pc, #168]	; (8000aa0 <main+0x128>)
 80009f8:	f004 fb16 	bl	8005028 <HAL_TIM_Encoder_Start>

  //Hier wird das Neutralsignal für den Fahrtregler ausgegeben.
  SET_PWM_MOTOR(75); 	// Set zero position of motor driver (TIM3 PWM Motor)
 80009fc:	204b      	movs	r0, #75	; 0x4b
 80009fe:	f000 fb4d 	bl	800109c <SET_PWM_MOTOR>
  HAL_Delay(2000);		// Wait for motor driver to get zero position
 8000a02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a06:	f001 fa61 	bl	8001ecc <HAL_Delay>

    /* USER CODE BEGIN 3 */

//	  state = PARK;

	  switch (state) {
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <main+0x110>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d032      	beq.n	8000a78 <main+0x100>
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	dc33      	bgt.n	8000a7e <main+0x106>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <main+0xa8>
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d007      	beq.n	8000a2e <main+0xb6>
		case PARK:
			START_PARKING();
			break;

		default:
			break;
 8000a1e:	e02e      	b.n	8000a7e <main+0x106>
			SET_PWM_LENKUNG(75); //Set Duty Cycle of TIM2 PWM Lenkung
 8000a20:	204b      	movs	r0, #75	; 0x4b
 8000a22:	f000 fb4d 	bl	80010c0 <SET_PWM_LENKUNG>
			SET_PWM_MOTOR(75); //Set Duty Cycle of TIM3 PWM Motor
 8000a26:	204b      	movs	r0, #75	; 0x4b
 8000a28:	f000 fb38 	bl	800109c <SET_PWM_MOTOR>
			break;
 8000a2c:	e02a      	b.n	8000a84 <main+0x10c>
			HAL_UART_Receive_DMA(&huart1,rx_buff,10); //Achtung Uart1 bei L476 TX(D8/PA9) RX(D2/PA10) nach beschriftung entsprechen diese Pins Uart0!
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	220a      	movs	r2, #10
 8000a32:	4619      	mov	r1, r3
 8000a34:	4815      	ldr	r0, [pc, #84]	; (8000a8c <main+0x114>)
 8000a36:	f005 fcc1 	bl	80063bc <HAL_UART_Receive_DMA>
				 if((SysTickGetTickcount()-UART_Tick)>=1000)
 8000a3a:	f001 f8db 	bl	8001bf4 <SysTickGetTickcount>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a48:	db1b      	blt.n	8000a82 <main+0x10a>
					timer_counter=TIM1->CNT;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <main+0x12c>)
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	613b      	str	r3, [r7, #16]
					UART_Tick=SysTickGetTickcount();
 8000a50:	f001 f8d0 	bl	8001bf4 <SysTickGetTickcount>
 8000a54:	6178      	str	r0, [r7, #20]
					if(rx_buff[9]==88){TOGGLE_PIN(GPIOA,GPIO_PIN_5);}
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	2b58      	cmp	r3, #88	; 0x58
 8000a5a:	d104      	bne.n	8000a66 <main+0xee>
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f7ff ff23 	bl	80008ac <TOGGLE_PIN>
					SET_PWM_LENKUNG(rx_buff[3]); //Set Duty Cycle of TIM2 PWM Lenkung
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fb29 	bl	80010c0 <SET_PWM_LENKUNG>
					SET_PWM_MOTOR(rx_buff[4]); //Set Duty Cycle of TIM3 PWM Motor
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fb13 	bl	800109c <SET_PWM_MOTOR>
			break;
 8000a76:	e004      	b.n	8000a82 <main+0x10a>
			START_PARKING();
 8000a78:	f000 fb34 	bl	80010e4 <START_PARKING>
			break;
 8000a7c:	e002      	b.n	8000a84 <main+0x10c>
			break;
 8000a7e:	bf00      	nop
 8000a80:	e7c3      	b.n	8000a0a <main+0x92>
			break;
 8000a82:	bf00      	nop
	  switch (state) {
 8000a84:	e7c1      	b.n	8000a0a <main+0x92>
 8000a86:	bf00      	nop
 8000a88:	200004b8 	.word	0x200004b8
 8000a8c:	20000288 	.word	0x20000288
 8000a90:	080090e0 	.word	0x080090e0
 8000a94:	20000310 	.word	0x20000310
 8000a98:	200001f0 	.word	0x200001f0
 8000a9c:	2000023c 	.word	0x2000023c
 8000aa0:	200001a4 	.word	0x200001a4
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fcc6 	bl	8008448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ace:	f002 fd35 	bl	800353c <HAL_PWREx_ControlVoltageScaling>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad8:	f000 fbdc 	bl	8001294 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 45;
 8000af6:	232d      	movs	r3, #45	; 0x2d
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000afa:	2307      	movs	r3, #7
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000b02:	2304      	movs	r3, #4
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fd6c 	bl	80035e8 <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b16:	f000 fbbd 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2102      	movs	r1, #2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 f933 	bl	8003da0 <HAL_RCC_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b40:	f000 fba8 	bl	8001294 <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3758      	adds	r7, #88	; 0x58
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_I2C1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200A26;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b88:	f001 fef6 	bl	8002978 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f000 fb7f 	bl	8001294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b9a:	f002 fc29 	bl	80033f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 fb76 	bl	8001294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000bac:	f002 fc6b 	bl	8003486 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 fb6d 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000150 	.word	0x20000150
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	00200a26 	.word	0x00200a26

08000bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2224      	movs	r2, #36	; 0x24
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 fc34 	bl	8008448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000bec:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_TIM1_Init+0xb0>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c24:	230a      	movs	r3, #10
 8000c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000c40:	f004 f94c 	bl	8004edc <HAL_TIM_Encoder_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 fb23 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_TIM1_Init+0xac>)
 8000c60:	f005 f9b2 	bl	8005fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000c6a:	f000 fb13 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001a4 	.word	0x200001a4
 8000c7c:	40012c00 	.word	0x40012c00

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cbc:	f240 3283 	movw	r2, #899	; 0x383
 8000cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cdc:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cde:	f003 ff3f 	bl	8004b60 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ce8:	f000 fad4 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481c      	ldr	r0, [pc, #112]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000cfa:	f004 fc39 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d04:	f000 fac6 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d08:	4818      	ldr	r0, [pc, #96]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000d0a:	f003 ff80 	bl	8004c0e <HAL_TIM_PWM_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d14:	f000 fabe 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000d28:	f005 f94e 	bl	8005fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d32:	f000 faaf 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d36:	2360      	movs	r3, #96	; 0x60
 8000d38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000d4e:	f004 fafb 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d58:	f000 fa9c 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <MX_TIM2_Init+0xec>)
 8000d5e:	f000 fceb 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8000d62:	bf00      	nop
 8000d64:	3738      	adds	r7, #56	; 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001f0 	.word	0x200001f0

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da2:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000da4:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <MX_TIM3_Init+0xf4>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000daa:	f240 3283 	movw	r2, #899	; 0x383
 8000dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000dcc:	f003 fec8 	bl	8004b60 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000dd6:	f000 fa5d 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4619      	mov	r1, r3
 8000de6:	481e      	ldr	r0, [pc, #120]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000de8:	f004 fbc2 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000df2:	f000 fa4f 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000df8:	f003 ff09 	bl	8004c0e <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e02:	f000 fa47 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000e16:	f005 f8d7 	bl	8005fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e20:	f000 fa38 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e24:	2360      	movs	r3, #96	; 0x60
 8000e26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000e3c:	f004 fa84 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e46:	f000 fa25 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);					///*******MODIFIED
 8000e4a:	213c      	movs	r1, #60	; 0x3c
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000e4e:	f004 f8eb 	bl	8005028 <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM3_Init+0xf0>)
 8000e54:	f000 fc70 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000023c 	.word	0x2000023c
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <MX_USART1_UART_Init+0x5c>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART1_UART_Init+0x58>)
 8000eac:	f005 f932 	bl	8006114 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eb6:	f000 f9ed 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000288 	.word	0x20000288
 8000ec4:	40013800 	.word	0x40013800

08000ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <MX_USART2_UART_Init+0x5c>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USART2_UART_Init+0x58>)
 8000f0c:	f005 f902 	bl	8006114 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f16:	f000 f9bd 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000310 	.word	0x20000310
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_DMA_Init+0x68>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <MX_DMA_Init+0x68>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6493      	str	r3, [r2, #72]	; 0x48
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_DMA_Init+0x68>)
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200e      	movs	r0, #14
 8000f4c:	f001 f8bd 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f50:	200e      	movs	r0, #14
 8000f52:	f001 f8d6 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f001 f8b5 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f60:	200f      	movs	r0, #15
 8000f62:	f001 f8ce 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	f001 f8ad 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f001 f8c6 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2011      	movs	r0, #17
 8000f7c:	f001 f8a5 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f80:	2011      	movs	r0, #17
 8000f82:	f001 f8be 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a27      	ldr	r2, [pc, #156]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <MX_GPIO_Init+0xe8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_GPIO_Init+0xe8>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <MX_GPIO_Init+0xe8>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_GPIO_Init+0xe8>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  LD2_GPIO_Port->BRR = (uint32_t)LD2_Pin;
 800100a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800100e:	2220      	movs	r2, #32
 8001010:	629a      	str	r2, [r3, #40]	; 0x28

  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOC, TOF_FRONT_Pin|TOF_FRONT_LEFT_Pin|TOF_FRONT_RIGHT_Pin|TOFBACK_LEFT_Pin
//                          |TOF_BACK_RIGHT_Pin|TOF_BACK_Pin, GPIO_PIN_RESET);
  GPIOC->BRR = (uint32_t)TOF_FRONT_Pin|TOF_FRONT_LEFT_Pin|TOF_FRONT_RIGHT_Pin|TOFBACK_LEFT_Pin
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_GPIO_Init+0xec>)
 8001014:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
          |TOF_BACK_RIGHT_Pin|TOF_BACK_Pin;

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <MX_GPIO_Init+0xec>)
 8001032:	f001 faf7 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001036:	2320      	movs	r3, #32
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 fae8 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_FRONT_Pin TOF_FRONT_LEFT_Pin TOF_FRONT_RIGHT_Pin TOFBACK_LEFT_Pin
                           TOF_BACK_RIGHT_Pin TOF_BACK_Pin */
  GPIO_InitStruct.Pin = TOF_FRONT_Pin|TOF_FRONT_LEFT_Pin|TOF_FRONT_RIGHT_Pin|TOFBACK_LEFT_Pin
 8001054:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001058:	617b      	str	r3, [r7, #20]
                          |TOF_BACK_RIGHT_Pin|TOF_BACK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_GPIO_Init+0xec>)
 800106e:	f001 fad9 	bl	8002624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	48000800 	.word	0x48000800

08001084 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){__NOP();} //check if all Data is received
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SET_PWM_MOTOR>:
 * 75...100 Entspricht 0 bis 100% Geschwindigkeit
 * PWM wird erzeugt mit TIM3
 */

static void SET_PWM_MOTOR(uint8_t value)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]

	htim3.Instance->CCR1 = value;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SET_PWM_MOTOR+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000023c 	.word	0x2000023c

080010c0 <SET_PWM_LENKUNG>:
 *  rechts max = 50, links max = 100
 *  PWM wird erzeugt mit TIM2
 */

static void SET_PWM_LENKUNG(uint8_t value)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	htim2.Instance->CCR1 = value;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SET_PWM_LENKUNG+0x20>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200001f0 	.word	0x200001f0

080010e4 <START_PARKING>:
 * Alternative Idee: zeit zum Einparken fest einspeichern
 *
 * distance[1] = FRONT_CENTER, distance[2] = FRONT_LEFT, distance[3] = FRONT_RIGHT, distance[4] = BACK_LEFT, distance[5] = BACK_RIGHT, distance[6] = BACK_CENTER
 */
static void START_PARKING(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
	int TICK_S;
	int TICK_E;
	int FAHRZEIT;
	int VELO = 0.139;	// Geschwindigkeit [mm/ms] = 0,5 km/h = PWM(80)
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	int PARKLUECKE;
	int GRENZWERT = 150U;	//Grenzwert zur Lückenerkennung
 80010ee:	2396      	movs	r3, #150	; 0x96
 80010f0:	60fb      	str	r3, [r7, #12]

	SET_PWM_MOTOR(85);
 80010f2:	2055      	movs	r0, #85	; 0x55
 80010f4:	f7ff ffd2 	bl	800109c <SET_PWM_MOTOR>

	while(1)
	{
	//Fahren bis Lücke erkannt wird
		while(distance[2] < GRENZWERT)
 80010f8:	e010      	b.n	800111c <START_PARKING+0x38>
		{

			GET_TOF_DATA();
 80010fa:	f7ff fac9 	bl	8000690 <GET_TOF_DATA>

			if (distance[2] >= GRENZWERT)
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <START_PARKING+0x170>)
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4293      	cmp	r3, r2
 8001108:	dc08      	bgt.n	800111c <START_PARKING+0x38>
			{
				TICK_S = SysTickGetTickcount();
 800110a:	f000 fd73 	bl	8001bf4 <SysTickGetTickcount>
 800110e:	6178      	str	r0, [r7, #20]
//				printf("TICK: %d\n", TICK_S);
				printf("\n");
 8001110:	200a      	movs	r0, #10
 8001112:	f007 f85d 	bl	80081d0 <putchar>
				printf("-> Beginn der Parkluecke <-\n");
 8001116:	4850      	ldr	r0, [pc, #320]	; (8001258 <START_PARKING+0x174>)
 8001118:	f007 f8b6 	bl	8008288 <puts>
		while(distance[2] < GRENZWERT)
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <START_PARKING+0x170>)
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	461a      	mov	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4293      	cmp	r3, r2
 8001126:	dce8      	bgt.n	80010fa <START_PARKING+0x16>
			}

		}

		//Langsamer fahren,  Encoder für Auswertung
		SET_PWM_MOTOR(80);
 8001128:	2050      	movs	r0, #80	; 0x50
 800112a:	f7ff ffb7 	bl	800109c <SET_PWM_MOTOR>
//		HAL_Delay(1000);

	//Fahren bis Lücke Zuende ist
		while(distance[2] > GRENZWERT)
 800112e:	e037      	b.n	80011a0 <START_PARKING+0xbc>
		{
			GET_TOF_DATA();
 8001130:	f7ff faae 	bl	8000690 <GET_TOF_DATA>

			if (distance[2] <= GRENZWERT)
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <START_PARKING+0x170>)
 8001136:	889b      	ldrh	r3, [r3, #4]
 8001138:	461a      	mov	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4293      	cmp	r3, r2
 800113e:	db2f      	blt.n	80011a0 <START_PARKING+0xbc>
			{

				printf("\n");
 8001140:	200a      	movs	r0, #10
 8001142:	f007 f845 	bl	80081d0 <putchar>
				printf("-> Ende der Parkluecke <-\n");
 8001146:	4845      	ldr	r0, [pc, #276]	; (800125c <START_PARKING+0x178>)
 8001148:	f007 f89e 	bl	8008288 <puts>

				TICK_E = SysTickGetTickcount();
 800114c:	f000 fd52 	bl	8001bf4 <SysTickGetTickcount>
 8001150:	60b8      	str	r0, [r7, #8]
				FAHRZEIT = (TICK_E - TICK_S);
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	607b      	str	r3, [r7, #4]
				printf("Fahrtzeit bis Parklueckenende: %d ms\n", FAHRZEIT);
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4840      	ldr	r0, [pc, #256]	; (8001260 <START_PARKING+0x17c>)
 800115e:	f007 f825 	bl	80081ac <iprintf>

				PARKLUECKE = VELO * FAHRZEIT;		//Berechnung der Parklückenbreite
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	603b      	str	r3, [r7, #0]
				printf("Breite der Parkluecke: %d mm\n", PARKLUECKE);
 800116c:	6839      	ldr	r1, [r7, #0]
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <START_PARKING+0x180>)
 8001170:	f007 f81c 	bl	80081ac <iprintf>

				while(distance[4] > GRENZWERT)
 8001174:	e00e      	b.n	8001194 <START_PARKING+0xb0>
				{
					GET_TOF_DATA();
 8001176:	f7ff fa8b 	bl	8000690 <GET_TOF_DATA>

					if (distance[4] <= GRENZWERT)
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <START_PARKING+0x170>)
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4293      	cmp	r3, r2
 8001184:	db06      	blt.n	8001194 <START_PARKING+0xb0>
					{
						SET_PWM_MOTOR(75);	// Stehen bleiben
 8001186:	204b      	movs	r0, #75	; 0x4b
 8001188:	f7ff ff88 	bl	800109c <SET_PWM_MOTOR>
						printf("Auto in Position fuer Parkvorgang!\n");
 800118c:	4836      	ldr	r0, [pc, #216]	; (8001268 <START_PARKING+0x184>)
 800118e:	f007 f87b 	bl	8008288 <puts>
						break;
 8001192:	e005      	b.n	80011a0 <START_PARKING+0xbc>
				while(distance[4] > GRENZWERT)
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <START_PARKING+0x170>)
 8001196:	891b      	ldrh	r3, [r3, #8]
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4293      	cmp	r3, r2
 800119e:	dbea      	blt.n	8001176 <START_PARKING+0x92>
		while(distance[2] > GRENZWERT)
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <START_PARKING+0x170>)
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	dbc1      	blt.n	8001130 <START_PARKING+0x4c>
			}

		}

		//Rückwärts und voll links einlenken
		SET_PWM_LENKUNG(100);
 80011ac:	2064      	movs	r0, #100	; 0x64
 80011ae:	f7ff ff87 	bl	80010c0 <SET_PWM_LENKUNG>
		HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b6:	f000 fe89 	bl	8001ecc <HAL_Delay>
//		SET_PWM_MOTOR(70);		//Rückwärts??


		//Rückwärts bis BACK_CENTER Mindestabstand erkannt
		while(distance[6] >= 80U)
 80011ba:	e02c      	b.n	8001216 <START_PARKING+0x132>
		{
			GET_TOF_DATA();
 80011bc:	f7ff fa68 	bl	8000690 <GET_TOF_DATA>

			if (distance[6] <= 80U)
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <START_PARKING+0x170>)
 80011c2:	899b      	ldrh	r3, [r3, #12]
 80011c4:	2b50      	cmp	r3, #80	; 0x50
 80011c6:	d826      	bhi.n	8001216 <START_PARKING+0x132>
			{
				SET_PWM_MOTOR(75);
 80011c8:	204b      	movs	r0, #75	; 0x4b
 80011ca:	f7ff ff67 	bl	800109c <SET_PWM_MOTOR>
				SET_PWM_LENKUNG(50);	//Lenkung voll rechts einschalgen
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f7ff ff76 	bl	80010c0 <SET_PWM_LENKUNG>
				HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f000 fe78 	bl	8001ecc <HAL_Delay>
//				SET_PWM_MOTOR(70);		//Rückwärts??

				//Rückwärts bis Auto wieder paralell ist
				while((distance[2] & distance[4]) >= 50U)
 80011dc:	e013      	b.n	8001206 <START_PARKING+0x122>
				{
					GET_TOF_DATA();
 80011de:	f7ff fa57 	bl	8000690 <GET_TOF_DATA>

					if((distance[2] & distance[4]) <= 50U)
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <START_PARKING+0x170>)
 80011e4:	889a      	ldrh	r2, [r3, #4]
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <START_PARKING+0x170>)
 80011e8:	891b      	ldrh	r3, [r3, #8]
 80011ea:	4013      	ands	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2b32      	cmp	r3, #50	; 0x32
 80011f0:	d809      	bhi.n	8001206 <START_PARKING+0x122>
					{
						SET_PWM_MOTOR(75);
 80011f2:	204b      	movs	r0, #75	; 0x4b
 80011f4:	f7ff ff52 	bl	800109c <SET_PWM_MOTOR>
						SET_PWM_LENKUNG(75);
 80011f8:	204b      	movs	r0, #75	; 0x4b
 80011fa:	f7ff ff61 	bl	80010c0 <SET_PWM_LENKUNG>
						HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001202:	f000 fe63 	bl	8001ecc <HAL_Delay>
				while((distance[2] & distance[4]) >= 50U)
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <START_PARKING+0x170>)
 8001208:	889a      	ldrh	r2, [r3, #4]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <START_PARKING+0x170>)
 800120c:	891b      	ldrh	r3, [r3, #8]
 800120e:	4013      	ands	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	2b31      	cmp	r3, #49	; 0x31
 8001214:	d8e3      	bhi.n	80011de <START_PARKING+0xfa>
		while(distance[6] >= 80U)
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <START_PARKING+0x170>)
 8001218:	899b      	ldrh	r3, [r3, #12]
 800121a:	2b4f      	cmp	r3, #79	; 0x4f
 800121c:	d8ce      	bhi.n	80011bc <START_PARKING+0xd8>
				}

			}
		}

		SET_PWM_MOTOR(80);
 800121e:	2050      	movs	r0, #80	; 0x50
 8001220:	f7ff ff3c 	bl	800109c <SET_PWM_MOTOR>

		//Geradeaus bis Auto korrekt steht
		while(distance[1] >= 50U)
 8001224:	e00c      	b.n	8001240 <START_PARKING+0x15c>
		{
			GET_TOF_DATA();
 8001226:	f7ff fa33 	bl	8000690 <GET_TOF_DATA>

			if(distance[1] <= 50U)
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <START_PARKING+0x170>)
 800122c:	885b      	ldrh	r3, [r3, #2]
 800122e:	2b32      	cmp	r3, #50	; 0x32
 8001230:	d806      	bhi.n	8001240 <START_PARKING+0x15c>
			{
				SET_PWM_MOTOR(75);
 8001232:	204b      	movs	r0, #75	; 0x4b
 8001234:	f7ff ff32 	bl	800109c <SET_PWM_MOTOR>
				state = STOP;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <START_PARKING+0x188>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
				break;
 800123e:	e003      	b.n	8001248 <START_PARKING+0x164>
		while(distance[1] >= 50U)
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <START_PARKING+0x170>)
 8001242:	885b      	ldrh	r3, [r3, #2]
 8001244:	2b31      	cmp	r3, #49	; 0x31
 8001246:	d8ee      	bhi.n	8001226 <START_PARKING+0x142>
			}
		}

	break;
 8001248:	bf00      	nop

	printf("Wir sind hier");

	}
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000140 	.word	0x20000140
 8001258:	08009104 	.word	0x08009104
 800125c:	08009120 	.word	0x08009120
 8001260:	0800913c 	.word	0x0800913c
 8001264:	08009164 	.word	0x08009164
 8001268:	08009184 	.word	0x08009184
 800126c:	200004b8 	.word	0x200004b8

08001270 <__io_putchar>:
/**
 *	Funktion dient zur printf Ausgabe auf der seriellen Schnittstelle
 */

	PUTCHAR_PROTOTYPE
	{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
		/* e.g. write a character to the USART2 and Loop until the end of transmission */
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001278:	1d39      	adds	r1, r7, #4
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	2201      	movs	r2, #1
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <__io_putchar+0x20>)
 8001282:	f004 ff95 	bl	80061b0 <HAL_UART_Transmit>

		return ch;
 8001286:	687b      	ldr	r3, [r7, #4]
	}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000310 	.word	0x20000310

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <VL53L4CD_RdDWord>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	4603      	mov	r3, r0
 80012a8:	603a      	str	r2, [r7, #0]
 80012aa:	80fb      	strh	r3, [r7, #6]
 80012ac:	460b      	mov	r3, r1
 80012ae:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	88f9      	ldrh	r1, [r7, #6]
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2302      	movs	r3, #2
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <VL53L4CD_RdDWord+0x74>)
 80012d2:	f001 fbed 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 80012da:	f107 0208 	add.w	r2, r7, #8
 80012de:	88f9      	ldrh	r1, [r7, #6]
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2304      	movs	r3, #4
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <VL53L4CD_RdDWord+0x74>)
 80012e8:	f001 fcfa 	bl	8002ce0 <HAL_I2C_Master_Receive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 80012f0:	7a3b      	ldrb	r3, [r7, #8]
 80012f2:	061a      	lsls	r2, r3, #24
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 80012fe:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8001300:	7afa      	ldrb	r2, [r7, #11]
 8001302:	4313      	orrs	r3, r2
 8001304:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	601a      	str	r2, [r3, #0]
	return status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000150 	.word	0x20000150

08001318 <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	603a      	str	r2, [r7, #0]
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	460b      	mov	r3, r1
 8001326:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	88f9      	ldrh	r1, [r7, #6]
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2302      	movs	r3, #2
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <VL53L4CD_RdWord+0x70>)
 800134a:	f001 fbb1 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	88f9      	ldrh	r1, [r7, #6]
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <VL53L4CD_RdWord+0x70>)
 8001360:	f001 fcbe 	bl	8002ce0 <HAL_I2C_Master_Receive>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 8001368:	7a3b      	ldrb	r3, [r7, #8]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7a7b      	ldrb	r3, [r7, #9]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	801a      	strh	r2, [r3, #0]
	return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000150 	.word	0x20000150

0800138c <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	603a      	str	r2, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	460b      	mov	r3, r1
 800139a:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	88f9      	ldrh	r1, [r7, #6]
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2302      	movs	r3, #2
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <VL53L4CD_RdByte+0x60>)
 80013be:	f001 fb77 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	88f9      	ldrh	r1, [r7, #6]
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <VL53L4CD_RdByte+0x60>)
 80013d4:	f001 fc84 	bl	8002ce0 <HAL_I2C_Master_Receive>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 80013dc:	7a3a      	ldrb	r2, [r7, #8]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
	return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000150 	.word	0x20000150

080013f0 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	80bb      	strh	r3, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b29b      	uxth	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	88f9      	ldrh	r1, [r7, #6]
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2303      	movs	r3, #3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <VL53L4CD_WrByte+0x4c>)
 8001428:	f001 fb42 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000150 	.word	0x20000150

08001440 <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	460b      	mov	r3, r1
 800144c:	80bb      	strh	r3, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	b29b      	uxth	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	88f9      	ldrh	r1, [r7, #6]
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2304      	movs	r3, #4
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <VL53L4CD_WrWord+0x58>)
 8001484:	f001 fb14 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
	return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000150 	.word	0x20000150

0800149c <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	4603      	mov	r3, r0
 80014a4:	603a      	str	r2, [r7, #0]
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	460b      	mov	r3, r1
 80014aa:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	0e1b      	lsrs	r3, r3, #24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 80014de:	f107 0208 	add.w	r2, r7, #8
 80014e2:	88f9      	ldrh	r1, [r7, #6]
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2306      	movs	r3, #6
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <VL53L4CD_WrDWord+0x64>)
 80014ec:	f001 fae0 	bl	8002ab0 <HAL_I2C_Master_Transmit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000150 	.word	0x20000150

08001504 <WaitMs>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f000 fcdb 	bl	8001ecc <HAL_Delay>
	return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x44>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ac      	sub	sp, #176	; 0xb0
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2288      	movs	r2, #136	; 0x88
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f006 ff5d 	bl	8008448 <memset>
  if(hi2c->Instance==I2C1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_I2C_MspInit+0xc8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d147      	bne.n	8001628 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fe1f 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015b0:	f7ff fe70 	bl	8001294 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d4:	2312      	movs	r3, #18
 80015d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e6:	2304      	movs	r3, #4
 80015e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f0:	4619      	mov	r1, r3
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <HAL_I2C_MspInit+0xd0>)
 80015f4:	f001 f816 	bl	8002624 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_I2C_MspInit+0xd4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_I2C_MspInit+0xd4>)
 80015fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001602:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_I2C_MspInit+0xd4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_I2C_MspInit+0xd4>)
 800160a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800160e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 8001616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161a:	6593      	str	r3, [r2, #88]	; 0x58
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_I2C_MspInit+0xcc>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	37b0      	adds	r7, #176	; 0xb0
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005400 	.word	0x40005400
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400
 800163c:	40010000 	.word	0x40010000

08001640 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_TIM_Encoder_MspInit+0x80>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d129      	bne.n	80016b6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f000 ffb7 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40012c00 	.word	0x40012c00
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d114      	bne.n	8001704 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201c      	movs	r0, #28
 80016f8:	f000 fce7 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 fd00 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001702:	e010      	b.n	8001726 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_TIM_Base_MspInit+0x6c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_TIM_Base_MspInit+0x68>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d11d      	bne.n	8001796 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001782:	2301      	movs	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f000 ff48 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001794:	e021      	b.n	80017da <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <HAL_TIM_MspPostInit+0xb0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d11c      	bne.n	80017da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_MspPostInit+0xac>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c8:	2302      	movs	r3, #2
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f000 ff25 	bl	8002624 <HAL_GPIO_Init>
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40000400 	.word	0x40000400

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ae      	sub	sp, #184	; 0xb8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2288      	movs	r2, #136	; 0x88
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fe1b 	bl	8008448 <memset>
  if(huart->Instance==USART1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_UART_MspInit+0x1a4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	f040 80c7 	bne.w	80019ac <HAL_UART_MspInit+0x1c0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800181e:	2301      	movs	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001822:	2300      	movs	r3, #0
 8001824:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fcdc 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001836:	f7ff fd2d 	bl	8001294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6613      	str	r3, [r2, #96]	; 0x60
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a49      	ldr	r2, [pc, #292]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_UART_MspInit+0x1a8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189c:	2307      	movs	r3, #7
 800189e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 feba 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c8:	2307      	movs	r3, #7
 80018ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4830      	ldr	r0, [pc, #192]	; (8001998 <HAL_UART_MspInit+0x1ac>)
 80018d6:	f000 fea5 	bl	8002624 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018dc:	4a30      	ldr	r2, [pc, #192]	; (80019a0 <HAL_UART_MspInit+0x1b4>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_UART_MspInit+0x1b0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_UART_MspInit+0x1b0>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001912:	f000 fc11 	bl	8002138 <HAL_DMA_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800191c:	f7ff fcba 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001924:	675a      	str	r2, [r3, #116]	; 0x74
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <HAL_UART_MspInit+0x1b0>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_UART_MspInit+0x1bc>)
 8001930:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001934:	2202      	movs	r2, #2
 8001936:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 800193a:	2210      	movs	r2, #16
 800193c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001958:	2200      	movs	r2, #0
 800195a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001962:	4810      	ldr	r0, [pc, #64]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001964:	f000 fbe8 	bl	8002138 <HAL_DMA_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 800196e:	f7ff fc91 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 8001976:	671a      	str	r2, [r3, #112]	; 0x70
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_UART_MspInit+0x1b8>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2025      	movs	r0, #37	; 0x25
 8001984:	f000 fba1 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001988:	2025      	movs	r0, #37	; 0x25
 800198a:	f000 fbba 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198e:	e0a9      	b.n	8001ae4 <HAL_UART_MspInit+0x2f8>
 8001990:	40013800 	.word	0x40013800
 8001994:	40021000 	.word	0x40021000
 8001998:	48000400 	.word	0x48000400
 800199c:	20000398 	.word	0x20000398
 80019a0:	40020058 	.word	0x40020058
 80019a4:	200003e0 	.word	0x200003e0
 80019a8:	40020044 	.word	0x40020044
  else if(huart->Instance==USART2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4e      	ldr	r2, [pc, #312]	; (8001aec <HAL_UART_MspInit+0x300>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	f040 8096 	bne.w	8001ae4 <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019bc:	2300      	movs	r3, #0
 80019be:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fc0f 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 80019d0:	f7ff fc60 	bl	8001294 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a3f      	ldr	r2, [pc, #252]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_UART_MspInit+0x304>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a04:	230c      	movs	r3, #12
 8001a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f000 fdfa 	bl	8002624 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a32:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <HAL_UART_MspInit+0x30c>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a38:	2202      	movs	r2, #2
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a68:	f000 fb66 	bl	8002138 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8001a72:	f7ff fc0f 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a7a:	675a      	str	r2, [r3, #116]	; 0x74
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0x308>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_UART_MspInit+0x314>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001a90:	2210      	movs	r2, #16
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001aba:	f000 fb3d 	bl	8002138 <HAL_DMA_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8001ac4:	f7ff fbe6 	bl	8001294 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001acc:	671a      	str	r2, [r3, #112]	; 0x70
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_UART_MspInit+0x310>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2026      	movs	r0, #38	; 0x26
 8001ada:	f000 faf6 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ade:	2026      	movs	r0, #38	; 0x26
 8001ae0:	f000 fb0f 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 8001ae4:	bf00      	nop
 8001ae6:	37b8      	adds	r7, #184	; 0xb8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40004400 	.word	0x40004400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	20000428 	.word	0x20000428
 8001af8:	4002006c 	.word	0x4002006c
 8001afc:	20000470 	.word	0x20000470
 8001b00:	40020080 	.word	0x40020080

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <NMI_Handler+0x4>

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler+0x4>

08001b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 f99c 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ulTimer += 1;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <SysTick_Handler+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a02      	ldr	r2, [pc, #8]	; (8001b64 <SysTick_Handler+0x18>)
 8001b5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200004bc 	.word	0x200004bc

08001b68 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA1_Channel4_IRQHandler+0x10>)
 8001b6e:	f000 fc7a 	bl	8002466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200003e0 	.word	0x200003e0

08001b7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA1_Channel5_IRQHandler+0x10>)
 8001b82:	f000 fc70 	bl	8002466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000398 	.word	0x20000398

08001b90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Channel6_IRQHandler+0x10>)
 8001b96:	f000 fc66 	bl	8002466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000428 	.word	0x20000428

08001ba4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA1_Channel7_IRQHandler+0x10>)
 8001baa:	f000 fc5c 	bl	8002466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000470 	.word	0x20000470

08001bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM2_IRQHandler+0x10>)
 8001bbe:	f003 fac1 	bl	8005144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200001f0 	.word	0x200001f0

08001bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <USART1_IRQHandler+0x10>)
 8001bd2:	f004 fc3f 	bl	8006454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000288 	.word	0x20000288

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USART2_IRQHandler+0x10>)
 8001be6:	f004 fc35 	bl	8006454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000310 	.word	0x20000310

08001bf4 <SysTickGetTickcount>:

/* USER CODE BEGIN 1 */
unsigned long SysTickGetTickcount(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	unsigned long ulTickcount;

	ulTickcount = ulTimer;
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTickGetTickcount+0x1c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	607b      	str	r3, [r7, #4]

	return ulTickcount;
 8001c00:	687b      	ldr	r3, [r7, #4]


}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200004bc 	.word	0x200004bc

08001c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fb01 	bl	8001270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
	}
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f006 fbe0 	bl	80084e4 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20018000 	.word	0x20018000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	200004c0 	.word	0x200004c0
 8001d58:	20000618 	.word	0x20000618

08001d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d84:	f7ff ffea 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <LoopForever+0xe>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	; (8001dcc <LoopForever+0x16>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f006 fb9f 	bl	80084f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db2:	f7fe fde1 	bl	8000978 <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001dc4:	080092a8 	.word	0x080092a8
  ldr r2, =_sbss
 8001dc8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001dcc:	20000614 	.word	0x20000614

08001dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_2_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_Init+0x3c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_Init+0x3c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 f962 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 f80f 	bl	8001e14 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	e001      	b.n	8001e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e02:	f7ff fb8d 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40022000 	.word	0x40022000

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_InitTick+0x6c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d023      	beq.n	8001e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_InitTick+0x70>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_InitTick+0x6c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f96d 	bl	800211e <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d809      	bhi.n	8001e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f937 	bl	80020ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_InitTick+0x74>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e007      	b.n	8001e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e004      	b.n	8001e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e001      	b.n	8001e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000024 	.word	0x20000024
 8001e84:	2000001c 	.word	0x2000001c
 8001e88:	20000020 	.word	0x20000020

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000024 	.word	0x20000024
 8001eb0:	200004c4 	.word	0x200004c4

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200004c4 	.word	0x200004c4

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000024 	.word	0x20000024

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e098      	b.n	800227c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_DMA_Init+0x150>)
 8002152:	429a      	cmp	r2, r3
 8002154:	d80f      	bhi.n	8002176 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_DMA_Init+0x154>)
 800215e:	4413      	add	r3, r2
 8002160:	4a4b      	ldr	r2, [pc, #300]	; (8002290 <HAL_DMA_Init+0x158>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_DMA_Init+0x15c>)
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
 8002174:	e00e      	b.n	8002194 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_DMA_Init+0x160>)
 800217e:	4413      	add	r3, r2
 8002180:	4a43      	ldr	r2, [pc, #268]	; (8002290 <HAL_DMA_Init+0x158>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	009a      	lsls	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a42      	ldr	r2, [pc, #264]	; (800229c <HAL_DMA_Init+0x164>)
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ee:	d039      	beq.n	8002264 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_DMA_Init+0x15c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d11a      	bne.n	8002230 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_DMA_Init+0x168>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 031c 	and.w	r3, r3, #28
 8002206:	210f      	movs	r1, #15
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4924      	ldr	r1, [pc, #144]	; (80022a0 <HAL_DMA_Init+0x168>)
 8002210:	4013      	ands	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_DMA_Init+0x168>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	f003 031c 	and.w	r3, r3, #28
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	491d      	ldr	r1, [pc, #116]	; (80022a0 <HAL_DMA_Init+0x168>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
 800222e:	e019      	b.n	8002264 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_DMA_Init+0x16c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f003 031c 	and.w	r3, r3, #28
 800223c:	210f      	movs	r1, #15
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	4917      	ldr	r1, [pc, #92]	; (80022a4 <HAL_DMA_Init+0x16c>)
 8002246:	4013      	ands	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_DMA_Init+0x16c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f003 031c 	and.w	r3, r3, #28
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	4911      	ldr	r1, [pc, #68]	; (80022a4 <HAL_DMA_Init+0x16c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40020407 	.word	0x40020407
 800228c:	bffdfff8 	.word	0xbffdfff8
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	40020000 	.word	0x40020000
 8002298:	bffdfbf8 	.word	0xbffdfbf8
 800229c:	40020400 	.word	0x40020400
 80022a0:	400200a8 	.word	0x400200a8
 80022a4:	400204a8 	.word	0x400204a8

080022a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Start_IT+0x20>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e04b      	b.n	8002360 <HAL_DMA_Start_IT+0xb8>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d13a      	bne.n	8002352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f95f 	bl	80025c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 020e 	orr.w	r2, r2, #14
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00f      	b.n	8002340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0204 	bic.w	r2, r2, #4
 800232e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 020a 	orr.w	r2, r2, #10
 800233e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e005      	b.n	800235e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800235a:	2302      	movs	r3, #2
 800235c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800235e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2204      	movs	r2, #4
 8002384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 020e 	bic.w	r2, r2, #14
 80023a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 021c 	and.w	r2, r3, #28
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d005      	beq.n	8002408 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2204      	movs	r2, #4
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e029      	b.n	800245c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020e 	bic.w	r2, r2, #14
 8002416:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	f003 021c 	and.w	r2, r3, #28
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    }
  }
  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f003 031c 	and.w	r3, r3, #28
 8002486:	2204      	movs	r2, #4
 8002488:	409a      	lsls	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d026      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x7a>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d021      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0204 	bic.w	r2, r2, #4
 80024b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 021c 	and.w	r2, r3, #28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2104      	movs	r1, #4
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d071      	beq.n	80025ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80024de:	e06c      	b.n	80025ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 031c 	and.w	r3, r3, #28
 80024e8:	2202      	movs	r2, #2
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02e      	beq.n	8002552 <HAL_DMA_IRQHandler+0xec>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d029      	beq.n	8002552 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020a 	bic.w	r2, r2, #10
 800251a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f003 021c 	and.w	r2, r3, #28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2102      	movs	r1, #2
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d038      	beq.n	80025ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002550:	e033      	b.n	80025ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f003 031c 	and.w	r3, r3, #28
 800255a:	2208      	movs	r2, #8
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x156>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d025      	beq.n	80025bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020e 	bic.w	r2, r2, #14
 800257e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f003 021c 	and.w	r2, r3, #28
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
}
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f003 021c 	and.w	r2, r3, #28
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d108      	bne.n	8002608 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002606:	e007      	b.n	8002618 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	e17f      	b.n	8002934 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8171 	beq.w	800292e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d005      	beq.n	8002664 <HAL_GPIO_Init+0x40>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d130      	bne.n	80026c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269a:	2201      	movs	r2, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0201 	and.w	r2, r3, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d118      	bne.n	8002704 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	6939      	ldr	r1, [r7, #16]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80ac 	beq.w	800292e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	4a5e      	ldr	r2, [pc, #376]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6613      	str	r3, [r2, #96]	; 0x60
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_GPIO_Init+0x330>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ee:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <HAL_GPIO_Init+0x334>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x242>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x338>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x23e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_GPIO_Init+0x33c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x23a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x340>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x236>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_GPIO_Init+0x344>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x232>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4b      	ldr	r2, [pc, #300]	; (800296c <HAL_GPIO_Init+0x348>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_GPIO_Init+0x34c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x22a>
 800284a:	2306      	movs	r3, #6
 800284c:	e00c      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800284e:	2307      	movs	r3, #7
 8002850:	e00a      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002852:	2305      	movs	r3, #5
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002856:	2304      	movs	r3, #4
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x244>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x244>
 8002866:	2300      	movs	r3, #0
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002878:	4937      	ldr	r1, [pc, #220]	; (8002958 <HAL_GPIO_Init+0x334>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_GPIO_Init+0x350>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_GPIO_Init+0x350>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_GPIO_Init+0x350>)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f ae78 	bne.w	8002634 <HAL_GPIO_Init+0x10>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000
 800295c:	48000400 	.word	0x48000400
 8002960:	48000800 	.word	0x48000800
 8002964:	48000c00 	.word	0x48000c00
 8002968:	48001000 	.word	0x48001000
 800296c:	48001400 	.word	0x48001400
 8002970:	48001800 	.word	0x48001800
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08d      	b.n	8002aa6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fde2 	bl	8001568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e006      	b.n	8002a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d108      	bne.n	8002a1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	e007      	b.n	8002a2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	f040 80fd 	bne.w	8002ccc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_I2C_Master_Transmit+0x30>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0f6      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ae8:	f7ff f9e4 	bl	8001eb4 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2319      	movs	r3, #25
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa0a 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e1      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2221      	movs	r2, #33	; 0x21
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2210      	movs	r2, #16
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	893a      	ldrh	r2, [r7, #8]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	d906      	bls.n	8002b4a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e007      	b.n	8002b5a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	8979      	ldrh	r1, [r7, #10]
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	; (8002cd8 <HAL_I2C_Master_Transmit+0x228>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fbf1 	bl	800338c <I2C_TransferConfig>
 8002baa:	e066      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <HAL_I2C_Master_Transmit+0x228>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fbe6 	bl	800338c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bc0:	e05b      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9f3 	bl	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e07b      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d034      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x1ca>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d130      	bne.n	8002c7a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f976 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e04d      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2bff      	cmp	r3, #255	; 0xff
 8002c3a:	d90e      	bls.n	8002c5a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	22ff      	movs	r2, #255	; 0xff
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fb9a 	bl	800338c <I2C_TransferConfig>
 8002c58:	e00f      	b.n	8002c7a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	8979      	ldrh	r1, [r7, #10]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fb89 	bl	800338c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d19e      	bne.n	8002bc2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	6a39      	ldr	r1, [r7, #32]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f9d9 	bl	8003040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e01a      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_I2C_Master_Transmit+0x22c>)
 8002cac:	400b      	ands	r3, r1
 8002cae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e000      	b.n	8002cce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
  }
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	80002000 	.word	0x80002000
 8002cdc:	fe00e800 	.word	0xfe00e800

08002ce0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f040 80db 	bne.w	8002eb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2C_Master_Receive+0x30>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0d4      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d18:	f7ff f8cc 	bl	8001eb4 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f8f2 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0bf      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2222      	movs	r2, #34	; 0x22
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2bff      	cmp	r3, #255	; 0xff
 8002d6a:	d90e      	bls.n	8002d8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fb02 	bl	800338c <I2C_TransferConfig>
 8002d88:	e06d      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 faf1 	bl	800338c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002daa:	e05c      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f989 	bl	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07c      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d034      	beq.n	8002e66 <HAL_I2C_Master_Receive+0x186>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d130      	bne.n	8002e66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f880 	bl	8002f14 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e04d      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2bff      	cmp	r3, #255	; 0xff
 8002e26:	d90e      	bls.n	8002e46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 faa4 	bl	800338c <I2C_TransferConfig>
 8002e44:	e00f      	b.n	8002e66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fa93 	bl	800338c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d19d      	bne.n	8002dac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8e3 	bl	8003040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e01a      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_I2C_Master_Receive+0x1e8>)
 8002e98:	400b      	ands	r3, r1
 8002e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	80002400 	.word	0x80002400
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d103      	bne.n	8002eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d007      	beq.n	8002f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	619a      	str	r2, [r3, #24]
  }
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	e031      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d02d      	beq.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe ffc1 	bl	8001eb4 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d122      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d113      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0be      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fbe:	e033      	b.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f901 	bl	80031cc <I2C_IsErrorOccurred>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e031      	b.n	8003038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d025      	beq.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7fe ff6a 	bl	8001eb4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11a      	bne.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d013      	beq.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e007      	b.n	8003038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d1c4      	bne.n	8002fc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800304c:	e02f      	b.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8ba 	bl	80031cc <I2C_IsErrorOccurred>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e02d      	b.n	80030be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fe ff27 	bl	8001eb4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11a      	bne.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b20      	cmp	r3, #32
 8003084:	d013      	beq.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d1c8      	bne.n	800304e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030d4:	e06b      	b.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f876 	bl	80031cc <I2C_IsErrorOccurred>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e069      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d138      	bne.n	800316a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d105      	bne.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e055      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b10      	cmp	r3, #16
 800311e:	d107      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2210      	movs	r2, #16
 8003126:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2204      	movs	r2, #4
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
 800312e:	e002      	b.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2220      	movs	r2, #32
 800313c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800314a:	400b      	ands	r3, r1
 800314c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e029      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fea3 	bl	8001eb4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d00f      	beq.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e007      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d18c      	bne.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	fe00e800 	.word	0xfe00e800

080031cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d068      	beq.n	80032ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2210      	movs	r2, #16
 80031fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003200:	e049      	b.n	8003296 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d045      	beq.n	8003296 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fe53 	bl	8001eb4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_IsErrorOccurred+0x54>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d13a      	bne.n	8003296 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003232:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003242:	d121      	bne.n	8003288 <I2C_IsErrorOccurred+0xbc>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d01d      	beq.n	8003288 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b20      	cmp	r3, #32
 8003250:	d01a      	beq.n	8003288 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003260:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003262:	f7fe fe27 	bl	8001eb4 <HAL_GetTick>
 8003266:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003268:	e00e      	b.n	8003288 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800326a:	f7fe fe23 	bl	8001eb4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b19      	cmp	r3, #25
 8003276:	d907      	bls.n	8003288 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f043 0320 	orr.w	r3, r3, #32
 800327e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003286:	e006      	b.n	8003296 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b20      	cmp	r3, #32
 8003294:	d1e9      	bne.n	800326a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d003      	beq.n	80032ac <I2C_IsErrorOccurred+0xe0>
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0aa      	beq.n	8003202 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2220      	movs	r2, #32
 80032ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800330e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fdc3 	bl	8002ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <I2C_IsErrorOccurred+0x1bc>)
 8003352:	400b      	ands	r3, r1
 8003354:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800337a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800337e:	4618      	mov	r0, r3
 8003380:	3728      	adds	r7, #40	; 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	fe00e800 	.word	0xfe00e800

0800338c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	4613      	mov	r3, r2
 800339c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033a4:	7a7b      	ldrb	r3, [r7, #9]
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	0d5b      	lsrs	r3, r3, #21
 80033c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <I2C_TransferConfig+0x60>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	43db      	mvns	r3, r3
 80033d0:	ea02 0103 	and.w	r1, r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	03ff63ff 	.word	0x03ff63ff

080033f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	d138      	bne.n	8003478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003410:	2302      	movs	r3, #2
 8003412:	e032      	b.n	800347a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b20      	cmp	r3, #32
 800349a:	d139      	bne.n	8003510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e033      	b.n	8003512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2224      	movs	r2, #36	; 0x24
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_PWREx_GetVoltageRange+0x18>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354a:	d130      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003558:	d038      	beq.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2232      	movs	r2, #50	; 0x32
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003580:	e002      	b.n	8003588 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3b01      	subs	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d102      	bne.n	800359c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f2      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a8:	d110      	bne.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e00f      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d007      	beq.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000
 80035e0:	2000001c 	.word	0x2000001c
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e3ca      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b97      	ldr	r3, [pc, #604]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b94      	ldr	r3, [pc, #592]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80e4 	beq.w	80037e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_RCC_OscConfig+0x4a>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f040 808b 	bne.w	8003740 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 8087 	bne.w	8003740 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003632:	4b89      	ldr	r3, [pc, #548]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e3a2      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	4b82      	ldr	r3, [pc, #520]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d004      	beq.n	8003664 <HAL_RCC_OscConfig+0x7c>
 800365a:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003662:	e005      	b.n	8003670 <HAL_RCC_OscConfig+0x88>
 8003664:	4b7c      	ldr	r3, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	4293      	cmp	r3, r2
 8003672:	d223      	bcs.n	80036bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fd55 	bl	8004128 <RCC_SetFlashLatencyFromMSIRange>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e383      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003688:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a72      	ldr	r2, [pc, #456]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b70      	ldr	r3, [pc, #448]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	496d      	ldr	r1, [pc, #436]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	4968      	ldr	r1, [pc, #416]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e025      	b.n	8003708 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036bc:	4b66      	ldr	r3, [pc, #408]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a65      	ldr	r2, [pc, #404]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036c2:	f043 0308 	orr.w	r3, r3, #8
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4960      	ldr	r1, [pc, #384]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036da:	4b5f      	ldr	r3, [pc, #380]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	495b      	ldr	r1, [pc, #364]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd15 	bl	8004128 <RCC_SetFlashLatencyFromMSIRange>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e343      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003708:	f000 fc4a 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b52      	ldr	r3, [pc, #328]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	4950      	ldr	r1, [pc, #320]	; (800385c <HAL_RCC_OscConfig+0x274>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	4a4e      	ldr	r2, [pc, #312]	; (8003860 <HAL_RCC_OscConfig+0x278>)
 8003726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003728:	4b4e      	ldr	r3, [pc, #312]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fb71 	bl	8001e14 <HAL_InitTick>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d052      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	e327      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d032      	beq.n	80037ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a42      	ldr	r2, [pc, #264]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003754:	f7fe fbae 	bl	8001eb4 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800375c:	f7fe fbaa 	bl	8001eb4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e310      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376e:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a36      	ldr	r2, [pc, #216]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4931      	ldr	r1, [pc, #196]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	492c      	ldr	r1, [pc, #176]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
 80037ac:	e01a      	b.n	80037e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fb7b 	bl	8001eb4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c2:	f7fe fb77 	bl	8001eb4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2dd      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x1da>
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d074      	beq.n	80038da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x21a>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d10e      	bne.n	800381a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d10b      	bne.n	800381a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d064      	beq.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d160      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e2ba      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x24a>
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e026      	b.n	8003880 <HAL_RCC_OscConfig+0x298>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383a:	d115      	bne.n	8003868 <HAL_RCC_OscConfig+0x280>
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 8003842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a02      	ldr	r2, [pc, #8]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x298>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	080091c0 	.word	0x080091c0
 8003860:	2000001c 	.word	0x2000001c
 8003864:	20000020 	.word	0x20000020
 8003868:	4ba0      	ldr	r3, [pc, #640]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a9f      	ldr	r2, [pc, #636]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b9d      	ldr	r3, [pc, #628]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a9c      	ldr	r2, [pc, #624]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe fb14 	bl	8001eb4 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe fb10 	bl	8001eb4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e276      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a2:	4b92      	ldr	r3, [pc, #584]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x2a8>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fb00 	bl	8001eb4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe fafc 	bl	8001eb4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e262      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2d0>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d060      	beq.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x310>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d119      	bne.n	8003926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d116      	bne.n	8003926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f8:	4b7c      	ldr	r3, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x328>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e23f      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	4973      	ldr	r1, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	e040      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d023      	beq.n	8003976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392e:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fe fabb 	bl	8001eb4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fe fab7 	bl	8001eb4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e21d      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003954:	4b65      	ldr	r3, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	495f      	ldr	r1, [pc, #380]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
 8003974:	e018      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe fa97 	bl	8001eb4 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fe fa93 	bl	8001eb4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1f9      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039bc:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe fa72 	bl	8001eb4 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fa6e 	bl	8001eb4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1d4      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
 80039f4:	e01b      	b.n	8003a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe fa55 	bl	8001eb4 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fa51 	bl	8001eb4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1b7      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ef      	bne.n	8003a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80a6 	beq.w	8003b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a40:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_RCC_OscConfig+0x508>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <HAL_RCC_OscConfig+0x508>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_RCC_OscConfig+0x508>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a80:	f7fe fa18 	bl	8001eb4 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fe fa14 	bl	8001eb4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e17a      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCC_OscConfig+0x508>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4d8>
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	e029      	b.n	8003b14 <HAL_RCC_OscConfig+0x52c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b05      	cmp	r3, #5
 8003ac6:	d115      	bne.n	8003af4 <HAL_RCC_OscConfig+0x50c>
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	e014      	b.n	8003b14 <HAL_RCC_OscConfig+0x52c>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	4b9c      	ldr	r3, [pc, #624]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	4a9b      	ldr	r2, [pc, #620]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b04:	4b98      	ldr	r3, [pc, #608]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a97      	ldr	r2, [pc, #604]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d016      	beq.n	8003b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe f9ca 	bl	8001eb4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe f9c6 	bl	8001eb4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e12a      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3a:	4b8b      	ldr	r3, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ed      	beq.n	8003b24 <HAL_RCC_OscConfig+0x53c>
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe f9b3 	bl	8001eb4 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe f9af 	bl	8001eb4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e113      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b68:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1ed      	bne.n	8003b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7c:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a79      	ldr	r2, [pc, #484]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80fe 	beq.w	8003d8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	f040 80d0 	bne.w	8003d3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d130      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d127      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	2a07      	cmp	r2, #7
 8003bde:	bf14      	ite	ne
 8003be0:	2201      	movne	r2, #1
 8003be2:	2200      	moveq	r2, #0
 8003be4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d113      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d06e      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d069      	beq.n	8003cec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c24:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0ad      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4b      	ldr	r2, [pc, #300]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c40:	f7fe f938 	bl	8001eb4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe f934 	bl	8001eb4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e09a      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5a:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <HAL_RCC_OscConfig+0x784>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c80:	0212      	lsls	r2, r2, #8
 8003c82:	4311      	orrs	r1, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c88:	0852      	lsrs	r2, r2, #1
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	0552      	lsls	r2, r2, #21
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c94:	0852      	lsrs	r2, r2, #1
 8003c96:	3a01      	subs	r2, #1
 8003c98:	0652      	lsls	r2, r2, #25
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca0:	0912      	lsrs	r2, r2, #4
 8003ca2:	0452      	lsls	r2, r2, #17
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	4930      	ldr	r1, [pc, #192]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cac:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cc4:	f7fe f8f6 	bl	8001eb4 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe f8f2 	bl	8001eb4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e058      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cea:	e050      	b.n	8003d8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e04f      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d148      	bne.n	8003d8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d14:	f7fe f8ce 	bl	8001eb4 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe f8ca 	bl	8001eb4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e030      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x734>
 8003d3a:	e028      	b.n	8003d8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d023      	beq.n	8003d8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <HAL_RCC_OscConfig+0x780>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f8b1 	bl	8001eb4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	e00c      	b.n	8003d70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fe f8ad 	bl	8001eb4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d905      	bls.n	8003d70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e013      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_OscConfig+0x7b0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ec      	bne.n	8003d56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_OscConfig+0x7b0>)
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4905      	ldr	r1, [pc, #20]	; (8003d98 <HAL_RCC_OscConfig+0x7b0>)
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_OscConfig+0x7b4>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
 8003d88:	e001      	b.n	8003d8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	feeefffc 	.word	0xfeeefffc

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0e7      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db4:	4b75      	ldr	r3, [pc, #468]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d910      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b72      	ldr	r3, [pc, #456]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	4970      	ldr	r1, [pc, #448]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b6e      	ldr	r3, [pc, #440]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0cf      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d908      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4960      	ldr	r1, [pc, #384]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04c      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e26:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d121      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0a6      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d115      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e09a      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e56:	4b4e      	ldr	r3, [pc, #312]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e08e      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e086      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 0203 	bic.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4943      	ldr	r1, [pc, #268]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e88:	f7fe f814 	bl	8001eb4 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f7fe f810 	bl	8001eb4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e06e      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 020c 	and.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1eb      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d208      	bcs.n	8003ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b2e      	ldr	r3, [pc, #184]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	492b      	ldr	r1, [pc, #172]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d210      	bcs.n	8003f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 0207 	bic.w	r2, r3, #7
 8003efc:	4923      	ldr	r1, [pc, #140]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_RCC_ClockConfig+0x1ec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e036      	b.n	8003f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	4918      	ldr	r1, [pc, #96]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4910      	ldr	r1, [pc, #64]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f54:	f000 f824 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	490b      	ldr	r1, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x1f4>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f70:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1f8>)
 8003f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1fc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd ff4b 	bl	8001e14 <HAL_InitTick>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f82:	7afb      	ldrb	r3, [r7, #11]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40022000 	.word	0x40022000
 8003f90:	40021000 	.word	0x40021000
 8003f94:	080091c0 	.word	0x080091c0
 8003f98:	2000001c 	.word	0x2000001c
 8003f9c:	20000020 	.word	0x20000020

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b0c      	cmp	r3, #12
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d11e      	bne.n	8004012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fd4:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e005      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d102      	bne.n	800401e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e004      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d101      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d134      	bne.n	8004098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800402e:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0xa6>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d003      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0xac>
 8004044:	e005      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004048:	617b      	str	r3, [r7, #20]
      break;
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800404e:	617b      	str	r3, [r7, #20]
      break;
 8004050:	e002      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	617b      	str	r3, [r7, #20]
      break;
 8004056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	3301      	adds	r3, #1
 8004064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	fb03 f202 	mul.w	r2, r3, r2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	0e5b      	lsrs	r3, r3, #25
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	3301      	adds	r3, #1
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004098:	69bb      	ldr	r3, [r7, #24]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	080091d8 	.word	0x080091d8
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	2000001c 	.word	0x2000001c

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	080091d0 	.word	0x080091d0

080040fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004100:	f7ff ffda 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0adb      	lsrs	r3, r3, #11
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4904      	ldr	r1, [pc, #16]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	080091d0 	.word	0x080091d0

08004128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004134:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004140:	f7ff f9ee 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 8004144:	6178      	str	r0, [r7, #20]
 8004146:	e014      	b.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	; 0x58
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004160:	f7ff f9de 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 8004164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004178:	d10b      	bne.n	8004192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d919      	bls.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2ba0      	cmp	r3, #160	; 0xa0
 8004184:	d902      	bls.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004186:	2302      	movs	r3, #2
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	e013      	b.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800418c:	2301      	movs	r3, #1
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e010      	b.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d902      	bls.n	800419e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004198:	2303      	movs	r3, #3
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	e00a      	b.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b80      	cmp	r3, #128	; 0x80
 80041a2:	d102      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041a4:	2302      	movs	r3, #2
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e004      	b.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b70      	cmp	r3, #112	; 0x70
 80041ae:	d101      	bne.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b0:	2301      	movs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 0207 	bic.w	r2, r3, #7
 80041bc:	4909      	ldr	r1, [pc, #36]	; (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d001      	beq.n	80041d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40022000 	.word	0x40022000

080041e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f0:	2300      	movs	r3, #0
 80041f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f4:	2300      	movs	r3, #0
 80041f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	2b00      	cmp	r3, #0
 8004202:	d041      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800420c:	d02a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800420e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004212:	d824      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800421a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800421e:	d81e      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004228:	d010      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800422a:	e018      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a85      	ldr	r2, [pc, #532]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004236:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004238:	e015      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fabb 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424a:	e00c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3320      	adds	r3, #32
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fba6 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	74fb      	strb	r3, [r7, #19]
      break;
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800426c:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427a:	4973      	ldr	r1, [pc, #460]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004282:	e001      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d041      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800429c:	d02a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800429e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a2:	d824      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ae:	d81e      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b8:	d010      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ba:	e018      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a61      	ldr	r2, [pc, #388]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c8:	e015      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fa73 	bl	80047bc <RCCEx_PLLSAI1_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042da:	e00c      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3320      	adds	r3, #32
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb5e 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	74fb      	strb	r3, [r7, #19]
      break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042fc:	4b52      	ldr	r3, [pc, #328]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430a:	494f      	ldr	r1, [pc, #316]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004312:	e001      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a0 	beq.w	8004466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4a40      	ldr	r2, [pc, #256]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434a:	6593      	str	r3, [r2, #88]	; 0x58
 800434c:	4b3e      	ldr	r3, [pc, #248]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004358:	2301      	movs	r3, #1
 800435a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004368:	f7fd fda4 	bl	8001eb4 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800436e:	e009      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fd fda0 	bl	8001eb4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d902      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	74fb      	strb	r3, [r7, #19]
        break;
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004384:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ef      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d15c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d019      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	4a20      	ldr	r2, [pc, #128]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd fd5f 	bl	8001eb4 <HAL_GetTick>
 80043f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f8:	e00b      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd fd5b 	bl	8001eb4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d902      	bls.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	74fb      	strb	r3, [r7, #19]
            break;
 8004410:	e006      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ec      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	4904      	ldr	r1, [pc, #16]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800443e:	e009      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004454:	7c7b      	ldrb	r3, [r7, #17]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b9e      	ldr	r3, [pc, #632]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	4a9d      	ldr	r2, [pc, #628]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004472:	4b98      	ldr	r3, [pc, #608]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f023 0203 	bic.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	4994      	ldr	r1, [pc, #592]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004494:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 020c 	bic.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	498c      	ldr	r1, [pc, #560]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b6:	4b87      	ldr	r3, [pc, #540]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	4983      	ldr	r1, [pc, #524]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d8:	4b7e      	ldr	r3, [pc, #504]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	497b      	ldr	r1, [pc, #492]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044fa:	4b76      	ldr	r3, [pc, #472]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	4972      	ldr	r1, [pc, #456]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800451c:	4b6d      	ldr	r3, [pc, #436]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	496a      	ldr	r1, [pc, #424]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	4961      	ldr	r1, [pc, #388]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004560:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	4959      	ldr	r1, [pc, #356]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	4950      	ldr	r1, [pc, #320]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a4:	4b4b      	ldr	r3, [pc, #300]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	4948      	ldr	r1, [pc, #288]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	493f      	ldr	r1, [pc, #252]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d028      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e8:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f6:	4937      	ldr	r1, [pc, #220]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004606:	d106      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004608:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a31      	ldr	r2, [pc, #196]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004612:	60d3      	str	r3, [r2, #12]
 8004614:	e011      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461e:	d10c      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f8c8 	bl	80047bc <RCCEx_PLLSAI1_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d028      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004646:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	491f      	ldr	r1, [pc, #124]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004664:	d106      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004670:	60d3      	str	r3, [r2, #12]
 8004672:	e011      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467c:	d10c      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f899 	bl	80047bc <RCCEx_PLLSAI1_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02b      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	4908      	ldr	r1, [pc, #32]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c2:	d109      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a02      	ldr	r2, [pc, #8]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
 80046d0:	e014      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2101      	movs	r1, #1
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f867 	bl	80047bc <RCCEx_PLLSAI1_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004708:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004716:	4928      	ldr	r1, [pc, #160]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004726:	d10d      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2102      	movs	r1, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f844 	bl	80047bc <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d014      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	74bb      	strb	r3, [r7, #18]
 8004742:	e011      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3320      	adds	r3, #32
 8004752:	2102      	movs	r1, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f925 	bl	80049a4 <RCCEx_PLLSAI2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004782:	490d      	ldr	r1, [pc, #52]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a6:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000

080047bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ca:	4b75      	ldr	r3, [pc, #468]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047d6:	4b72      	ldr	r3, [pc, #456]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0203 	and.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10d      	bne.n	8004802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ee:	4b6c      	ldr	r3, [pc, #432]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
       ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d047      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	e044      	b.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d018      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x86>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d825      	bhi.n	8004860 <RCCEx_PLLSAI1_Config+0xa4>
 8004814:	2b01      	cmp	r3, #1
 8004816:	d002      	beq.n	800481e <RCCEx_PLLSAI1_Config+0x62>
 8004818:	2b02      	cmp	r3, #2
 800481a:	d009      	beq.n	8004830 <RCCEx_PLLSAI1_Config+0x74>
 800481c:	e020      	b.n	8004860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481e:	4b60      	ldr	r3, [pc, #384]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11d      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482e:	e01a      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004830:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e013      	b.n	800486a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004842:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484e:	4b54      	ldr	r3, [pc, #336]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485e:	e006      	b.n	800486e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e004      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	430b      	orrs	r3, r1
 800488c:	4944      	ldr	r1, [pc, #272]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d17d      	bne.n	8004994 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004898:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fd fb06 	bl	8001eb4 <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048aa:	e009      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ac:	f7fd fb02 	bl	8001eb4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d902      	bls.n	80048c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	73fb      	strb	r3, [r7, #15]
        break;
 80048be:	e005      	b.n	80048cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c0:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ef      	bne.n	80048ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d160      	bne.n	8004994 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d111      	bne.n	80048fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	0211      	lsls	r1, r2, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	0912      	lsrs	r2, r2, #4
 80048f0:	0452      	lsls	r2, r2, #17
 80048f2:	430a      	orrs	r2, r1
 80048f4:	492a      	ldr	r1, [pc, #168]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]
 80048fa:	e027      	b.n	800494c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d112      	bne.n	8004928 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004902:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800490a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	0211      	lsls	r1, r2, #8
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6912      	ldr	r2, [r2, #16]
 8004918:	0852      	lsrs	r2, r2, #1
 800491a:	3a01      	subs	r2, #1
 800491c:	0552      	lsls	r2, r2, #21
 800491e:	430a      	orrs	r2, r1
 8004920:	491f      	ldr	r1, [pc, #124]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
 8004926:	e011      	b.n	800494c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6952      	ldr	r2, [r2, #20]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0652      	lsls	r2, r2, #25
 8004944:	430a      	orrs	r2, r1
 8004946:	4916      	ldr	r1, [pc, #88]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd faac 	bl	8001eb4 <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004960:	f7fd faa8 	bl	8001eb4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
          break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ef      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049b2:	4b6a      	ldr	r3, [pc, #424]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049be:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10d      	bne.n	80049ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
       ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049d6:	4b61      	ldr	r3, [pc, #388]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
       ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d047      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	e044      	b.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d018      	beq.n	8004a2a <RCCEx_PLLSAI2_Config+0x86>
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d825      	bhi.n	8004a48 <RCCEx_PLLSAI2_Config+0xa4>
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <RCCEx_PLLSAI2_Config+0x62>
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d009      	beq.n	8004a18 <RCCEx_PLLSAI2_Config+0x74>
 8004a04:	e020      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a06:	4b55      	ldr	r3, [pc, #340]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e01a      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a18:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e013      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a2a:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a36:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a46:	e006      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e004      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10d      	bne.n	8004a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	430b      	orrs	r3, r1
 8004a74:	4939      	ldr	r1, [pc, #228]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d167      	bne.n	8004b50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a80:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fa12 	bl	8001eb4 <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a94:	f7fd fa0e 	bl	8001eb4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d14a      	bne.n	8004b50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d111      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac0:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6892      	ldr	r2, [r2, #8]
 8004ad0:	0211      	lsls	r1, r2, #8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0912      	lsrs	r2, r2, #4
 8004ad8:	0452      	lsls	r2, r2, #17
 8004ada:	430a      	orrs	r2, r1
 8004adc:	491f      	ldr	r1, [pc, #124]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	614b      	str	r3, [r1, #20]
 8004ae2:	e011      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6892      	ldr	r2, [r2, #8]
 8004af4:	0211      	lsls	r1, r2, #8
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6912      	ldr	r2, [r2, #16]
 8004afa:	0852      	lsrs	r2, r2, #1
 8004afc:	3a01      	subs	r2, #1
 8004afe:	0652      	lsls	r2, r2, #25
 8004b00:	430a      	orrs	r2, r1
 8004b02:	4916      	ldr	r1, [pc, #88]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b08:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fd f9ce 	bl	8001eb4 <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b1a:	e009      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b1c:	f7fd f9ca 	bl	8001eb4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d902      	bls.n	8004b30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b2e:	e005      	b.n	8004b3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ef      	beq.n	8004b1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	4904      	ldr	r1, [pc, #16]	; (8004b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e049      	b.n	8004c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fc fd9e 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fde2 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e049      	b.n	8004cb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f841 	bl	8004cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 fd8b 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x24>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e02f      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x58>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e022      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x72>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e015      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e09c      	b.n	8004eb0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xb6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xc6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xe6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xf6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f8d0 	bl	8005f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2f      	ldr	r2, [pc, #188]	; (8004ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x142>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_PWM_Start+0x144>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_TIM_PWM_Start+0x1fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIM_PWM_Start+0x200>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_TIM_PWM_Start+0x204>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d115      	bne.n	8004e9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_TIM_PWM_Start+0x208>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	d015      	beq.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d011      	beq.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	e008      	b.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40013400 	.word	0x40013400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e097      	b.n	8005020 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fc fb9b 	bl	8001640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f20:	f023 0307 	bic.w	r3, r3, #7
 8004f24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f000 fc19 	bl	8005768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f7c:	f023 030c 	bic.w	r3, r3, #12
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	031b      	lsls	r3, r3, #12
 8004fac:	4313      	orrs	r3, r2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005038:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005040:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005048:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005050:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d110      	bne.n	800507a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d102      	bne.n	8005064 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800505e:	7b7b      	ldrb	r3, [r7, #13]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d001      	beq.n	8005068 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e069      	b.n	800513c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005078:	e031      	b.n	80050de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d110      	bne.n	80050a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005086:	7b3b      	ldrb	r3, [r7, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e055      	b.n	800513c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a0:	e01d      	b.n	80050de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ae:	7b7b      	ldrb	r3, [r7, #13]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b4:	7b3b      	ldrb	r3, [r7, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e03e      	b.n	800513c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_Encoder_Start+0xc4>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d008      	beq.n	80050fc <HAL_TIM_Encoder_Start+0xd4>
 80050ea:	e00f      	b.n	800510c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 ff41 	bl	8005f7c <TIM_CCxChannelCmd>
      break;
 80050fa:	e016      	b.n	800512a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2201      	movs	r2, #1
 8005102:	2104      	movs	r1, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f000 ff39 	bl	8005f7c <TIM_CCxChannelCmd>
      break;
 800510a:	e00e      	b.n	800512a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 ff31 	bl	8005f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	2104      	movs	r1, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f000 ff2a 	bl	8005f7c <TIM_CCxChannelCmd>
      break;
 8005128:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0202 	mvn.w	r2, #2
 8005178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 facb 	bl	800572a <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fabd 	bl	8005716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 face 	bl	800573e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0204 	mvn.w	r2, #4
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 faa5 	bl	800572a <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa97 	bl	8005716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 faa8 	bl	800573e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0208 	mvn.w	r2, #8
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa7f 	bl	800572a <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa71 	bl	8005716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fa82 	bl	800573e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0210 	mvn.w	r2, #16
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2208      	movs	r2, #8
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa59 	bl	800572a <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa4b 	bl	8005716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa5c 	bl	800573e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0201 	mvn.w	r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa29 	bl	8005702 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 ff0c 	bl	80060ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff04 	bl	8006100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa1b 	bl	8005752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00c      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0220 	mvn.w	r2, #32
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fecc 	bl	80060d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005362:	2302      	movs	r3, #2
 8005364:	e0ff      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b14      	cmp	r3, #20
 8005372:	f200 80f0 	bhi.w	8005556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053d1 	.word	0x080053d1
 8005380:	08005557 	.word	0x08005557
 8005384:	08005557 	.word	0x08005557
 8005388:	08005557 	.word	0x08005557
 800538c:	08005411 	.word	0x08005411
 8005390:	08005557 	.word	0x08005557
 8005394:	08005557 	.word	0x08005557
 8005398:	08005557 	.word	0x08005557
 800539c:	08005453 	.word	0x08005453
 80053a0:	08005557 	.word	0x08005557
 80053a4:	08005557 	.word	0x08005557
 80053a8:	08005557 	.word	0x08005557
 80053ac:	08005493 	.word	0x08005493
 80053b0:	08005557 	.word	0x08005557
 80053b4:	08005557 	.word	0x08005557
 80053b8:	08005557 	.word	0x08005557
 80053bc:	080054d5 	.word	0x080054d5
 80053c0:	08005557 	.word	0x08005557
 80053c4:	08005557 	.word	0x08005557
 80053c8:	08005557 	.word	0x08005557
 80053cc:	08005515 	.word	0x08005515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fa60 	bl	800589c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0208 	orr.w	r2, r2, #8
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0204 	bic.w	r2, r2, #4
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	619a      	str	r2, [r3, #24]
      break;
 800540e:	e0a5      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fad0 	bl	80059bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	021a      	lsls	r2, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	619a      	str	r2, [r3, #24]
      break;
 8005450:	e084      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fb39 	bl	8005ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0208 	orr.w	r2, r2, #8
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0204 	bic.w	r2, r2, #4
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
      break;
 8005490:	e064      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fba1 	bl	8005be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	021a      	lsls	r2, r3, #8
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	61da      	str	r2, [r3, #28]
      break;
 80054d2:	e043      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fbea 	bl	8005cb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005512:	e023      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fc2e 	bl	8005d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005554:	e002      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
      break;
 800555a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop

08005570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e0b6      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x18a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d03e      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0xd8>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	f200 8087 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_TIM_ConfigClockSource+0x176>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d87f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d01a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xaa>
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d87b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d050      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x11e>
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d877      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d03c      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xfe>
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d873      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d058      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x13e>
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d86f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d064      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15e>
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d86b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d060      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15e>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d867      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15e>
 8005614:	2b10      	cmp	r3, #16
 8005616:	d05a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x15e>
 8005618:	e062      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	f000 fc87 	bl	8005f3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e04f      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	f000 fc70 	bl	8005f3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566a:	609a      	str	r2, [r3, #8]
      break;
 800566c:	e03c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fbe4 	bl	8005e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2150      	movs	r1, #80	; 0x50
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fc3d 	bl	8005f06 <TIM_ITRx_SetConfig>
      break;
 800568c:	e02c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fc03 	bl	8005ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2160      	movs	r1, #96	; 0x60
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fc2d 	bl	8005f06 <TIM_ITRx_SetConfig>
      break;
 80056ac:	e01c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 fbc4 	bl	8005e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fc1d 	bl	8005f06 <TIM_ITRx_SetConfig>
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f000 fc14 	bl	8005f06 <TIM_ITRx_SetConfig>
      break;
 80056de:	e003      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <TIM_Base_SetConfig+0x118>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <TIM_Base_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3a      	ldr	r2, [pc, #232]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	; (800587c <TIM_Base_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01f      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d01b      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <TIM_Base_SetConfig+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d017      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_Base_SetConfig+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <TIM_Base_SetConfig+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <TIM_Base_SetConfig+0x12c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <TIM_Base_SetConfig+0x130>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d108      	bne.n	8005814 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <TIM_Base_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <TIM_Base_SetConfig+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a10      	ldr	r2, [pc, #64]	; (8005894 <TIM_Base_SetConfig+0x12c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0f      	ldr	r2, [pc, #60]	; (8005898 <TIM_Base_SetConfig+0x130>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	615a      	str	r2, [r3, #20]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800

0800589c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 0201 	bic.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 0302 	bic.w	r3, r3, #2
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <TIM_OC1_SetConfig+0x10c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00f      	beq.n	800591c <TIM_OC1_SetConfig+0x80>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <TIM_OC1_SetConfig+0x110>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00b      	beq.n	800591c <TIM_OC1_SetConfig+0x80>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <TIM_OC1_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <TIM_OC1_SetConfig+0x80>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <TIM_OC1_SetConfig+0x118>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_OC1_SetConfig+0x80>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <TIM_OC1_SetConfig+0x11c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0308 	bic.w	r3, r3, #8
 8005922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <TIM_OC1_SetConfig+0x10c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_OC1_SetConfig+0xc2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <TIM_OC1_SetConfig+0x110>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_OC1_SetConfig+0xc2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <TIM_OC1_SetConfig+0x114>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_OC1_SetConfig+0xc2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <TIM_OC1_SetConfig+0x118>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_OC1_SetConfig+0xc2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <TIM_OC1_SetConfig+0x11c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d111      	bne.n	8005982 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	621a      	str	r2, [r3, #32]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f023 0210 	bic.w	r2, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0320 	bic.w	r3, r3, #32
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a28      	ldr	r2, [pc, #160]	; (8005abc <TIM_OC2_SetConfig+0x100>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC2_SetConfig+0x6c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <TIM_OC2_SetConfig+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d10d      	bne.n	8005a44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <TIM_OC2_SetConfig+0x100>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00f      	beq.n	8005a6c <TIM_OC2_SetConfig+0xb0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <TIM_OC2_SetConfig+0x104>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_OC2_SetConfig+0xb0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <TIM_OC2_SetConfig+0x108>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_OC2_SetConfig+0xb0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <TIM_OC2_SetConfig+0x10c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC2_SetConfig+0xb0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a19      	ldr	r2, [pc, #100]	; (8005acc <TIM_OC2_SetConfig+0x110>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d113      	bne.n	8005a94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800

08005ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <TIM_OC3_SetConfig+0xfc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC3_SetConfig+0x6a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <TIM_OC3_SetConfig+0x100>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10d      	bne.n	8005b56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <TIM_OC3_SetConfig+0xfc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <TIM_OC3_SetConfig+0xae>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <TIM_OC3_SetConfig+0x100>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_OC3_SetConfig+0xae>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <TIM_OC3_SetConfig+0x104>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_OC3_SetConfig+0xae>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <TIM_OC3_SetConfig+0x108>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC3_SetConfig+0xae>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_OC3_SetConfig+0x10c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d113      	bne.n	8005ba6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	621a      	str	r2, [r3, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <TIM_OC4_SetConfig+0xc0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00f      	beq.n	8005c64 <TIM_OC4_SetConfig+0x84>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <TIM_OC4_SetConfig+0xc4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_OC4_SetConfig+0x84>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <TIM_OC4_SetConfig+0xc8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_OC4_SetConfig+0x84>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <TIM_OC4_SetConfig+0xcc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC4_SetConfig+0x84>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <TIM_OC4_SetConfig+0xd0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d109      	bne.n	8005c78 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40013400 	.word	0x40013400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC5_SetConfig+0xb4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_OC5_SetConfig+0x7a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <TIM_OC5_SetConfig+0xb8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_OC5_SetConfig+0x7a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <TIM_OC5_SetConfig+0xbc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_OC5_SetConfig+0x7a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <TIM_OC5_SetConfig+0xc0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_OC5_SetConfig+0x7a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <TIM_OC5_SetConfig+0xc4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d109      	bne.n	8005d42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	051b      	lsls	r3, r3, #20
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <TIM_OC6_SetConfig+0xb8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00f      	beq.n	8005df8 <TIM_OC6_SetConfig+0x7c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <TIM_OC6_SetConfig+0xbc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_OC6_SetConfig+0x7c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <TIM_OC6_SetConfig+0xc0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_OC6_SetConfig+0x7c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a15      	ldr	r2, [pc, #84]	; (8005e40 <TIM_OC6_SetConfig+0xc4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC6_SetConfig+0x7c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a14      	ldr	r2, [pc, #80]	; (8005e44 <TIM_OC6_SetConfig+0xc8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d109      	bne.n	8005e0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40014400 	.word	0x40014400
 8005e44:	40014800 	.word	0x40014800

08005e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0201 	bic.w	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 030a 	bic.w	r3, r3, #10
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f023 0210 	bic.w	r2, r3, #16
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	031b      	lsls	r3, r3, #12
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f043 0307 	orr.w	r3, r3, #7
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	021a      	lsls	r2, r3, #8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2201      	movs	r2, #1
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1a      	ldr	r2, [r3, #32]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e068      	b.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d108      	bne.n	8006026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800601a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d018      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1a      	ldr	r2, [pc, #104]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10c      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4313      	orrs	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40014000 	.word	0x40014000

080060d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e040      	b.n	80061a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb fb58 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2224      	movs	r2, #36	; 0x24
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 ff50 	bl	8007000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc95 	bl	8006a90 <UART_SetConfig>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e01b      	b.n	80061a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 ffcf 	bl	8007144 <UART_CheckIdleState>
 80061a6:	4603      	mov	r3, r0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d178      	bne.n	80062ba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Transmit+0x24>
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e071      	b.n	80062bc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2221      	movs	r2, #33	; 0x21
 80061e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e6:	f7fb fe65 	bl	8001eb4 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x68>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006220:	e030      	b.n	8006284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f001 f831 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e03c      	b.n	80062bc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006254:	b292      	uxth	r2, r2
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3302      	adds	r3, #2
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e008      	b.n	8006272 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	b292      	uxth	r2, r2
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c8      	bne.n	8006222 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fffa 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e005      	b.n	80062bc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e000      	b.n	80062bc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
  }
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4613      	mov	r3, r2
 80062d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d165      	bne.n	80063a6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_UART_Transmit_DMA+0x22>
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e05e      	b.n	80063a8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2221      	movs	r2, #33	; 0x21
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	2b00      	cmp	r3, #0
 8006314:	d027      	beq.n	8006366 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <HAL_UART_Transmit_DMA+0xec>)
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_UART_Transmit_DMA+0xf0>)
 8006324:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_UART_Transmit_DMA+0xf4>)
 800632c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	2200      	movs	r2, #0
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633e:	4619      	mov	r1, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3328      	adds	r3, #40	; 0x28
 8006346:	461a      	mov	r2, r3
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	f7fb ffad 	bl	80022a8 <HAL_DMA_Start_IT>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2210      	movs	r2, #16
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e020      	b.n	80063a8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2240      	movs	r2, #64	; 0x40
 800636c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	613b      	str	r3, [r7, #16]
   return(result);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	623a      	str	r2, [r7, #32]
 8006390:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	69f9      	ldr	r1, [r7, #28]
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	61bb      	str	r3, [r7, #24]
   return(result);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	; 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	080075b9 	.word	0x080075b9
 80063b4:	08007653 	.word	0x08007653
 80063b8:	080077d9 	.word	0x080077d9

080063bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d137      	bne.n	8006444 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Receive_DMA+0x24>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e030      	b.n	8006446 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_UART_Receive_DMA+0x94>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d01f      	beq.n	8006434 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	613b      	str	r3, [r7, #16]
   return(result);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	6a3a      	ldr	r2, [r7, #32]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	61bb      	str	r3, [r7, #24]
   return(result);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	461a      	mov	r2, r3
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 ff92 	bl	8007364 <UART_Start_Receive_DMA>
 8006440:	4603      	mov	r3, r0
 8006442:	e000      	b.n	8006446 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
  }
}
 8006446:	4618      	mov	r0, r3
 8006448:	3728      	adds	r7, #40	; 0x28
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40008000 	.word	0x40008000

08006454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b0ba      	sub	sp, #232	; 0xe8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800647a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800647e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006482:	4013      	ands	r3, r2
 8006484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d115      	bne.n	80064bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00f      	beq.n	80064bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 82ae 	beq.w	8006a0e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      }
      return;
 80064ba:	e2a8      	b.n	8006a0e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8117 	beq.w	80066f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064d6:	4b85      	ldr	r3, [pc, #532]	; (80066ec <HAL_UART_IRQHandler+0x298>)
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 810a 	beq.w	80066f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d011      	beq.n	8006510 <HAL_UART_IRQHandler+0xbc>
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006506:	f043 0201 	orr.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <HAL_UART_IRQHandler+0xec>
 800651c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2202      	movs	r2, #2
 800652e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d011      	beq.n	8006570 <HAL_UART_IRQHandler+0x11c>
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2204      	movs	r2, #4
 800655e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	f043 0208 	orr.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_UART_IRQHandler+0x18a>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8214 	beq.w	8006a12 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d005      	beq.n	8006636 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800662a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006632:	2b00      	cmp	r3, #0
 8006634:	d04f      	beq.n	80066d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 ff5a 	bl	80074f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d141      	bne.n	80066ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800667a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800668e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1d9      	bne.n	800664a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669a:	2b00      	cmp	r3, #0
 800669c:	d013      	beq.n	80066c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <HAL_UART_IRQHandler+0x29c>)
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fb fe9a 	bl	80023e4 <HAL_DMA_Abort_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e00f      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9cc 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	e00b      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f9c8 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e007      	b.n	80066e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9c4 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80066e4:	e195      	b.n	8006a12 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e6:	bf00      	nop
    return;
 80066e8:	e193      	b.n	8006a12 <HAL_UART_IRQHandler+0x5be>
 80066ea:	bf00      	nop
 80066ec:	04000120 	.word	0x04000120
 80066f0:	08007857 	.word	0x08007857

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	f040 814e 	bne.w	800699a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8147 	beq.w	800699a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8140 	beq.w	800699a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	f040 80b8 	bne.w	80068a2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800673e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8167 	beq.w	8006a16 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800674e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006752:	429a      	cmp	r2, r3
 8006754:	f080 815f 	bcs.w	8006a16 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800675e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8086 	bne.w	8006880 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800678c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800679e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1da      	bne.n	8006774 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e1      	bne.n	80067be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800680a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800681e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800682c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e3      	bne.n	80067fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800684e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006862:	65bb      	str	r3, [r7, #88]	; 0x58
 8006864:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e4      	bne.n	8006840 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687a:	4618      	mov	r0, r3
 800687c:	f7fb fd74 	bl	8002368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006892:	b29b      	uxth	r3, r3
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8ec 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068a0:	e0b9      	b.n	8006a16 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80ab 	beq.w	8006a1a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80068c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80a6 	beq.w	8006a1a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068f0:	647b      	str	r3, [r7, #68]	; 0x44
 80068f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e4      	bne.n	80068ce <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	623b      	str	r3, [r7, #32]
   return(result);
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006928:	633a      	str	r2, [r7, #48]	; 0x30
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800692e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e3      	bne.n	8006904 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	60fb      	str	r3, [r7, #12]
   return(result);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	617b      	str	r3, [r7, #20]
   return(result);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e4      	bne.n	8006950 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800698c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f870 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006998:	e03f      	b.n	8006a1a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <HAL_UART_IRQHandler+0x570>
 80069a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 ff8a 	bl	80078d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069c2:	e02d      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01c      	beq.n	8006a1e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
    }
    return;
 80069ec:	e017      	b.n	8006a1e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d012      	beq.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
 80069fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00c      	beq.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 ff3b 	bl	8007882 <UART_EndTransmit_IT>
    return;
 8006a0c:	e008      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a0e:	bf00      	nop
 8006a10:	e006      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a12:	bf00      	nop
 8006a14:	e004      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a16:	bf00      	nop
 8006a18:	e002      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a20:	37e8      	adds	r7, #232	; 0xe8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a94:	b08a      	sub	sp, #40	; 0x28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4ba4      	ldr	r3, [pc, #656]	; (8006d50 <UART_SetConfig+0x2c0>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a99      	ldr	r2, [pc, #612]	; (8006d54 <UART_SetConfig+0x2c4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a90      	ldr	r2, [pc, #576]	; (8006d58 <UART_SetConfig+0x2c8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d126      	bne.n	8006b68 <UART_SetConfig+0xd8>
 8006b1a:	4b90      	ldr	r3, [pc, #576]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d81b      	bhi.n	8006b60 <UART_SetConfig+0xd0>
 8006b28:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0xa0>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b46:	e116      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4e:	e112      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b56:	e10e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5e:	e10a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b66:	e106      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a7c      	ldr	r2, [pc, #496]	; (8006d60 <UART_SetConfig+0x2d0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d138      	bne.n	8006be4 <UART_SetConfig+0x154>
 8006b72:	4b7a      	ldr	r3, [pc, #488]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b78:	f003 030c 	and.w	r3, r3, #12
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d82d      	bhi.n	8006bdc <UART_SetConfig+0x14c>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <UART_SetConfig+0xf8>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bbd 	.word	0x08006bbd
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006bdd 	.word	0x08006bdd
 8006b94:	08006bdd 	.word	0x08006bdd
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006bdd 	.word	0x08006bdd
 8006ba0:	08006bdd 	.word	0x08006bdd
 8006ba4:	08006bdd 	.word	0x08006bdd
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	08006bdd 	.word	0x08006bdd
 8006bb0:	08006bdd 	.word	0x08006bdd
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e0d8      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e0d4      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e0d0      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e0cc      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e0c8      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a5e      	ldr	r2, [pc, #376]	; (8006d64 <UART_SetConfig+0x2d4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d125      	bne.n	8006c3a <UART_SetConfig+0x1aa>
 8006bee:	4b5b      	ldr	r3, [pc, #364]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bf8:	2b30      	cmp	r3, #48	; 0x30
 8006bfa:	d016      	beq.n	8006c2a <UART_SetConfig+0x19a>
 8006bfc:	2b30      	cmp	r3, #48	; 0x30
 8006bfe:	d818      	bhi.n	8006c32 <UART_SetConfig+0x1a2>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d00a      	beq.n	8006c1a <UART_SetConfig+0x18a>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d814      	bhi.n	8006c32 <UART_SetConfig+0x1a2>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <UART_SetConfig+0x182>
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d008      	beq.n	8006c22 <UART_SetConfig+0x192>
 8006c10:	e00f      	b.n	8006c32 <UART_SetConfig+0x1a2>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c18:	e0ad      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c20:	e0a9      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c22:	2304      	movs	r3, #4
 8006c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c28:	e0a5      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c30:	e0a1      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c32:	2310      	movs	r3, #16
 8006c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c38:	e09d      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <UART_SetConfig+0x2d8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d125      	bne.n	8006c90 <UART_SetConfig+0x200>
 8006c44:	4b45      	ldr	r3, [pc, #276]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c50:	d016      	beq.n	8006c80 <UART_SetConfig+0x1f0>
 8006c52:	2bc0      	cmp	r3, #192	; 0xc0
 8006c54:	d818      	bhi.n	8006c88 <UART_SetConfig+0x1f8>
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d00a      	beq.n	8006c70 <UART_SetConfig+0x1e0>
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d814      	bhi.n	8006c88 <UART_SetConfig+0x1f8>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <UART_SetConfig+0x1d8>
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d008      	beq.n	8006c78 <UART_SetConfig+0x1e8>
 8006c66:	e00f      	b.n	8006c88 <UART_SetConfig+0x1f8>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e082      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c70:	2302      	movs	r3, #2
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e07e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e07a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e076      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e072      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a35      	ldr	r2, [pc, #212]	; (8006d6c <UART_SetConfig+0x2dc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d12a      	bne.n	8006cf0 <UART_SetConfig+0x260>
 8006c9a:	4b30      	ldr	r3, [pc, #192]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca8:	d01a      	beq.n	8006ce0 <UART_SetConfig+0x250>
 8006caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cae:	d81b      	bhi.n	8006ce8 <UART_SetConfig+0x258>
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d00c      	beq.n	8006cd0 <UART_SetConfig+0x240>
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cba:	d815      	bhi.n	8006ce8 <UART_SetConfig+0x258>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <UART_SetConfig+0x238>
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d008      	beq.n	8006cd8 <UART_SetConfig+0x248>
 8006cc6:	e00f      	b.n	8006ce8 <UART_SetConfig+0x258>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e052      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e04e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e04a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e046      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e042      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <UART_SetConfig+0x2c4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d13a      	bne.n	8006d70 <UART_SetConfig+0x2e0>
 8006cfa:	4b18      	ldr	r3, [pc, #96]	; (8006d5c <UART_SetConfig+0x2cc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d08:	d01a      	beq.n	8006d40 <UART_SetConfig+0x2b0>
 8006d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d0e:	d81b      	bhi.n	8006d48 <UART_SetConfig+0x2b8>
 8006d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d14:	d00c      	beq.n	8006d30 <UART_SetConfig+0x2a0>
 8006d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1a:	d815      	bhi.n	8006d48 <UART_SetConfig+0x2b8>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <UART_SetConfig+0x298>
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d24:	d008      	beq.n	8006d38 <UART_SetConfig+0x2a8>
 8006d26:	e00f      	b.n	8006d48 <UART_SetConfig+0x2b8>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e022      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e01e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e01a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e016      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e012      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d50:	efff69f3 	.word	0xefff69f3
 8006d54:	40008000 	.word	0x40008000
 8006d58:	40013800 	.word	0x40013800
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a9f      	ldr	r2, [pc, #636]	; (8006ff8 <UART_SetConfig+0x568>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d17a      	bne.n	8006e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d824      	bhi.n	8006dd2 <UART_SetConfig+0x342>
 8006d88:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0x300>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dd3 	.word	0x08006dd3
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dd3 	.word	0x08006dd3
 8006da0:	08006dc3 	.word	0x08006dc3
 8006da4:	08006dd3 	.word	0x08006dd3
 8006da8:	08006dd3 	.word	0x08006dd3
 8006dac:	08006dd3 	.word	0x08006dd3
 8006db0:	08006dcb 	.word	0x08006dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fd f98c 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006db8:	61f8      	str	r0, [r7, #28]
        break;
 8006dba:	e010      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b8f      	ldr	r3, [pc, #572]	; (8006ffc <UART_SetConfig+0x56c>)
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e00d      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc2:	f7fd f8ed 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8006dc6:	61f8      	str	r0, [r7, #28]
        break;
 8006dc8:	e009      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dce:	61fb      	str	r3, [r7, #28]
        break;
 8006dd0:	e005      	b.n	8006dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80fb 	beq.w	8006fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4413      	add	r3, r2
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d305      	bcc.n	8006e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d903      	bls.n	8006e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e08:	e0e8      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	461c      	mov	r4, r3
 8006e10:	4615      	mov	r5, r2
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	022b      	lsls	r3, r5, #8
 8006e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e20:	0222      	lsls	r2, r4, #8
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	6849      	ldr	r1, [r1, #4]
 8006e26:	0849      	lsrs	r1, r1, #1
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	4681      	mov	r9, r0
 8006e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8006e32:	eb43 0b09 	adc.w	fp, r3, r9
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e44:	4650      	mov	r0, sl
 8006e46:	4659      	mov	r1, fp
 8006e48:	f7f9 fa12 	bl	8000270 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4613      	mov	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5a:	d308      	bcc.n	8006e6e <UART_SetConfig+0x3de>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e62:	d204      	bcs.n	8006e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	60da      	str	r2, [r3, #12]
 8006e6c:	e0b6      	b.n	8006fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e74:	e0b2      	b.n	8006fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7e:	d15e      	bne.n	8006f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d828      	bhi.n	8006eda <UART_SetConfig+0x44a>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x400>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006edb 	.word	0x08006edb
 8006ea0:	08006ecb 	.word	0x08006ecb
 8006ea4:	08006edb 	.word	0x08006edb
 8006ea8:	08006edb 	.word	0x08006edb
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006ed3 	.word	0x08006ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb4:	f7fd f90c 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	61f8      	str	r0, [r7, #28]
        break;
 8006eba:	e014      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ebc:	f7fd f91e 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8006ec0:	61f8      	str	r0, [r7, #28]
        break;
 8006ec2:	e010      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec4:	4b4d      	ldr	r3, [pc, #308]	; (8006ffc <UART_SetConfig+0x56c>)
 8006ec6:	61fb      	str	r3, [r7, #28]
        break;
 8006ec8:	e00d      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fd f869 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8006ece:	61f8      	str	r0, [r7, #28]
        break;
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	e005      	b.n	8006ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d077      	beq.n	8006fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	005a      	lsls	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	441a      	add	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b0f      	cmp	r3, #15
 8006f06:	d916      	bls.n	8006f36 <UART_SetConfig+0x4a6>
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0e:	d212      	bcs.n	8006f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f023 030f 	bic.w	r3, r3, #15
 8006f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	8afb      	ldrh	r3, [r7, #22]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	8afa      	ldrh	r2, [r7, #22]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e052      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f3c:	e04e      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d827      	bhi.n	8006f96 <UART_SetConfig+0x506>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <UART_SetConfig+0x4bc>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f79 	.word	0x08006f79
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	08006f97 	.word	0x08006f97
 8006f5c:	08006f87 	.word	0x08006f87
 8006f60:	08006f97 	.word	0x08006f97
 8006f64:	08006f97 	.word	0x08006f97
 8006f68:	08006f97 	.word	0x08006f97
 8006f6c:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fd f8ae 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8006f74:	61f8      	str	r0, [r7, #28]
        break;
 8006f76:	e014      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7fd f8c0 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8006f7c:	61f8      	str	r0, [r7, #28]
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <UART_SetConfig+0x56c>)
 8006f82:	61fb      	str	r3, [r7, #28]
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fd f80b 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8006f8a:	61f8      	str	r0, [r7, #28]
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d019      	beq.n	8006fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	085a      	lsrs	r2, r3, #1
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b0f      	cmp	r3, #15
 8006fc0:	d909      	bls.n	8006fd6 <UART_SetConfig+0x546>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc8:	d205      	bcs.n	8006fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e002      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3728      	adds	r7, #40	; 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	00f42400 	.word	0x00f42400

08007000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01a      	beq.n	8007116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fe:	d10a      	bne.n	8007116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
  }
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b098      	sub	sp, #96	; 0x60
 8007148:	af02      	add	r7, sp, #8
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007154:	f7fa feae 	bl	8001eb4 <HAL_GetTick>
 8007158:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d12e      	bne.n	80071c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007170:	2200      	movs	r2, #0
 8007172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f88c 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d021      	beq.n	80071c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007196:	653b      	str	r3, [r7, #80]	; 0x50
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
 80071a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e062      	b.n	800728c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d149      	bne.n	8007268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f856 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03c      	beq.n	8007268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	623b      	str	r3, [r7, #32]
   return(result);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 800720e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	64bb      	str	r3, [r7, #72]	; 0x48
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007240:	61fa      	str	r2, [r7, #28]
 8007242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	69b9      	ldr	r1, [r7, #24]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	617b      	str	r3, [r7, #20]
   return(result);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e011      	b.n	800728c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3758      	adds	r7, #88	; 0x58
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	e049      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d045      	beq.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fa fe01 	bl	8001eb4 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e048      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d031      	beq.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d110      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2208      	movs	r2, #8
 80072ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f8ff 	bl	80074f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2208      	movs	r2, #8
 80072f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e029      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d111      	bne.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800731e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f8e5 	bl	80074f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e00f      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4013      	ands	r3, r2
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	429a      	cmp	r2, r3
 8007356:	d0a6      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b096      	sub	sp, #88	; 0x58
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2222      	movs	r2, #34	; 0x22
 800738c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007394:	2b00      	cmp	r3, #0
 8007396:	d028      	beq.n	80073ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739c:	4a3e      	ldr	r2, [pc, #248]	; (8007498 <UART_Start_Receive_DMA+0x134>)
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a4:	4a3d      	ldr	r2, [pc, #244]	; (800749c <UART_Start_Receive_DMA+0x138>)
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ac:	4a3c      	ldr	r2, [pc, #240]	; (80074a0 <UART_Start_Receive_DMA+0x13c>)
 80073ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b4:	2200      	movs	r2, #0
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3324      	adds	r3, #36	; 0x24
 80073c2:	4619      	mov	r1, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	461a      	mov	r2, r3
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f7fa ff6c 	bl	80022a8 <HAL_DMA_Start_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2210      	movs	r2, #16
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e051      	b.n	800748e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d018      	beq.n	8007424 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007410:	64bb      	str	r3, [r7, #72]	; 0x48
 8007412:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800741e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	653b      	str	r3, [r7, #80]	; 0x50
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007444:	637a      	str	r2, [r7, #52]	; 0x34
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e5      	bne.n	8007424 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007478:	623a      	str	r2, [r7, #32]
 800747a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	61bb      	str	r3, [r7, #24]
   return(result);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3758      	adds	r7, #88	; 0x58
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	0800766f 	.word	0x0800766f
 800749c:	0800779b 	.word	0x0800779b
 80074a0:	080077d9 	.word	0x080077d9

080074a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	613b      	str	r3, [r7, #16]
   return(result);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80074e4:	bf00      	nop
 80074e6:	3724      	adds	r7, #36	; 0x24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b095      	sub	sp, #84	; 0x54
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800750c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007516:	643b      	str	r3, [r7, #64]	; 0x40
 8007518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800751c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e6      	bne.n	80074f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	61fb      	str	r3, [r7, #28]
   return(result);
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	64bb      	str	r3, [r7, #72]	; 0x48
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800754a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	2b01      	cmp	r3, #1
 8007564:	d118      	bne.n	8007598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	60bb      	str	r3, [r7, #8]
   return(result);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f023 0310 	bic.w	r3, r3, #16
 800757a:	647b      	str	r3, [r7, #68]	; 0x44
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6979      	ldr	r1, [r7, #20]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	613b      	str	r3, [r7, #16]
   return(result);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075ac:	bf00      	nop
 80075ae:	3754      	adds	r7, #84	; 0x54
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b090      	sub	sp, #64	; 0x40
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d137      	bne.n	8007644 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80075d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	623b      	str	r3, [r7, #32]
   return(result);
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075fc:	633a      	str	r2, [r7, #48]	; 0x30
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e5      	bne.n	80075dc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	60fb      	str	r3, [r7, #12]
   return(result);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
 8007626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	617b      	str	r3, [r7, #20]
   return(result);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007642:	e002      	b.n	800764a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007644:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007646:	f7ff f9ef 	bl	8006a28 <HAL_UART_TxCpltCallback>
}
 800764a:	bf00      	nop
 800764c:	3740      	adds	r7, #64	; 0x40
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff f9eb 	bl	8006a3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b09c      	sub	sp, #112	; 0x70
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d171      	bne.n	800776e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800768a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768c:	2200      	movs	r2, #0
 800768e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80076b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e6      	bne.n	8007692 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	667b      	str	r3, [r7, #100]	; 0x64
 80076dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3308      	adds	r3, #8
 80076e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076e4:	647a      	str	r2, [r7, #68]	; 0x44
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e5      	bne.n	80076c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	623b      	str	r3, [r7, #32]
   return(result);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770e:	663b      	str	r3, [r7, #96]	; 0x60
 8007710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007718:	633a      	str	r2, [r7, #48]	; 0x30
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800772c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772e:	2220      	movs	r2, #32
 8007730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007738:	2b01      	cmp	r3, #1
 800773a:	d118      	bne.n	800776e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	60fb      	str	r3, [r7, #12]
   return(result);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 0310 	bic.w	r3, r3, #16
 8007750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	69b9      	ldr	r1, [r7, #24]
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	617b      	str	r3, [r7, #20]
   return(result);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800776e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007770:	2200      	movs	r2, #0
 8007772:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	2b01      	cmp	r3, #1
 800777a:	d107      	bne.n	800778c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007782:	4619      	mov	r1, r3
 8007784:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007786:	f7ff f977 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800778a:	e002      	b.n	8007792 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800778c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800778e:	f7f9 fc79 	bl	8001084 <HAL_UART_RxCpltCallback>
}
 8007792:	bf00      	nop
 8007794:	3770      	adds	r7, #112	; 0x70
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d109      	bne.n	80077ca <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4619      	mov	r1, r3
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff f958 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077c8:	e002      	b.n	80077d0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff f940 	bl	8006a50 <HAL_UART_RxHalfCpltCallback>
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d109      	bne.n	8007816 <UART_DMAError+0x3e>
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b21      	cmp	r3, #33	; 0x21
 8007806:	d106      	bne.n	8007816 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007810:	6978      	ldr	r0, [r7, #20]
 8007812:	f7ff fe47 	bl	80074a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d109      	bne.n	8007838 <UART_DMAError+0x60>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b22      	cmp	r3, #34	; 0x22
 8007828:	d106      	bne.n	8007838 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f7ff fe5c 	bl	80074f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783e:	f043 0210 	orr.w	r2, r3, #16
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007848:	6978      	ldr	r0, [r7, #20]
 800784a:	f7ff f90b 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800784e:	bf00      	nop
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff f8f5 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b088      	sub	sp, #32
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60bb      	str	r3, [r7, #8]
   return(result);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff f8ad 	bl	8006a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ce:	bf00      	nop
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <VL53L4CD_SetI2CAddress>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	4603      	mov	r3, r0
 80078f2:	460a      	mov	r2, r1
 80078f4:	80fb      	strh	r3, [r7, #6]
 80078f6:	4613      	mov	r3, r2
 80078f8:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 80078fe:	797b      	ldrb	r3, [r7, #5]
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f7f9 fd71 	bl	80013f0 <VL53L4CD_WrByte>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	4313      	orrs	r3, r2
 8007916:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <VL53L4CD_GetSensorId>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	4603      	mov	r3, r0
 800792a:	6039      	str	r1, [r7, #0]
 800792c:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	f240 110f 	movw	r1, #271	; 0x10f
 800793a:	4618      	mov	r0, r3
 800793c:	f7f9 fcec 	bl	8001318 <VL53L4CD_RdWord>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4313      	orrs	r3, r2
 8007948:	73fb      	strb	r3, [r7, #15]
	return status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <VL53L4CD_SensorInit>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 800796a:	f107 0209 	add.w	r2, r7, #9
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	21e5      	movs	r1, #229	; 0xe5
 8007972:	4618      	mov	r0, r3
 8007974:	f7f9 fd0a 	bl	800138c <VL53L4CD_RdByte>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4313      	orrs	r3, r2
 8007980:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 8007982:	7a7b      	ldrb	r3, [r7, #9]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d102      	bne.n	800798e <VL53L4CD_SensorInit+0x3a>
		{
			continue_loop = (uint8_t)0;
 8007988:	2300      	movs	r3, #0
 800798a:	737b      	strb	r3, [r7, #13]
 800798c:	e00b      	b.n	80079a6 <VL53L4CD_SensorInit+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 800798e:	897b      	ldrh	r3, [r7, #10]
 8007990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007994:	d203      	bcs.n	800799e <VL53L4CD_SensorInit+0x4a>
		{
			i++;
 8007996:	897b      	ldrh	r3, [r7, #10]
 8007998:	3301      	adds	r3, #1
 800799a:	817b      	strh	r3, [r7, #10]
 800799c:	e003      	b.n	80079a6 <VL53L4CD_SensorInit+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 800799e:	2300      	movs	r3, #0
 80079a0:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 80079a2:	23ff      	movs	r3, #255	; 0xff
 80079a4:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f9 fdaa 	bl	8001504 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 80079b0:	7b7b      	ldrb	r3, [r7, #13]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d0d9      	beq.n	800796a <VL53L4CD_SensorInit+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80079b6:	232d      	movs	r3, #45	; 0x2d
 80079b8:	73bb      	strb	r3, [r7, #14]
 80079ba:	e011      	b.n	80079e0 <VL53L4CD_SensorInit+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	3b2d      	subs	r3, #45	; 0x2d
				VL53L4CD_DEFAULT_CONFIGURATION[
 80079c4:	4a44      	ldr	r2, [pc, #272]	; (8007ad8 <VL53L4CD_SensorInit+0x184>)
 80079c6:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f9 fd10 	bl	80013f0 <VL53L4CD_WrByte>
 80079d0:	4603      	mov	r3, r0
 80079d2:	461a      	mov	r2, r3
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	3301      	adds	r3, #1
 80079de:	73bb      	strb	r3, [r7, #14]
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b87      	cmp	r3, #135	; 0x87
 80079e4:	d9ea      	bls.n	80079bc <VL53L4CD_SensorInit+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	2240      	movs	r2, #64	; 0x40
 80079ea:	2187      	movs	r1, #135	; 0x87
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7f9 fcff 	bl	80013f0 <VL53L4CD_WrByte>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8007a00:	2301      	movs	r3, #1
 8007a02:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8007a04:	f107 0209 	add.w	r2, r7, #9
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f8c5 	bl	8007b9c <VL53L4CD_CheckForDataReady>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8007a1c:	7a7b      	ldrb	r3, [r7, #9]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <VL53L4CD_SensorInit+0xd4>
		{
			continue_loop = (uint8_t)0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	737b      	strb	r3, [r7, #13]
 8007a26:	e00b      	b.n	8007a40 <VL53L4CD_SensorInit+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8007a28:	897b      	ldrh	r3, [r7, #10]
 8007a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a2e:	d203      	bcs.n	8007a38 <VL53L4CD_SensorInit+0xe4>
		{
			i++;
 8007a30:	897b      	ldrh	r3, [r7, #10]
 8007a32:	3301      	adds	r3, #1
 8007a34:	817b      	strh	r3, [r7, #10]
 8007a36:	e003      	b.n	8007a40 <VL53L4CD_SensorInit+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8007a3c:	23ff      	movs	r3, #255	; 0xff
 8007a3e:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	2101      	movs	r1, #1
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f9 fd5d 	bl	8001504 <WaitMs>
	}while(continue_loop == (uint8_t)1);
 8007a4a:	7b7b      	ldrb	r3, [r7, #13]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d0d9      	beq.n	8007a04 <VL53L4CD_SensorInit+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f842 	bl	8007adc <VL53L4CD_ClearInterrupt>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 f882 	bl	8007b6e <VL53L4CD_StopRanging>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	2209      	movs	r2, #9
 8007a78:	2108      	movs	r1, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f9 fcb8 	bl	80013f0 <VL53L4CD_WrByte>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	210b      	movs	r1, #11
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f9 fcad 	bl	80013f0 <VL53L4CD_WrByte>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007aa6:	2124      	movs	r1, #36	; 0x24
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f9 fcc9 	bl	8001440 <VL53L4CD_WrWord>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	2200      	movs	r2, #0
 8007abc:	2132      	movs	r1, #50	; 0x32
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f8b0 	bl	8007c24 <VL53L4CD_SetRangeTiming>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	73fb      	strb	r3, [r7, #15]

	return status;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	08009208 	.word	0x08009208

08007adc <VL53L4CD_ClearInterrupt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	2201      	movs	r2, #1
 8007aee:	2186      	movs	r1, #134	; 0x86
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f9 fc7d 	bl	80013f0 <VL53L4CD_WrByte>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	73fb      	strb	r3, [r7, #15]
	return status;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	4603      	mov	r3, r0
 8007b12:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8007b18:	f107 0208 	add.w	r2, r7, #8
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	216c      	movs	r1, #108	; 0x6c
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7f9 fbbd 	bl	80012a0 <VL53L4CD_RdDWord>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <VL53L4CD_StartRanging+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	2221      	movs	r2, #33	; 0x21
 8007b3a:	2187      	movs	r1, #135	; 0x87
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7f9 fc57 	bl	80013f0 <VL53L4CD_WrByte>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	73fb      	strb	r3, [r7, #15]
 8007b4c:	e00a      	b.n	8007b64 <VL53L4CD_StartRanging+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2240      	movs	r2, #64	; 0x40
 8007b52:	2187      	movs	r1, #135	; 0x87
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f9 fc4b 	bl	80013f0 <VL53L4CD_WrByte>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	4603      	mov	r3, r0
 8007b76:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2187      	movs	r1, #135	; 0x87
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7f9 fc34 	bl	80013f0 <VL53L4CD_WrByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	73fb      	strb	r3, [r7, #15]
	return status;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8007bac:	f107 020d 	add.w	r2, r7, #13
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	2130      	movs	r1, #48	; 0x30
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f9 fbe9 	bl	800138c <VL53L4CD_RdByte>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8007bc4:	7b7b      	ldrb	r3, [r7, #13]
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 8007bce:	7b7b      	ldrb	r3, [r7, #13]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8007bd6:	7b7b      	ldrb	r3, [r7, #13]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <VL53L4CD_CheckForDataReady+0x46>
	{
		int_pol = (uint8_t)0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
 8007be0:	e001      	b.n	8007be6 <VL53L4CD_CheckForDataReady+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8007be6:	f107 020d 	add.w	r2, r7, #13
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2131      	movs	r1, #49	; 0x31
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7f9 fbcc 	bl	800138c <VL53L4CD_RdByte>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	f003 0201 	and.w	r2, r3, #1
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d103      	bne.n	8007c12 <VL53L4CD_CheckForDataReady+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e002      	b.n	8007c18 <VL53L4CD_CheckForDataReady+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08c      	sub	sp, #48	; 0x30
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8007c40:	4b86      	ldr	r3, [pc, #536]	; (8007e5c <VL53L4CD_SetRangeTiming+0x238>)
 8007c42:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8007c44:	f107 0214 	add.w	r2, r7, #20
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	2106      	movs	r1, #6
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f9 fb63 	bl	8001318 <VL53L4CD_RdWord>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(osc_frequency != (uint16_t)0)
 8007c60:	8abb      	ldrh	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d012      	beq.n	8007c8c <VL53L4CD_SetRangeTiming+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8007c72:	8abb      	ldrh	r3, [r7, #20]
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c7a:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8007c7e:	4613      	mov	r3, r2
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4413      	add	r3, r2
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	099b      	lsrs	r3, r3, #6
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c8a:	e005      	b.n	8007c98 <VL53L4CD_SetRangeTiming+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8007c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c90:	f063 0301 	orn	r3, r3, #1
 8007c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10) 
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d906      	bls.n	8007cac <VL53L4CD_SetRangeTiming+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2bc8      	cmp	r3, #200	; 0xc8
 8007ca2:	d803      	bhi.n	8007cac <VL53L4CD_SetRangeTiming+0x88>
 8007ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <VL53L4CD_SetRangeTiming+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8007cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cb0:	f063 0301 	orn	r3, r3, #1
 8007cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007cb8:	e05e      	b.n	8007d78 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d111      	bne.n	8007ce4 <VL53L4CD_SetRangeTiming+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 8007cc0:	89fb      	ldrh	r3, [r7, #14]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	216c      	movs	r1, #108	; 0x6c
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7f9 fbe8 	bl	800149c <VL53L4CD_WrDWord>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		timing_budget_us -= (uint32_t)2500;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	e049      	b.n	8007d78 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d93f      	bls.n	8007d6c <VL53L4CD_SetRangeTiming+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 8007cec:	f107 0216 	add.w	r2, r7, #22
 8007cf0:	89fb      	ldrh	r3, [r7, #14]
 8007cf2:	21de      	movs	r1, #222	; 0xde
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7f9 fb0f 	bl	8001318 <VL53L4CD_RdWord>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8007d08:	8afb      	ldrh	r3, [r7, #22]
 8007d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	ee07 3a90 	vmov	s15, r3
 8007d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d20:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8007d36:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d3e:	89fb      	ldrh	r3, [r7, #14]
 8007d40:	ee17 2a90 	vmov	r2, s15
 8007d44:	216c      	movs	r1, #108	; 0x6c
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f9 fba8 	bl	800149c <VL53L4CD_WrDWord>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	f5a3 5386 	sub.w	r3, r3, #4288	; 0x10c0
 8007d60:	3b0c      	subs	r3, #12
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
		timing_budget_us /= (uint32_t)2;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6a:	e005      	b.n	8007d78 <VL53L4CD_SetRangeTiming+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8007d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d70:	f063 0301 	orn	r3, r3, #1
 8007d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 8007d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d7c:	2bfe      	cmp	r3, #254	; 0xfe
 8007d7e:	d067      	beq.n	8007e50 <VL53L4CD_SetRangeTiming+0x22c>
	{
				ms_byte = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	85bb      	strh	r3, [r7, #44]	; 0x2c
				timing_budget_us = timing_budget_us << 12;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	031b      	lsls	r3, r3, #12
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
				tmp = macro_period_us*(uint32_t)16;
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	09da      	lsrs	r2, r3, #7
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	441a      	add	r2, r3
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	099b      	lsrs	r3, r3, #6
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8007da4:	e005      	b.n	8007db2 <VL53L4CD_SetRangeTiming+0x18e>
						 ls_byte = ls_byte >> 1;
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8007dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007dae:	3301      	adds	r3, #1
 8007db0:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f4      	bne.n	8007da6 <VL53L4CD_SetRangeTiming+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8007dbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8007dca:	4413      	add	r3, r2
 8007dcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8007dce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007dd0:	89fb      	ldrh	r3, [r7, #14]
 8007dd2:	215e      	movs	r1, #94	; 0x5e
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f9 fb33 	bl	8001440 <VL53L4CD_WrWord>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				ms_byte = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	85bb      	strh	r3, [r7, #44]	; 0x2c
				tmp = macro_period_us*(uint32_t)12;
 8007dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dee:	4613      	mov	r3, r2
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	09da      	lsrs	r2, r3, #7
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	441a      	add	r2, r3
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	099b      	lsrs	r3, r3, #6
 8007e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8007e0c:	e005      	b.n	8007e1a <VL53L4CD_SetRangeTiming+0x1f6>
						 ls_byte = ls_byte >> 1;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8007e14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e16:	3301      	adds	r3, #1
 8007e18:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f4      	bne.n	8007e0e <VL53L4CD_SetRangeTiming+0x1ea>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8007e24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e26:	021b      	lsls	r3, r3, #8
 8007e28:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8007e32:	4413      	add	r3, r2
 8007e34:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8007e36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007e38:	89fb      	ldrh	r3, [r7, #14]
 8007e3a:	2161      	movs	r1, #97	; 0x61
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7f9 faff 	bl	8001440 <VL53L4CD_WrWord>
 8007e42:	4603      	mov	r3, r0
 8007e44:	461a      	mov	r2, r3
 8007e46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return status;
 8007e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3730      	adds	r7, #48	; 0x30
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	3f870a3d 	.word	0x3f870a3d

08007e60 <VL53L4CD_GetResult>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8007e60:	b5b0      	push	{r4, r5, r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8007e72:	4b52      	ldr	r3, [pc, #328]	; (8007fbc <VL53L4CD_GetResult+0x15c>)
 8007e74:	f107 0408 	add.w	r4, r7, #8
 8007e78:	461d      	mov	r5, r3
 8007e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e82:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 8007e86:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	2189      	movs	r1, #137	; 0x89
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7f9 fa7c 	bl	800138c <VL53L4CD_RdByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8007ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (temp_8 < (uint8_t)24)
 8007eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eb4:	2b17      	cmp	r3, #23
 8007eb6:	d807      	bhi.n	8007ec8 <VL53L4CD_GetResult+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8007eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ebc:	3328      	adds	r3, #40	; 0x28
 8007ebe:	443b      	add	r3, r7
 8007ec0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	p_result->range_status = temp_8;
 8007ec8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8007ed0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	218c      	movs	r1, #140	; 0x8c
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7f9 fa1d 	bl	8001318 <VL53L4CD_RdWord>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 8007eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eee:	0a1b      	lsrs	r3, r3, #8
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8007ef6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	218e      	movs	r1, #142	; 0x8e
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f9 fa0a 	bl	8001318 <VL53L4CD_RdWord>
 8007f04:	4603      	mov	r3, r0
 8007f06:	461a      	mov	r2, r3
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8007f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 8007f1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2190      	movs	r1, #144	; 0x90
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f9 f9f7 	bl	8001318 <VL53L4CD_RdWord>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8007f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8007f42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	2192      	movs	r1, #146	; 0x92
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f9 f9e4 	bl	8001318 <VL53L4CD_RdWord>
 8007f50:	4603      	mov	r3, r0
 8007f52:	461a      	mov	r2, r3
 8007f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8007f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f60:	089b      	lsrs	r3, r3, #2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 8007f68:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	2196      	movs	r1, #150	; 0x96
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7f9 f9d1 	bl	8001318 <VL53L4CD_RdWord>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8007f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	899b      	ldrh	r3, [r3, #12]
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	899b      	ldrh	r3, [r3, #12]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	80da      	strh	r2, [r3, #6]

	return status;
 8007fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3728      	adds	r7, #40	; 0x28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	080091a8 	.word	0x080091a8

08007fc0 <VL53L4CD_SetOffset>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460a      	mov	r2, r1
 8007fca:	80fb      	strh	r3, [r7, #6]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8007fd4:	88bb      	ldrh	r3, [r7, #4]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 8007fda:	89ba      	ldrh	r2, [r7, #12]
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	211e      	movs	r1, #30
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f9 fa2d 	bl	8001440 <VL53L4CD_WrWord>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2120      	movs	r1, #32
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f9 fa22 	bl	8001440 <VL53L4CD_WrWord>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4313      	orrs	r3, r2
 8008004:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2200      	movs	r2, #0
 800800a:	2122      	movs	r1, #34	; 0x22
 800800c:	4618      	mov	r0, r3
 800800e:	f7f9 fa17 	bl	8001440 <VL53L4CD_WrWord>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	4313      	orrs	r3, r2
 800801a:	73fb      	strb	r3, [r7, #15]
	return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <std>:
 8008028:	2300      	movs	r3, #0
 800802a:	b510      	push	{r4, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	e9c0 3300 	strd	r3, r3, [r0]
 8008032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008036:	6083      	str	r3, [r0, #8]
 8008038:	8181      	strh	r1, [r0, #12]
 800803a:	6643      	str	r3, [r0, #100]	; 0x64
 800803c:	81c2      	strh	r2, [r0, #14]
 800803e:	6183      	str	r3, [r0, #24]
 8008040:	4619      	mov	r1, r3
 8008042:	2208      	movs	r2, #8
 8008044:	305c      	adds	r0, #92	; 0x5c
 8008046:	f000 f9ff 	bl	8008448 <memset>
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <std+0x58>)
 800804c:	6263      	str	r3, [r4, #36]	; 0x24
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <std+0x5c>)
 8008050:	62a3      	str	r3, [r4, #40]	; 0x28
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <std+0x60>)
 8008054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <std+0x64>)
 8008058:	6323      	str	r3, [r4, #48]	; 0x30
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <std+0x68>)
 800805c:	6224      	str	r4, [r4, #32]
 800805e:	429c      	cmp	r4, r3
 8008060:	d006      	beq.n	8008070 <std+0x48>
 8008062:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008066:	4294      	cmp	r4, r2
 8008068:	d002      	beq.n	8008070 <std+0x48>
 800806a:	33d0      	adds	r3, #208	; 0xd0
 800806c:	429c      	cmp	r4, r3
 800806e:	d105      	bne.n	800807c <std+0x54>
 8008070:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f000 ba5e 	b.w	8008538 <__retarget_lock_init_recursive>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	08008299 	.word	0x08008299
 8008084:	080082bb 	.word	0x080082bb
 8008088:	080082f3 	.word	0x080082f3
 800808c:	08008317 	.word	0x08008317
 8008090:	200004c8 	.word	0x200004c8

08008094 <stdio_exit_handler>:
 8008094:	4a02      	ldr	r2, [pc, #8]	; (80080a0 <stdio_exit_handler+0xc>)
 8008096:	4903      	ldr	r1, [pc, #12]	; (80080a4 <stdio_exit_handler+0x10>)
 8008098:	4803      	ldr	r0, [pc, #12]	; (80080a8 <stdio_exit_handler+0x14>)
 800809a:	f000 b869 	b.w	8008170 <_fwalk_sglue>
 800809e:	bf00      	nop
 80080a0:	20000028 	.word	0x20000028
 80080a4:	08008de5 	.word	0x08008de5
 80080a8:	20000034 	.word	0x20000034

080080ac <cleanup_stdio>:
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <cleanup_stdio+0x34>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	d001      	beq.n	80080bc <cleanup_stdio+0x10>
 80080b8:	f000 fe94 	bl	8008de4 <_fflush_r>
 80080bc:	68a1      	ldr	r1, [r4, #8]
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <cleanup_stdio+0x38>)
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <cleanup_stdio+0x1e>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fe8d 	bl	8008de4 <_fflush_r>
 80080ca:	68e1      	ldr	r1, [r4, #12]
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <cleanup_stdio+0x3c>)
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d004      	beq.n	80080dc <cleanup_stdio+0x30>
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f000 be84 	b.w	8008de4 <_fflush_r>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	200004c8 	.word	0x200004c8
 80080e4:	20000530 	.word	0x20000530
 80080e8:	20000598 	.word	0x20000598

080080ec <global_stdio_init.part.0>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <global_stdio_init.part.0+0x30>)
 80080f0:	4c0b      	ldr	r4, [pc, #44]	; (8008120 <global_stdio_init.part.0+0x34>)
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <global_stdio_init.part.0+0x38>)
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	2200      	movs	r2, #0
 80080fa:	2104      	movs	r1, #4
 80080fc:	f7ff ff94 	bl	8008028 <std>
 8008100:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008104:	2201      	movs	r2, #1
 8008106:	2109      	movs	r1, #9
 8008108:	f7ff ff8e 	bl	8008028 <std>
 800810c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008110:	2202      	movs	r2, #2
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008116:	2112      	movs	r1, #18
 8008118:	f7ff bf86 	b.w	8008028 <std>
 800811c:	20000600 	.word	0x20000600
 8008120:	200004c8 	.word	0x200004c8
 8008124:	08008095 	.word	0x08008095

08008128 <__sfp_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sfp_lock_acquire+0x8>)
 800812a:	f000 ba06 	b.w	800853a <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20000609 	.word	0x20000609

08008134 <__sfp_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sfp_lock_release+0x8>)
 8008136:	f000 ba01 	b.w	800853c <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20000609 	.word	0x20000609

08008140 <__sinit>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	f7ff fff0 	bl	8008128 <__sfp_lock_acquire>
 8008148:	6a23      	ldr	r3, [r4, #32]
 800814a:	b11b      	cbz	r3, 8008154 <__sinit+0x14>
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f7ff bff0 	b.w	8008134 <__sfp_lock_release>
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <__sinit+0x28>)
 8008156:	6223      	str	r3, [r4, #32]
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <__sinit+0x2c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f5      	bne.n	800814c <__sinit+0xc>
 8008160:	f7ff ffc4 	bl	80080ec <global_stdio_init.part.0>
 8008164:	e7f2      	b.n	800814c <__sinit+0xc>
 8008166:	bf00      	nop
 8008168:	080080ad 	.word	0x080080ad
 800816c:	20000600 	.word	0x20000600

08008170 <_fwalk_sglue>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4607      	mov	r7, r0
 8008176:	4688      	mov	r8, r1
 8008178:	4614      	mov	r4, r2
 800817a:	2600      	movs	r6, #0
 800817c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008180:	f1b9 0901 	subs.w	r9, r9, #1
 8008184:	d505      	bpl.n	8008192 <_fwalk_sglue+0x22>
 8008186:	6824      	ldr	r4, [r4, #0]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f7      	bne.n	800817c <_fwalk_sglue+0xc>
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d907      	bls.n	80081a8 <_fwalk_sglue+0x38>
 8008198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819c:	3301      	adds	r3, #1
 800819e:	d003      	beq.n	80081a8 <_fwalk_sglue+0x38>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	4306      	orrs	r6, r0
 80081a8:	3568      	adds	r5, #104	; 0x68
 80081aa:	e7e9      	b.n	8008180 <_fwalk_sglue+0x10>

080081ac <iprintf>:
 80081ac:	b40f      	push	{r0, r1, r2, r3}
 80081ae:	b507      	push	{r0, r1, r2, lr}
 80081b0:	4906      	ldr	r1, [pc, #24]	; (80081cc <iprintf+0x20>)
 80081b2:	ab04      	add	r3, sp, #16
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6881      	ldr	r1, [r0, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f000 fae1 	bl	8008784 <_vfiprintf_r>
 80081c2:	b003      	add	sp, #12
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b004      	add	sp, #16
 80081ca:	4770      	bx	lr
 80081cc:	20000080 	.word	0x20000080

080081d0 <putchar>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <putchar+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	6882      	ldr	r2, [r0, #8]
 80081d8:	f000 be8e 	b.w	8008ef8 <_putc_r>
 80081dc:	20000080 	.word	0x20000080

080081e0 <_puts_r>:
 80081e0:	6a03      	ldr	r3, [r0, #32]
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	6884      	ldr	r4, [r0, #8]
 80081e6:	4605      	mov	r5, r0
 80081e8:	460e      	mov	r6, r1
 80081ea:	b90b      	cbnz	r3, 80081f0 <_puts_r+0x10>
 80081ec:	f7ff ffa8 	bl	8008140 <__sinit>
 80081f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081f2:	07db      	lsls	r3, r3, #31
 80081f4:	d405      	bmi.n	8008202 <_puts_r+0x22>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	0598      	lsls	r0, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_puts_r+0x22>
 80081fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fe:	f000 f99c 	bl	800853a <__retarget_lock_acquire_recursive>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	d513      	bpl.n	8008230 <_puts_r+0x50>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	b18b      	cbz	r3, 8008230 <_puts_r+0x50>
 800820c:	3e01      	subs	r6, #1
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008214:	3b01      	subs	r3, #1
 8008216:	60a3      	str	r3, [r4, #8]
 8008218:	b9e9      	cbnz	r1, 8008256 <_puts_r+0x76>
 800821a:	2b00      	cmp	r3, #0
 800821c:	da2e      	bge.n	800827c <_puts_r+0x9c>
 800821e:	4622      	mov	r2, r4
 8008220:	210a      	movs	r1, #10
 8008222:	4628      	mov	r0, r5
 8008224:	f000 f87b 	bl	800831e <__swbuf_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d007      	beq.n	800823c <_puts_r+0x5c>
 800822c:	250a      	movs	r5, #10
 800822e:	e007      	b.n	8008240 <_puts_r+0x60>
 8008230:	4621      	mov	r1, r4
 8008232:	4628      	mov	r0, r5
 8008234:	f000 f8b0 	bl	8008398 <__swsetup_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	d0e7      	beq.n	800820c <_puts_r+0x2c>
 800823c:	f04f 35ff 	mov.w	r5, #4294967295
 8008240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008242:	07da      	lsls	r2, r3, #31
 8008244:	d405      	bmi.n	8008252 <_puts_r+0x72>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	059b      	lsls	r3, r3, #22
 800824a:	d402      	bmi.n	8008252 <_puts_r+0x72>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 f975 	bl	800853c <__retarget_lock_release_recursive>
 8008252:	4628      	mov	r0, r5
 8008254:	bd70      	pop	{r4, r5, r6, pc}
 8008256:	2b00      	cmp	r3, #0
 8008258:	da04      	bge.n	8008264 <_puts_r+0x84>
 800825a:	69a2      	ldr	r2, [r4, #24]
 800825c:	429a      	cmp	r2, r3
 800825e:	dc06      	bgt.n	800826e <_puts_r+0x8e>
 8008260:	290a      	cmp	r1, #10
 8008262:	d004      	beq.n	800826e <_puts_r+0x8e>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	6022      	str	r2, [r4, #0]
 800826a:	7019      	strb	r1, [r3, #0]
 800826c:	e7cf      	b.n	800820e <_puts_r+0x2e>
 800826e:	4622      	mov	r2, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f854 	bl	800831e <__swbuf_r>
 8008276:	3001      	adds	r0, #1
 8008278:	d1c9      	bne.n	800820e <_puts_r+0x2e>
 800827a:	e7df      	b.n	800823c <_puts_r+0x5c>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	250a      	movs	r5, #10
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	701d      	strb	r5, [r3, #0]
 8008286:	e7db      	b.n	8008240 <_puts_r+0x60>

08008288 <puts>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <puts+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f7ff bfa7 	b.w	80081e0 <_puts_r>
 8008292:	bf00      	nop
 8008294:	20000080 	.word	0x20000080

08008298 <__sread>:
 8008298:	b510      	push	{r4, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	f000 f8fc 	bl	800849c <_read_r>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	bfab      	itete	ge
 80082a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082aa:	89a3      	ldrhlt	r3, [r4, #12]
 80082ac:	181b      	addge	r3, r3, r0
 80082ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082b2:	bfac      	ite	ge
 80082b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082b6:	81a3      	strhlt	r3, [r4, #12]
 80082b8:	bd10      	pop	{r4, pc}

080082ba <__swrite>:
 80082ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082be:	461f      	mov	r7, r3
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	05db      	lsls	r3, r3, #23
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4616      	mov	r6, r2
 80082ca:	d505      	bpl.n	80082d8 <__swrite+0x1e>
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	2302      	movs	r3, #2
 80082d2:	2200      	movs	r2, #0
 80082d4:	f000 f8d0 	bl	8008478 <_lseek_r>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	4632      	mov	r2, r6
 80082e6:	463b      	mov	r3, r7
 80082e8:	4628      	mov	r0, r5
 80082ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ee:	f000 b8e7 	b.w	80084c0 <_write_r>

080082f2 <__sseek>:
 80082f2:	b510      	push	{r4, lr}
 80082f4:	460c      	mov	r4, r1
 80082f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fa:	f000 f8bd 	bl	8008478 <_lseek_r>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	bf15      	itete	ne
 8008304:	6560      	strne	r0, [r4, #84]	; 0x54
 8008306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800830a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800830e:	81a3      	strheq	r3, [r4, #12]
 8008310:	bf18      	it	ne
 8008312:	81a3      	strhne	r3, [r4, #12]
 8008314:	bd10      	pop	{r4, pc}

08008316 <__sclose>:
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 b89d 	b.w	8008458 <_close_r>

0800831e <__swbuf_r>:
 800831e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008320:	460e      	mov	r6, r1
 8008322:	4614      	mov	r4, r2
 8008324:	4605      	mov	r5, r0
 8008326:	b118      	cbz	r0, 8008330 <__swbuf_r+0x12>
 8008328:	6a03      	ldr	r3, [r0, #32]
 800832a:	b90b      	cbnz	r3, 8008330 <__swbuf_r+0x12>
 800832c:	f7ff ff08 	bl	8008140 <__sinit>
 8008330:	69a3      	ldr	r3, [r4, #24]
 8008332:	60a3      	str	r3, [r4, #8]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	071a      	lsls	r2, r3, #28
 8008338:	d525      	bpl.n	8008386 <__swbuf_r+0x68>
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	b31b      	cbz	r3, 8008386 <__swbuf_r+0x68>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	1a98      	subs	r0, r3, r2
 8008344:	6963      	ldr	r3, [r4, #20]
 8008346:	b2f6      	uxtb	r6, r6
 8008348:	4283      	cmp	r3, r0
 800834a:	4637      	mov	r7, r6
 800834c:	dc04      	bgt.n	8008358 <__swbuf_r+0x3a>
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 fd47 	bl	8008de4 <_fflush_r>
 8008356:	b9e0      	cbnz	r0, 8008392 <__swbuf_r+0x74>
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	3b01      	subs	r3, #1
 800835c:	60a3      	str	r3, [r4, #8]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	701e      	strb	r6, [r3, #0]
 8008366:	6962      	ldr	r2, [r4, #20]
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	429a      	cmp	r2, r3
 800836c:	d004      	beq.n	8008378 <__swbuf_r+0x5a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	07db      	lsls	r3, r3, #31
 8008372:	d506      	bpl.n	8008382 <__swbuf_r+0x64>
 8008374:	2e0a      	cmp	r6, #10
 8008376:	d104      	bne.n	8008382 <__swbuf_r+0x64>
 8008378:	4621      	mov	r1, r4
 800837a:	4628      	mov	r0, r5
 800837c:	f000 fd32 	bl	8008de4 <_fflush_r>
 8008380:	b938      	cbnz	r0, 8008392 <__swbuf_r+0x74>
 8008382:	4638      	mov	r0, r7
 8008384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 f805 	bl	8008398 <__swsetup_r>
 800838e:	2800      	cmp	r0, #0
 8008390:	d0d5      	beq.n	800833e <__swbuf_r+0x20>
 8008392:	f04f 37ff 	mov.w	r7, #4294967295
 8008396:	e7f4      	b.n	8008382 <__swbuf_r+0x64>

08008398 <__swsetup_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4b2a      	ldr	r3, [pc, #168]	; (8008444 <__swsetup_r+0xac>)
 800839c:	4605      	mov	r5, r0
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	460c      	mov	r4, r1
 80083a2:	b118      	cbz	r0, 80083ac <__swsetup_r+0x14>
 80083a4:	6a03      	ldr	r3, [r0, #32]
 80083a6:	b90b      	cbnz	r3, 80083ac <__swsetup_r+0x14>
 80083a8:	f7ff feca 	bl	8008140 <__sinit>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b2:	0718      	lsls	r0, r3, #28
 80083b4:	d422      	bmi.n	80083fc <__swsetup_r+0x64>
 80083b6:	06d9      	lsls	r1, r3, #27
 80083b8:	d407      	bmi.n	80083ca <__swsetup_r+0x32>
 80083ba:	2309      	movs	r3, #9
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e034      	b.n	8008434 <__swsetup_r+0x9c>
 80083ca:	0758      	lsls	r0, r3, #29
 80083cc:	d512      	bpl.n	80083f4 <__swsetup_r+0x5c>
 80083ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d0:	b141      	cbz	r1, 80083e4 <__swsetup_r+0x4c>
 80083d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083d6:	4299      	cmp	r1, r3
 80083d8:	d002      	beq.n	80083e0 <__swsetup_r+0x48>
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 f8b0 	bl	8008540 <_free_r>
 80083e0:	2300      	movs	r3, #0
 80083e2:	6363      	str	r3, [r4, #52]	; 0x34
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	2300      	movs	r3, #0
 80083ee:	6063      	str	r3, [r4, #4]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f043 0308 	orr.w	r3, r3, #8
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	b94b      	cbnz	r3, 8008414 <__swsetup_r+0x7c>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840a:	d003      	beq.n	8008414 <__swsetup_r+0x7c>
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fd36 	bl	8008e80 <__smakebuf_r>
 8008414:	89a0      	ldrh	r0, [r4, #12]
 8008416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800841a:	f010 0301 	ands.w	r3, r0, #1
 800841e:	d00a      	beq.n	8008436 <__swsetup_r+0x9e>
 8008420:	2300      	movs	r3, #0
 8008422:	60a3      	str	r3, [r4, #8]
 8008424:	6963      	ldr	r3, [r4, #20]
 8008426:	425b      	negs	r3, r3
 8008428:	61a3      	str	r3, [r4, #24]
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	b943      	cbnz	r3, 8008440 <__swsetup_r+0xa8>
 800842e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008432:	d1c4      	bne.n	80083be <__swsetup_r+0x26>
 8008434:	bd38      	pop	{r3, r4, r5, pc}
 8008436:	0781      	lsls	r1, r0, #30
 8008438:	bf58      	it	pl
 800843a:	6963      	ldrpl	r3, [r4, #20]
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	e7f4      	b.n	800842a <__swsetup_r+0x92>
 8008440:	2000      	movs	r0, #0
 8008442:	e7f7      	b.n	8008434 <__swsetup_r+0x9c>
 8008444:	20000080 	.word	0x20000080

08008448 <memset>:
 8008448:	4402      	add	r2, r0
 800844a:	4603      	mov	r3, r0
 800844c:	4293      	cmp	r3, r2
 800844e:	d100      	bne.n	8008452 <memset+0xa>
 8008450:	4770      	bx	lr
 8008452:	f803 1b01 	strb.w	r1, [r3], #1
 8008456:	e7f9      	b.n	800844c <memset+0x4>

08008458 <_close_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d06      	ldr	r5, [pc, #24]	; (8008474 <_close_r+0x1c>)
 800845c:	2300      	movs	r3, #0
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	602b      	str	r3, [r5, #0]
 8008464:	f7f9 fc0f 	bl	8001c86 <_close>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_close_r+0x1a>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_close_r+0x1a>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20000604 	.word	0x20000604

08008478 <_lseek_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d07      	ldr	r5, [pc, #28]	; (8008498 <_lseek_r+0x20>)
 800847c:	4604      	mov	r4, r0
 800847e:	4608      	mov	r0, r1
 8008480:	4611      	mov	r1, r2
 8008482:	2200      	movs	r2, #0
 8008484:	602a      	str	r2, [r5, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	f7f9 fc24 	bl	8001cd4 <_lseek>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_lseek_r+0x1e>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_lseek_r+0x1e>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20000604 	.word	0x20000604

0800849c <_read_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_read_r+0x20>)
 80084a0:	4604      	mov	r4, r0
 80084a2:	4608      	mov	r0, r1
 80084a4:	4611      	mov	r1, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7f9 fbb2 	bl	8001c14 <_read>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_read_r+0x1e>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_read_r+0x1e>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000604 	.word	0x20000604

080084c0 <_write_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_write_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f9 fbbd 	bl	8001c4e <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_write_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_write_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20000604 	.word	0x20000604

080084e4 <__errno>:
 80084e4:	4b01      	ldr	r3, [pc, #4]	; (80084ec <__errno+0x8>)
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000080 	.word	0x20000080

080084f0 <__libc_init_array>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	4d0d      	ldr	r5, [pc, #52]	; (8008528 <__libc_init_array+0x38>)
 80084f4:	4c0d      	ldr	r4, [pc, #52]	; (800852c <__libc_init_array+0x3c>)
 80084f6:	1b64      	subs	r4, r4, r5
 80084f8:	10a4      	asrs	r4, r4, #2
 80084fa:	2600      	movs	r6, #0
 80084fc:	42a6      	cmp	r6, r4
 80084fe:	d109      	bne.n	8008514 <__libc_init_array+0x24>
 8008500:	4d0b      	ldr	r5, [pc, #44]	; (8008530 <__libc_init_array+0x40>)
 8008502:	4c0c      	ldr	r4, [pc, #48]	; (8008534 <__libc_init_array+0x44>)
 8008504:	f000 fd5e 	bl	8008fc4 <_init>
 8008508:	1b64      	subs	r4, r4, r5
 800850a:	10a4      	asrs	r4, r4, #2
 800850c:	2600      	movs	r6, #0
 800850e:	42a6      	cmp	r6, r4
 8008510:	d105      	bne.n	800851e <__libc_init_array+0x2e>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	f855 3b04 	ldr.w	r3, [r5], #4
 8008518:	4798      	blx	r3
 800851a:	3601      	adds	r6, #1
 800851c:	e7ee      	b.n	80084fc <__libc_init_array+0xc>
 800851e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008522:	4798      	blx	r3
 8008524:	3601      	adds	r6, #1
 8008526:	e7f2      	b.n	800850e <__libc_init_array+0x1e>
 8008528:	080092a0 	.word	0x080092a0
 800852c:	080092a0 	.word	0x080092a0
 8008530:	080092a0 	.word	0x080092a0
 8008534:	080092a4 	.word	0x080092a4

08008538 <__retarget_lock_init_recursive>:
 8008538:	4770      	bx	lr

0800853a <__retarget_lock_acquire_recursive>:
 800853a:	4770      	bx	lr

0800853c <__retarget_lock_release_recursive>:
 800853c:	4770      	bx	lr
	...

08008540 <_free_r>:
 8008540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008542:	2900      	cmp	r1, #0
 8008544:	d044      	beq.n	80085d0 <_free_r+0x90>
 8008546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854a:	9001      	str	r0, [sp, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f1a1 0404 	sub.w	r4, r1, #4
 8008552:	bfb8      	it	lt
 8008554:	18e4      	addlt	r4, r4, r3
 8008556:	f000 f8df 	bl	8008718 <__malloc_lock>
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <_free_r+0x94>)
 800855c:	9801      	ldr	r0, [sp, #4]
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	b933      	cbnz	r3, 8008570 <_free_r+0x30>
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	6014      	str	r4, [r2, #0]
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800856c:	f000 b8da 	b.w	8008724 <__malloc_unlock>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d908      	bls.n	8008586 <_free_r+0x46>
 8008574:	6825      	ldr	r5, [r4, #0]
 8008576:	1961      	adds	r1, r4, r5
 8008578:	428b      	cmp	r3, r1
 800857a:	bf01      	itttt	eq
 800857c:	6819      	ldreq	r1, [r3, #0]
 800857e:	685b      	ldreq	r3, [r3, #4]
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	e7ed      	b.n	8008562 <_free_r+0x22>
 8008586:	461a      	mov	r2, r3
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b10b      	cbz	r3, 8008590 <_free_r+0x50>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d9fa      	bls.n	8008586 <_free_r+0x46>
 8008590:	6811      	ldr	r1, [r2, #0]
 8008592:	1855      	adds	r5, r2, r1
 8008594:	42a5      	cmp	r5, r4
 8008596:	d10b      	bne.n	80085b0 <_free_r+0x70>
 8008598:	6824      	ldr	r4, [r4, #0]
 800859a:	4421      	add	r1, r4
 800859c:	1854      	adds	r4, r2, r1
 800859e:	42a3      	cmp	r3, r4
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	d1e0      	bne.n	8008566 <_free_r+0x26>
 80085a4:	681c      	ldr	r4, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	6053      	str	r3, [r2, #4]
 80085aa:	440c      	add	r4, r1
 80085ac:	6014      	str	r4, [r2, #0]
 80085ae:	e7da      	b.n	8008566 <_free_r+0x26>
 80085b0:	d902      	bls.n	80085b8 <_free_r+0x78>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	e7d6      	b.n	8008566 <_free_r+0x26>
 80085b8:	6825      	ldr	r5, [r4, #0]
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	428b      	cmp	r3, r1
 80085be:	bf04      	itt	eq
 80085c0:	6819      	ldreq	r1, [r3, #0]
 80085c2:	685b      	ldreq	r3, [r3, #4]
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	bf04      	itt	eq
 80085c8:	1949      	addeq	r1, r1, r5
 80085ca:	6021      	streq	r1, [r4, #0]
 80085cc:	6054      	str	r4, [r2, #4]
 80085ce:	e7ca      	b.n	8008566 <_free_r+0x26>
 80085d0:	b003      	add	sp, #12
 80085d2:	bd30      	pop	{r4, r5, pc}
 80085d4:	2000060c 	.word	0x2000060c

080085d8 <sbrk_aligned>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4e0e      	ldr	r6, [pc, #56]	; (8008614 <sbrk_aligned+0x3c>)
 80085dc:	460c      	mov	r4, r1
 80085de:	6831      	ldr	r1, [r6, #0]
 80085e0:	4605      	mov	r5, r0
 80085e2:	b911      	cbnz	r1, 80085ea <sbrk_aligned+0x12>
 80085e4:	f000 fcde 	bl	8008fa4 <_sbrk_r>
 80085e8:	6030      	str	r0, [r6, #0]
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 fcd9 	bl	8008fa4 <_sbrk_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d00a      	beq.n	800860c <sbrk_aligned+0x34>
 80085f6:	1cc4      	adds	r4, r0, #3
 80085f8:	f024 0403 	bic.w	r4, r4, #3
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d007      	beq.n	8008610 <sbrk_aligned+0x38>
 8008600:	1a21      	subs	r1, r4, r0
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fcce 	bl	8008fa4 <_sbrk_r>
 8008608:	3001      	adds	r0, #1
 800860a:	d101      	bne.n	8008610 <sbrk_aligned+0x38>
 800860c:	f04f 34ff 	mov.w	r4, #4294967295
 8008610:	4620      	mov	r0, r4
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	20000610 	.word	0x20000610

08008618 <_malloc_r>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	1ccd      	adds	r5, r1, #3
 800861e:	f025 0503 	bic.w	r5, r5, #3
 8008622:	3508      	adds	r5, #8
 8008624:	2d0c      	cmp	r5, #12
 8008626:	bf38      	it	cc
 8008628:	250c      	movcc	r5, #12
 800862a:	2d00      	cmp	r5, #0
 800862c:	4607      	mov	r7, r0
 800862e:	db01      	blt.n	8008634 <_malloc_r+0x1c>
 8008630:	42a9      	cmp	r1, r5
 8008632:	d905      	bls.n	8008640 <_malloc_r+0x28>
 8008634:	230c      	movs	r3, #12
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	2600      	movs	r6, #0
 800863a:	4630      	mov	r0, r6
 800863c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008714 <_malloc_r+0xfc>
 8008644:	f000 f868 	bl	8008718 <__malloc_lock>
 8008648:	f8d8 3000 	ldr.w	r3, [r8]
 800864c:	461c      	mov	r4, r3
 800864e:	bb5c      	cbnz	r4, 80086a8 <_malloc_r+0x90>
 8008650:	4629      	mov	r1, r5
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ffc0 	bl	80085d8 <sbrk_aligned>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	4604      	mov	r4, r0
 800865c:	d155      	bne.n	800870a <_malloc_r+0xf2>
 800865e:	f8d8 4000 	ldr.w	r4, [r8]
 8008662:	4626      	mov	r6, r4
 8008664:	2e00      	cmp	r6, #0
 8008666:	d145      	bne.n	80086f4 <_malloc_r+0xdc>
 8008668:	2c00      	cmp	r4, #0
 800866a:	d048      	beq.n	80086fe <_malloc_r+0xe6>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	4631      	mov	r1, r6
 8008670:	4638      	mov	r0, r7
 8008672:	eb04 0903 	add.w	r9, r4, r3
 8008676:	f000 fc95 	bl	8008fa4 <_sbrk_r>
 800867a:	4581      	cmp	r9, r0
 800867c:	d13f      	bne.n	80086fe <_malloc_r+0xe6>
 800867e:	6821      	ldr	r1, [r4, #0]
 8008680:	1a6d      	subs	r5, r5, r1
 8008682:	4629      	mov	r1, r5
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ffa7 	bl	80085d8 <sbrk_aligned>
 800868a:	3001      	adds	r0, #1
 800868c:	d037      	beq.n	80086fe <_malloc_r+0xe6>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	442b      	add	r3, r5
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	f8d8 3000 	ldr.w	r3, [r8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d038      	beq.n	800870e <_malloc_r+0xf6>
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	42a2      	cmp	r2, r4
 80086a0:	d12b      	bne.n	80086fa <_malloc_r+0xe2>
 80086a2:	2200      	movs	r2, #0
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	e00f      	b.n	80086c8 <_malloc_r+0xb0>
 80086a8:	6822      	ldr	r2, [r4, #0]
 80086aa:	1b52      	subs	r2, r2, r5
 80086ac:	d41f      	bmi.n	80086ee <_malloc_r+0xd6>
 80086ae:	2a0b      	cmp	r2, #11
 80086b0:	d917      	bls.n	80086e2 <_malloc_r+0xca>
 80086b2:	1961      	adds	r1, r4, r5
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	6025      	str	r5, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	6059      	strne	r1, [r3, #4]
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	bf08      	it	eq
 80086c0:	f8c8 1000 	streq.w	r1, [r8]
 80086c4:	5162      	str	r2, [r4, r5]
 80086c6:	604b      	str	r3, [r1, #4]
 80086c8:	4638      	mov	r0, r7
 80086ca:	f104 060b 	add.w	r6, r4, #11
 80086ce:	f000 f829 	bl	8008724 <__malloc_unlock>
 80086d2:	f026 0607 	bic.w	r6, r6, #7
 80086d6:	1d23      	adds	r3, r4, #4
 80086d8:	1af2      	subs	r2, r6, r3
 80086da:	d0ae      	beq.n	800863a <_malloc_r+0x22>
 80086dc:	1b9b      	subs	r3, r3, r6
 80086de:	50a3      	str	r3, [r4, r2]
 80086e0:	e7ab      	b.n	800863a <_malloc_r+0x22>
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	6862      	ldr	r2, [r4, #4]
 80086e6:	d1dd      	bne.n	80086a4 <_malloc_r+0x8c>
 80086e8:	f8c8 2000 	str.w	r2, [r8]
 80086ec:	e7ec      	b.n	80086c8 <_malloc_r+0xb0>
 80086ee:	4623      	mov	r3, r4
 80086f0:	6864      	ldr	r4, [r4, #4]
 80086f2:	e7ac      	b.n	800864e <_malloc_r+0x36>
 80086f4:	4634      	mov	r4, r6
 80086f6:	6876      	ldr	r6, [r6, #4]
 80086f8:	e7b4      	b.n	8008664 <_malloc_r+0x4c>
 80086fa:	4613      	mov	r3, r2
 80086fc:	e7cc      	b.n	8008698 <_malloc_r+0x80>
 80086fe:	230c      	movs	r3, #12
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	4638      	mov	r0, r7
 8008704:	f000 f80e 	bl	8008724 <__malloc_unlock>
 8008708:	e797      	b.n	800863a <_malloc_r+0x22>
 800870a:	6025      	str	r5, [r4, #0]
 800870c:	e7dc      	b.n	80086c8 <_malloc_r+0xb0>
 800870e:	605b      	str	r3, [r3, #4]
 8008710:	deff      	udf	#255	; 0xff
 8008712:	bf00      	nop
 8008714:	2000060c 	.word	0x2000060c

08008718 <__malloc_lock>:
 8008718:	4801      	ldr	r0, [pc, #4]	; (8008720 <__malloc_lock+0x8>)
 800871a:	f7ff bf0e 	b.w	800853a <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20000608 	.word	0x20000608

08008724 <__malloc_unlock>:
 8008724:	4801      	ldr	r0, [pc, #4]	; (800872c <__malloc_unlock+0x8>)
 8008726:	f7ff bf09 	b.w	800853c <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20000608 	.word	0x20000608

08008730 <__sfputc_r>:
 8008730:	6893      	ldr	r3, [r2, #8]
 8008732:	3b01      	subs	r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	b410      	push	{r4}
 8008738:	6093      	str	r3, [r2, #8]
 800873a:	da08      	bge.n	800874e <__sfputc_r+0x1e>
 800873c:	6994      	ldr	r4, [r2, #24]
 800873e:	42a3      	cmp	r3, r4
 8008740:	db01      	blt.n	8008746 <__sfputc_r+0x16>
 8008742:	290a      	cmp	r1, #10
 8008744:	d103      	bne.n	800874e <__sfputc_r+0x1e>
 8008746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874a:	f7ff bde8 	b.w	800831e <__swbuf_r>
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	1c58      	adds	r0, r3, #1
 8008752:	6010      	str	r0, [r2, #0]
 8008754:	7019      	strb	r1, [r3, #0]
 8008756:	4608      	mov	r0, r1
 8008758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875c:	4770      	bx	lr

0800875e <__sfputs_r>:
 800875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	4614      	mov	r4, r2
 8008766:	18d5      	adds	r5, r2, r3
 8008768:	42ac      	cmp	r4, r5
 800876a:	d101      	bne.n	8008770 <__sfputs_r+0x12>
 800876c:	2000      	movs	r0, #0
 800876e:	e007      	b.n	8008780 <__sfputs_r+0x22>
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	463a      	mov	r2, r7
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ffda 	bl	8008730 <__sfputc_r>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d1f3      	bne.n	8008768 <__sfputs_r+0xa>
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008784 <_vfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	460d      	mov	r5, r1
 800878a:	b09d      	sub	sp, #116	; 0x74
 800878c:	4614      	mov	r4, r2
 800878e:	4698      	mov	r8, r3
 8008790:	4606      	mov	r6, r0
 8008792:	b118      	cbz	r0, 800879c <_vfiprintf_r+0x18>
 8008794:	6a03      	ldr	r3, [r0, #32]
 8008796:	b90b      	cbnz	r3, 800879c <_vfiprintf_r+0x18>
 8008798:	f7ff fcd2 	bl	8008140 <__sinit>
 800879c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d405      	bmi.n	80087ae <_vfiprintf_r+0x2a>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	059a      	lsls	r2, r3, #22
 80087a6:	d402      	bmi.n	80087ae <_vfiprintf_r+0x2a>
 80087a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087aa:	f7ff fec6 	bl	800853a <__retarget_lock_acquire_recursive>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	071b      	lsls	r3, r3, #28
 80087b2:	d501      	bpl.n	80087b8 <_vfiprintf_r+0x34>
 80087b4:	692b      	ldr	r3, [r5, #16]
 80087b6:	b99b      	cbnz	r3, 80087e0 <_vfiprintf_r+0x5c>
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff fdec 	bl	8008398 <__swsetup_r>
 80087c0:	b170      	cbz	r0, 80087e0 <_vfiprintf_r+0x5c>
 80087c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c4:	07dc      	lsls	r4, r3, #31
 80087c6:	d504      	bpl.n	80087d2 <_vfiprintf_r+0x4e>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	b01d      	add	sp, #116	; 0x74
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	0598      	lsls	r0, r3, #22
 80087d6:	d4f7      	bmi.n	80087c8 <_vfiprintf_r+0x44>
 80087d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087da:	f7ff feaf 	bl	800853c <__retarget_lock_release_recursive>
 80087de:	e7f3      	b.n	80087c8 <_vfiprintf_r+0x44>
 80087e0:	2300      	movs	r3, #0
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	2320      	movs	r3, #32
 80087e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ee:	2330      	movs	r3, #48	; 0x30
 80087f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80089a4 <_vfiprintf_r+0x220>
 80087f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f8:	f04f 0901 	mov.w	r9, #1
 80087fc:	4623      	mov	r3, r4
 80087fe:	469a      	mov	sl, r3
 8008800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008804:	b10a      	cbz	r2, 800880a <_vfiprintf_r+0x86>
 8008806:	2a25      	cmp	r2, #37	; 0x25
 8008808:	d1f9      	bne.n	80087fe <_vfiprintf_r+0x7a>
 800880a:	ebba 0b04 	subs.w	fp, sl, r4
 800880e:	d00b      	beq.n	8008828 <_vfiprintf_r+0xa4>
 8008810:	465b      	mov	r3, fp
 8008812:	4622      	mov	r2, r4
 8008814:	4629      	mov	r1, r5
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffa1 	bl	800875e <__sfputs_r>
 800881c:	3001      	adds	r0, #1
 800881e:	f000 80a9 	beq.w	8008974 <_vfiprintf_r+0x1f0>
 8008822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008824:	445a      	add	r2, fp
 8008826:	9209      	str	r2, [sp, #36]	; 0x24
 8008828:	f89a 3000 	ldrb.w	r3, [sl]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 80a1 	beq.w	8008974 <_vfiprintf_r+0x1f0>
 8008832:	2300      	movs	r3, #0
 8008834:	f04f 32ff 	mov.w	r2, #4294967295
 8008838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883c:	f10a 0a01 	add.w	sl, sl, #1
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008848:	931a      	str	r3, [sp, #104]	; 0x68
 800884a:	4654      	mov	r4, sl
 800884c:	2205      	movs	r2, #5
 800884e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008852:	4854      	ldr	r0, [pc, #336]	; (80089a4 <_vfiprintf_r+0x220>)
 8008854:	f7f7 fcbc 	bl	80001d0 <memchr>
 8008858:	9a04      	ldr	r2, [sp, #16]
 800885a:	b9d8      	cbnz	r0, 8008894 <_vfiprintf_r+0x110>
 800885c:	06d1      	lsls	r1, r2, #27
 800885e:	bf44      	itt	mi
 8008860:	2320      	movmi	r3, #32
 8008862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008866:	0713      	lsls	r3, r2, #28
 8008868:	bf44      	itt	mi
 800886a:	232b      	movmi	r3, #43	; 0x2b
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008870:	f89a 3000 	ldrb.w	r3, [sl]
 8008874:	2b2a      	cmp	r3, #42	; 0x2a
 8008876:	d015      	beq.n	80088a4 <_vfiprintf_r+0x120>
 8008878:	9a07      	ldr	r2, [sp, #28]
 800887a:	4654      	mov	r4, sl
 800887c:	2000      	movs	r0, #0
 800887e:	f04f 0c0a 	mov.w	ip, #10
 8008882:	4621      	mov	r1, r4
 8008884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008888:	3b30      	subs	r3, #48	; 0x30
 800888a:	2b09      	cmp	r3, #9
 800888c:	d94d      	bls.n	800892a <_vfiprintf_r+0x1a6>
 800888e:	b1b0      	cbz	r0, 80088be <_vfiprintf_r+0x13a>
 8008890:	9207      	str	r2, [sp, #28]
 8008892:	e014      	b.n	80088be <_vfiprintf_r+0x13a>
 8008894:	eba0 0308 	sub.w	r3, r0, r8
 8008898:	fa09 f303 	lsl.w	r3, r9, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	46a2      	mov	sl, r4
 80088a2:	e7d2      	b.n	800884a <_vfiprintf_r+0xc6>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d19      	adds	r1, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9103      	str	r1, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfbb      	ittet	lt
 80088b0:	425b      	neglt	r3, r3
 80088b2:	f042 0202 	orrlt.w	r2, r2, #2
 80088b6:	9307      	strge	r3, [sp, #28]
 80088b8:	9307      	strlt	r3, [sp, #28]
 80088ba:	bfb8      	it	lt
 80088bc:	9204      	strlt	r2, [sp, #16]
 80088be:	7823      	ldrb	r3, [r4, #0]
 80088c0:	2b2e      	cmp	r3, #46	; 0x2e
 80088c2:	d10c      	bne.n	80088de <_vfiprintf_r+0x15a>
 80088c4:	7863      	ldrb	r3, [r4, #1]
 80088c6:	2b2a      	cmp	r3, #42	; 0x2a
 80088c8:	d134      	bne.n	8008934 <_vfiprintf_r+0x1b0>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	9203      	str	r2, [sp, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bfb8      	it	lt
 80088d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088da:	3402      	adds	r4, #2
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80089b4 <_vfiprintf_r+0x230>
 80088e2:	7821      	ldrb	r1, [r4, #0]
 80088e4:	2203      	movs	r2, #3
 80088e6:	4650      	mov	r0, sl
 80088e8:	f7f7 fc72 	bl	80001d0 <memchr>
 80088ec:	b138      	cbz	r0, 80088fe <_vfiprintf_r+0x17a>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	eba0 000a 	sub.w	r0, r0, sl
 80088f4:	2240      	movs	r2, #64	; 0x40
 80088f6:	4082      	lsls	r2, r0
 80088f8:	4313      	orrs	r3, r2
 80088fa:	3401      	adds	r4, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008902:	4829      	ldr	r0, [pc, #164]	; (80089a8 <_vfiprintf_r+0x224>)
 8008904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008908:	2206      	movs	r2, #6
 800890a:	f7f7 fc61 	bl	80001d0 <memchr>
 800890e:	2800      	cmp	r0, #0
 8008910:	d03f      	beq.n	8008992 <_vfiprintf_r+0x20e>
 8008912:	4b26      	ldr	r3, [pc, #152]	; (80089ac <_vfiprintf_r+0x228>)
 8008914:	bb1b      	cbnz	r3, 800895e <_vfiprintf_r+0x1da>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	3307      	adds	r3, #7
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	3308      	adds	r3, #8
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	443b      	add	r3, r7
 8008926:	9309      	str	r3, [sp, #36]	; 0x24
 8008928:	e768      	b.n	80087fc <_vfiprintf_r+0x78>
 800892a:	fb0c 3202 	mla	r2, ip, r2, r3
 800892e:	460c      	mov	r4, r1
 8008930:	2001      	movs	r0, #1
 8008932:	e7a6      	b.n	8008882 <_vfiprintf_r+0xfe>
 8008934:	2300      	movs	r3, #0
 8008936:	3401      	adds	r4, #1
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	4619      	mov	r1, r3
 800893c:	f04f 0c0a 	mov.w	ip, #10
 8008940:	4620      	mov	r0, r4
 8008942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008946:	3a30      	subs	r2, #48	; 0x30
 8008948:	2a09      	cmp	r2, #9
 800894a:	d903      	bls.n	8008954 <_vfiprintf_r+0x1d0>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c6      	beq.n	80088de <_vfiprintf_r+0x15a>
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	e7c4      	b.n	80088de <_vfiprintf_r+0x15a>
 8008954:	fb0c 2101 	mla	r1, ip, r1, r2
 8008958:	4604      	mov	r4, r0
 800895a:	2301      	movs	r3, #1
 800895c:	e7f0      	b.n	8008940 <_vfiprintf_r+0x1bc>
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <_vfiprintf_r+0x22c>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	4630      	mov	r0, r6
 800896a:	f3af 8000 	nop.w
 800896e:	4607      	mov	r7, r0
 8008970:	1c78      	adds	r0, r7, #1
 8008972:	d1d6      	bne.n	8008922 <_vfiprintf_r+0x19e>
 8008974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008976:	07d9      	lsls	r1, r3, #31
 8008978:	d405      	bmi.n	8008986 <_vfiprintf_r+0x202>
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	059a      	lsls	r2, r3, #22
 800897e:	d402      	bmi.n	8008986 <_vfiprintf_r+0x202>
 8008980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008982:	f7ff fddb 	bl	800853c <__retarget_lock_release_recursive>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	065b      	lsls	r3, r3, #25
 800898a:	f53f af1d 	bmi.w	80087c8 <_vfiprintf_r+0x44>
 800898e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008990:	e71c      	b.n	80087cc <_vfiprintf_r+0x48>
 8008992:	ab03      	add	r3, sp, #12
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	462a      	mov	r2, r5
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <_vfiprintf_r+0x22c>)
 800899a:	a904      	add	r1, sp, #16
 800899c:	4630      	mov	r0, r6
 800899e:	f000 f879 	bl	8008a94 <_printf_i>
 80089a2:	e7e4      	b.n	800896e <_vfiprintf_r+0x1ea>
 80089a4:	08009263 	.word	0x08009263
 80089a8:	0800926d 	.word	0x0800926d
 80089ac:	00000000 	.word	0x00000000
 80089b0:	0800875f 	.word	0x0800875f
 80089b4:	08009269 	.word	0x08009269

080089b8 <_printf_common>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	4616      	mov	r6, r2
 80089be:	4699      	mov	r9, r3
 80089c0:	688a      	ldr	r2, [r1, #8]
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	bfb8      	it	lt
 80089cc:	4613      	movlt	r3, r2
 80089ce:	6033      	str	r3, [r6, #0]
 80089d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089d4:	4607      	mov	r7, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	b10a      	cbz	r2, 80089de <_printf_common+0x26>
 80089da:	3301      	adds	r3, #1
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	0699      	lsls	r1, r3, #26
 80089e2:	bf42      	ittt	mi
 80089e4:	6833      	ldrmi	r3, [r6, #0]
 80089e6:	3302      	addmi	r3, #2
 80089e8:	6033      	strmi	r3, [r6, #0]
 80089ea:	6825      	ldr	r5, [r4, #0]
 80089ec:	f015 0506 	ands.w	r5, r5, #6
 80089f0:	d106      	bne.n	8008a00 <_printf_common+0x48>
 80089f2:	f104 0a19 	add.w	sl, r4, #25
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	6832      	ldr	r2, [r6, #0]
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	dc26      	bgt.n	8008a4e <_printf_common+0x96>
 8008a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a04:	1e13      	subs	r3, r2, #0
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	bf18      	it	ne
 8008a0a:	2301      	movne	r3, #1
 8008a0c:	0692      	lsls	r2, r2, #26
 8008a0e:	d42b      	bmi.n	8008a68 <_printf_common+0xb0>
 8008a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a14:	4649      	mov	r1, r9
 8008a16:	4638      	mov	r0, r7
 8008a18:	47c0      	blx	r8
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	d01e      	beq.n	8008a5c <_printf_common+0xa4>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	6922      	ldr	r2, [r4, #16]
 8008a22:	f003 0306 	and.w	r3, r3, #6
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	bf02      	ittt	eq
 8008a2a:	68e5      	ldreq	r5, [r4, #12]
 8008a2c:	6833      	ldreq	r3, [r6, #0]
 8008a2e:	1aed      	subeq	r5, r5, r3
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	bf0c      	ite	eq
 8008a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a38:	2500      	movne	r5, #0
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	bfc4      	itt	gt
 8008a3e:	1a9b      	subgt	r3, r3, r2
 8008a40:	18ed      	addgt	r5, r5, r3
 8008a42:	2600      	movs	r6, #0
 8008a44:	341a      	adds	r4, #26
 8008a46:	42b5      	cmp	r5, r6
 8008a48:	d11a      	bne.n	8008a80 <_printf_common+0xc8>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	e008      	b.n	8008a60 <_printf_common+0xa8>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4652      	mov	r2, sl
 8008a52:	4649      	mov	r1, r9
 8008a54:	4638      	mov	r0, r7
 8008a56:	47c0      	blx	r8
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d103      	bne.n	8008a64 <_printf_common+0xac>
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a64:	3501      	adds	r5, #1
 8008a66:	e7c6      	b.n	80089f6 <_printf_common+0x3e>
 8008a68:	18e1      	adds	r1, r4, r3
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	2030      	movs	r0, #48	; 0x30
 8008a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a72:	4422      	add	r2, r4
 8008a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	e7c7      	b.n	8008a10 <_printf_common+0x58>
 8008a80:	2301      	movs	r3, #1
 8008a82:	4622      	mov	r2, r4
 8008a84:	4649      	mov	r1, r9
 8008a86:	4638      	mov	r0, r7
 8008a88:	47c0      	blx	r8
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	d0e6      	beq.n	8008a5c <_printf_common+0xa4>
 8008a8e:	3601      	adds	r6, #1
 8008a90:	e7d9      	b.n	8008a46 <_printf_common+0x8e>
	...

08008a94 <_printf_i>:
 8008a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	7e0f      	ldrb	r7, [r1, #24]
 8008a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a9c:	2f78      	cmp	r7, #120	; 0x78
 8008a9e:	4691      	mov	r9, r2
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	469a      	mov	sl, r3
 8008aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aaa:	d807      	bhi.n	8008abc <_printf_i+0x28>
 8008aac:	2f62      	cmp	r7, #98	; 0x62
 8008aae:	d80a      	bhi.n	8008ac6 <_printf_i+0x32>
 8008ab0:	2f00      	cmp	r7, #0
 8008ab2:	f000 80d4 	beq.w	8008c5e <_printf_i+0x1ca>
 8008ab6:	2f58      	cmp	r7, #88	; 0x58
 8008ab8:	f000 80c0 	beq.w	8008c3c <_printf_i+0x1a8>
 8008abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ac4:	e03a      	b.n	8008b3c <_printf_i+0xa8>
 8008ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aca:	2b15      	cmp	r3, #21
 8008acc:	d8f6      	bhi.n	8008abc <_printf_i+0x28>
 8008ace:	a101      	add	r1, pc, #4	; (adr r1, 8008ad4 <_printf_i+0x40>)
 8008ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ad4:	08008b2d 	.word	0x08008b2d
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008abd 	.word	0x08008abd
 8008ae0:	08008abd 	.word	0x08008abd
 8008ae4:	08008abd 	.word	0x08008abd
 8008ae8:	08008abd 	.word	0x08008abd
 8008aec:	08008b41 	.word	0x08008b41
 8008af0:	08008abd 	.word	0x08008abd
 8008af4:	08008abd 	.word	0x08008abd
 8008af8:	08008abd 	.word	0x08008abd
 8008afc:	08008abd 	.word	0x08008abd
 8008b00:	08008c45 	.word	0x08008c45
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008bff 	.word	0x08008bff
 8008b0c:	08008abd 	.word	0x08008abd
 8008b10:	08008abd 	.word	0x08008abd
 8008b14:	08008c67 	.word	0x08008c67
 8008b18:	08008abd 	.word	0x08008abd
 8008b1c:	08008b6d 	.word	0x08008b6d
 8008b20:	08008abd 	.word	0x08008abd
 8008b24:	08008abd 	.word	0x08008abd
 8008b28:	08008c07 	.word	0x08008c07
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	1d1a      	adds	r2, r3, #4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	602a      	str	r2, [r5, #0]
 8008b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e09f      	b.n	8008c80 <_printf_i+0x1ec>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	682b      	ldr	r3, [r5, #0]
 8008b44:	0607      	lsls	r7, r0, #24
 8008b46:	f103 0104 	add.w	r1, r3, #4
 8008b4a:	6029      	str	r1, [r5, #0]
 8008b4c:	d501      	bpl.n	8008b52 <_printf_i+0xbe>
 8008b4e:	681e      	ldr	r6, [r3, #0]
 8008b50:	e003      	b.n	8008b5a <_printf_i+0xc6>
 8008b52:	0646      	lsls	r6, r0, #25
 8008b54:	d5fb      	bpl.n	8008b4e <_printf_i+0xba>
 8008b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	da03      	bge.n	8008b66 <_printf_i+0xd2>
 8008b5e:	232d      	movs	r3, #45	; 0x2d
 8008b60:	4276      	negs	r6, r6
 8008b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b66:	485a      	ldr	r0, [pc, #360]	; (8008cd0 <_printf_i+0x23c>)
 8008b68:	230a      	movs	r3, #10
 8008b6a:	e012      	b.n	8008b92 <_printf_i+0xfe>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	1d19      	adds	r1, r3, #4
 8008b72:	6029      	str	r1, [r5, #0]
 8008b74:	0605      	lsls	r5, r0, #24
 8008b76:	d501      	bpl.n	8008b7c <_printf_i+0xe8>
 8008b78:	681e      	ldr	r6, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <_printf_i+0xee>
 8008b7c:	0641      	lsls	r1, r0, #25
 8008b7e:	d5fb      	bpl.n	8008b78 <_printf_i+0xe4>
 8008b80:	881e      	ldrh	r6, [r3, #0]
 8008b82:	4853      	ldr	r0, [pc, #332]	; (8008cd0 <_printf_i+0x23c>)
 8008b84:	2f6f      	cmp	r7, #111	; 0x6f
 8008b86:	bf0c      	ite	eq
 8008b88:	2308      	moveq	r3, #8
 8008b8a:	230a      	movne	r3, #10
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b92:	6865      	ldr	r5, [r4, #4]
 8008b94:	60a5      	str	r5, [r4, #8]
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	bfa2      	ittt	ge
 8008b9a:	6821      	ldrge	r1, [r4, #0]
 8008b9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ba0:	6021      	strge	r1, [r4, #0]
 8008ba2:	b90e      	cbnz	r6, 8008ba8 <_printf_i+0x114>
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	d04b      	beq.n	8008c40 <_printf_i+0x1ac>
 8008ba8:	4615      	mov	r5, r2
 8008baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bae:	fb03 6711 	mls	r7, r3, r1, r6
 8008bb2:	5dc7      	ldrb	r7, [r0, r7]
 8008bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bb8:	4637      	mov	r7, r6
 8008bba:	42bb      	cmp	r3, r7
 8008bbc:	460e      	mov	r6, r1
 8008bbe:	d9f4      	bls.n	8008baa <_printf_i+0x116>
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d10b      	bne.n	8008bdc <_printf_i+0x148>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	07de      	lsls	r6, r3, #31
 8008bc8:	d508      	bpl.n	8008bdc <_printf_i+0x148>
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	bfde      	ittt	le
 8008bd2:	2330      	movle	r3, #48	; 0x30
 8008bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bdc:	1b52      	subs	r2, r2, r5
 8008bde:	6122      	str	r2, [r4, #16]
 8008be0:	f8cd a000 	str.w	sl, [sp]
 8008be4:	464b      	mov	r3, r9
 8008be6:	aa03      	add	r2, sp, #12
 8008be8:	4621      	mov	r1, r4
 8008bea:	4640      	mov	r0, r8
 8008bec:	f7ff fee4 	bl	80089b8 <_printf_common>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d14a      	bne.n	8008c8a <_printf_i+0x1f6>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	b004      	add	sp, #16
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	f043 0320 	orr.w	r3, r3, #32
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	4833      	ldr	r0, [pc, #204]	; (8008cd4 <_printf_i+0x240>)
 8008c08:	2778      	movs	r7, #120	; 0x78
 8008c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	6829      	ldr	r1, [r5, #0]
 8008c12:	061f      	lsls	r7, r3, #24
 8008c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c18:	d402      	bmi.n	8008c20 <_printf_i+0x18c>
 8008c1a:	065f      	lsls	r7, r3, #25
 8008c1c:	bf48      	it	mi
 8008c1e:	b2b6      	uxthmi	r6, r6
 8008c20:	07df      	lsls	r7, r3, #31
 8008c22:	bf48      	it	mi
 8008c24:	f043 0320 	orrmi.w	r3, r3, #32
 8008c28:	6029      	str	r1, [r5, #0]
 8008c2a:	bf48      	it	mi
 8008c2c:	6023      	strmi	r3, [r4, #0]
 8008c2e:	b91e      	cbnz	r6, 8008c38 <_printf_i+0x1a4>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	f023 0320 	bic.w	r3, r3, #32
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	2310      	movs	r3, #16
 8008c3a:	e7a7      	b.n	8008b8c <_printf_i+0xf8>
 8008c3c:	4824      	ldr	r0, [pc, #144]	; (8008cd0 <_printf_i+0x23c>)
 8008c3e:	e7e4      	b.n	8008c0a <_printf_i+0x176>
 8008c40:	4615      	mov	r5, r2
 8008c42:	e7bd      	b.n	8008bc0 <_printf_i+0x12c>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	6826      	ldr	r6, [r4, #0]
 8008c48:	6961      	ldr	r1, [r4, #20]
 8008c4a:	1d18      	adds	r0, r3, #4
 8008c4c:	6028      	str	r0, [r5, #0]
 8008c4e:	0635      	lsls	r5, r6, #24
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	d501      	bpl.n	8008c58 <_printf_i+0x1c4>
 8008c54:	6019      	str	r1, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <_printf_i+0x1ca>
 8008c58:	0670      	lsls	r0, r6, #25
 8008c5a:	d5fb      	bpl.n	8008c54 <_printf_i+0x1c0>
 8008c5c:	8019      	strh	r1, [r3, #0]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	4615      	mov	r5, r2
 8008c64:	e7bc      	b.n	8008be0 <_printf_i+0x14c>
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	1d1a      	adds	r2, r3, #4
 8008c6a:	602a      	str	r2, [r5, #0]
 8008c6c:	681d      	ldr	r5, [r3, #0]
 8008c6e:	6862      	ldr	r2, [r4, #4]
 8008c70:	2100      	movs	r1, #0
 8008c72:	4628      	mov	r0, r5
 8008c74:	f7f7 faac 	bl	80001d0 <memchr>
 8008c78:	b108      	cbz	r0, 8008c7e <_printf_i+0x1ea>
 8008c7a:	1b40      	subs	r0, r0, r5
 8008c7c:	6060      	str	r0, [r4, #4]
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	6123      	str	r3, [r4, #16]
 8008c82:	2300      	movs	r3, #0
 8008c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c88:	e7aa      	b.n	8008be0 <_printf_i+0x14c>
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4649      	mov	r1, r9
 8008c90:	4640      	mov	r0, r8
 8008c92:	47d0      	blx	sl
 8008c94:	3001      	adds	r0, #1
 8008c96:	d0ad      	beq.n	8008bf4 <_printf_i+0x160>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	079b      	lsls	r3, r3, #30
 8008c9c:	d413      	bmi.n	8008cc6 <_printf_i+0x232>
 8008c9e:	68e0      	ldr	r0, [r4, #12]
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	4298      	cmp	r0, r3
 8008ca4:	bfb8      	it	lt
 8008ca6:	4618      	movlt	r0, r3
 8008ca8:	e7a6      	b.n	8008bf8 <_printf_i+0x164>
 8008caa:	2301      	movs	r3, #1
 8008cac:	4632      	mov	r2, r6
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	47d0      	blx	sl
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d09d      	beq.n	8008bf4 <_printf_i+0x160>
 8008cb8:	3501      	adds	r5, #1
 8008cba:	68e3      	ldr	r3, [r4, #12]
 8008cbc:	9903      	ldr	r1, [sp, #12]
 8008cbe:	1a5b      	subs	r3, r3, r1
 8008cc0:	42ab      	cmp	r3, r5
 8008cc2:	dcf2      	bgt.n	8008caa <_printf_i+0x216>
 8008cc4:	e7eb      	b.n	8008c9e <_printf_i+0x20a>
 8008cc6:	2500      	movs	r5, #0
 8008cc8:	f104 0619 	add.w	r6, r4, #25
 8008ccc:	e7f5      	b.n	8008cba <_printf_i+0x226>
 8008cce:	bf00      	nop
 8008cd0:	08009274 	.word	0x08009274
 8008cd4:	08009285 	.word	0x08009285

08008cd8 <__sflush_r>:
 8008cd8:	898a      	ldrh	r2, [r1, #12]
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	4605      	mov	r5, r0
 8008ce0:	0710      	lsls	r0, r2, #28
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	d458      	bmi.n	8008d98 <__sflush_r+0xc0>
 8008ce6:	684b      	ldr	r3, [r1, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dc05      	bgt.n	8008cf8 <__sflush_r+0x20>
 8008cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	dc02      	bgt.n	8008cf8 <__sflush_r+0x20>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	d0f9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d04:	682f      	ldr	r7, [r5, #0]
 8008d06:	6a21      	ldr	r1, [r4, #32]
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	d032      	beq.n	8008d72 <__sflush_r+0x9a>
 8008d0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	075a      	lsls	r2, r3, #29
 8008d12:	d505      	bpl.n	8008d20 <__sflush_r+0x48>
 8008d14:	6863      	ldr	r3, [r4, #4]
 8008d16:	1ac0      	subs	r0, r0, r3
 8008d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d1a:	b10b      	cbz	r3, 8008d20 <__sflush_r+0x48>
 8008d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d1e:	1ac0      	subs	r0, r0, r3
 8008d20:	2300      	movs	r3, #0
 8008d22:	4602      	mov	r2, r0
 8008d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d26:	6a21      	ldr	r1, [r4, #32]
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	d106      	bne.n	8008d40 <__sflush_r+0x68>
 8008d32:	6829      	ldr	r1, [r5, #0]
 8008d34:	291d      	cmp	r1, #29
 8008d36:	d82b      	bhi.n	8008d90 <__sflush_r+0xb8>
 8008d38:	4a29      	ldr	r2, [pc, #164]	; (8008de0 <__sflush_r+0x108>)
 8008d3a:	410a      	asrs	r2, r1
 8008d3c:	07d6      	lsls	r6, r2, #31
 8008d3e:	d427      	bmi.n	8008d90 <__sflush_r+0xb8>
 8008d40:	2200      	movs	r2, #0
 8008d42:	6062      	str	r2, [r4, #4]
 8008d44:	04d9      	lsls	r1, r3, #19
 8008d46:	6922      	ldr	r2, [r4, #16]
 8008d48:	6022      	str	r2, [r4, #0]
 8008d4a:	d504      	bpl.n	8008d56 <__sflush_r+0x7e>
 8008d4c:	1c42      	adds	r2, r0, #1
 8008d4e:	d101      	bne.n	8008d54 <__sflush_r+0x7c>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b903      	cbnz	r3, 8008d56 <__sflush_r+0x7e>
 8008d54:	6560      	str	r0, [r4, #84]	; 0x54
 8008d56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d58:	602f      	str	r7, [r5, #0]
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d0c9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d62:	4299      	cmp	r1, r3
 8008d64:	d002      	beq.n	8008d6c <__sflush_r+0x94>
 8008d66:	4628      	mov	r0, r5
 8008d68:	f7ff fbea 	bl	8008540 <_free_r>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	6360      	str	r0, [r4, #52]	; 0x34
 8008d70:	e7c0      	b.n	8008cf4 <__sflush_r+0x1c>
 8008d72:	2301      	movs	r3, #1
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b0      	blx	r6
 8008d78:	1c41      	adds	r1, r0, #1
 8008d7a:	d1c8      	bne.n	8008d0e <__sflush_r+0x36>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0c5      	beq.n	8008d0e <__sflush_r+0x36>
 8008d82:	2b1d      	cmp	r3, #29
 8008d84:	d001      	beq.n	8008d8a <__sflush_r+0xb2>
 8008d86:	2b16      	cmp	r3, #22
 8008d88:	d101      	bne.n	8008d8e <__sflush_r+0xb6>
 8008d8a:	602f      	str	r7, [r5, #0]
 8008d8c:	e7b1      	b.n	8008cf2 <__sflush_r+0x1a>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	e7ad      	b.n	8008cf4 <__sflush_r+0x1c>
 8008d98:	690f      	ldr	r7, [r1, #16]
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	d0a9      	beq.n	8008cf2 <__sflush_r+0x1a>
 8008d9e:	0793      	lsls	r3, r2, #30
 8008da0:	680e      	ldr	r6, [r1, #0]
 8008da2:	bf08      	it	eq
 8008da4:	694b      	ldreq	r3, [r1, #20]
 8008da6:	600f      	str	r7, [r1, #0]
 8008da8:	bf18      	it	ne
 8008daa:	2300      	movne	r3, #0
 8008dac:	eba6 0807 	sub.w	r8, r6, r7
 8008db0:	608b      	str	r3, [r1, #8]
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	dd9c      	ble.n	8008cf2 <__sflush_r+0x1a>
 8008db8:	6a21      	ldr	r1, [r4, #32]
 8008dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dbc:	4643      	mov	r3, r8
 8008dbe:	463a      	mov	r2, r7
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b0      	blx	r6
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	dc06      	bgt.n	8008dd6 <__sflush_r+0xfe>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	e78e      	b.n	8008cf4 <__sflush_r+0x1c>
 8008dd6:	4407      	add	r7, r0
 8008dd8:	eba8 0800 	sub.w	r8, r8, r0
 8008ddc:	e7e9      	b.n	8008db2 <__sflush_r+0xda>
 8008dde:	bf00      	nop
 8008de0:	dfbffffe 	.word	0xdfbffffe

08008de4 <_fflush_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	690b      	ldr	r3, [r1, #16]
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b913      	cbnz	r3, 8008df4 <_fflush_r+0x10>
 8008dee:	2500      	movs	r5, #0
 8008df0:	4628      	mov	r0, r5
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	b118      	cbz	r0, 8008dfe <_fflush_r+0x1a>
 8008df6:	6a03      	ldr	r3, [r0, #32]
 8008df8:	b90b      	cbnz	r3, 8008dfe <_fflush_r+0x1a>
 8008dfa:	f7ff f9a1 	bl	8008140 <__sinit>
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f3      	beq.n	8008dee <_fflush_r+0xa>
 8008e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e08:	07d0      	lsls	r0, r2, #31
 8008e0a:	d404      	bmi.n	8008e16 <_fflush_r+0x32>
 8008e0c:	0599      	lsls	r1, r3, #22
 8008e0e:	d402      	bmi.n	8008e16 <_fflush_r+0x32>
 8008e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e12:	f7ff fb92 	bl	800853a <__retarget_lock_acquire_recursive>
 8008e16:	4628      	mov	r0, r5
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7ff ff5d 	bl	8008cd8 <__sflush_r>
 8008e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e20:	07da      	lsls	r2, r3, #31
 8008e22:	4605      	mov	r5, r0
 8008e24:	d4e4      	bmi.n	8008df0 <_fflush_r+0xc>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	059b      	lsls	r3, r3, #22
 8008e2a:	d4e1      	bmi.n	8008df0 <_fflush_r+0xc>
 8008e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e2e:	f7ff fb85 	bl	800853c <__retarget_lock_release_recursive>
 8008e32:	e7dd      	b.n	8008df0 <_fflush_r+0xc>

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	b096      	sub	sp, #88	; 0x58
 8008e40:	4615      	mov	r5, r2
 8008e42:	461e      	mov	r6, r3
 8008e44:	da0d      	bge.n	8008e62 <__swhatbuf_r+0x2e>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	bf0c      	ite	eq
 8008e52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e56:	2340      	movne	r3, #64	; 0x40
 8008e58:	2000      	movs	r0, #0
 8008e5a:	6031      	str	r1, [r6, #0]
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	b016      	add	sp, #88	; 0x58
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	466a      	mov	r2, sp
 8008e64:	f000 f87c 	bl	8008f60 <_fstat_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dbec      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e76:	4259      	negs	r1, r3
 8008e78:	4159      	adcs	r1, r3
 8008e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7e:	e7eb      	b.n	8008e58 <__swhatbuf_r+0x24>

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffc8 	bl	8008e34 <__swhatbuf_r>
 8008ea4:	9900      	ldr	r1, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fbb5 	bl	8008618 <_malloc_r>
 8008eae:	b948      	cbnz	r0, 8008ec4 <__smakebuf_r+0x44>
 8008eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb4:	059a      	lsls	r2, r3, #22
 8008eb6:	d4ef      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7e3      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	6020      	str	r0, [r4, #0]
 8008ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	6163      	str	r3, [r4, #20]
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	6120      	str	r0, [r4, #16]
 8008ed6:	b15b      	cbz	r3, 8008ef0 <__smakebuf_r+0x70>
 8008ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f851 	bl	8008f84 <_isatty_r>
 8008ee2:	b128      	cbz	r0, 8008ef0 <__smakebuf_r+0x70>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	431d      	orrs	r5, r3
 8008ef4:	81a5      	strh	r5, [r4, #12]
 8008ef6:	e7cf      	b.n	8008e98 <__smakebuf_r+0x18>

08008ef8 <_putc_r>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	460d      	mov	r5, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	4606      	mov	r6, r0
 8008f00:	b118      	cbz	r0, 8008f0a <_putc_r+0x12>
 8008f02:	6a03      	ldr	r3, [r0, #32]
 8008f04:	b90b      	cbnz	r3, 8008f0a <_putc_r+0x12>
 8008f06:	f7ff f91b 	bl	8008140 <__sinit>
 8008f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f0c:	07d8      	lsls	r0, r3, #31
 8008f0e:	d405      	bmi.n	8008f1c <_putc_r+0x24>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	0599      	lsls	r1, r3, #22
 8008f14:	d402      	bmi.n	8008f1c <_putc_r+0x24>
 8008f16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f18:	f7ff fb0f 	bl	800853a <__retarget_lock_acquire_recursive>
 8008f1c:	68a3      	ldr	r3, [r4, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	60a3      	str	r3, [r4, #8]
 8008f24:	da05      	bge.n	8008f32 <_putc_r+0x3a>
 8008f26:	69a2      	ldr	r2, [r4, #24]
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	db12      	blt.n	8008f52 <_putc_r+0x5a>
 8008f2c:	b2eb      	uxtb	r3, r5
 8008f2e:	2b0a      	cmp	r3, #10
 8008f30:	d00f      	beq.n	8008f52 <_putc_r+0x5a>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	6022      	str	r2, [r4, #0]
 8008f38:	701d      	strb	r5, [r3, #0]
 8008f3a:	b2ed      	uxtb	r5, r5
 8008f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3e:	07da      	lsls	r2, r3, #31
 8008f40:	d405      	bmi.n	8008f4e <_putc_r+0x56>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	059b      	lsls	r3, r3, #22
 8008f46:	d402      	bmi.n	8008f4e <_putc_r+0x56>
 8008f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4a:	f7ff faf7 	bl	800853c <__retarget_lock_release_recursive>
 8008f4e:	4628      	mov	r0, r5
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	4629      	mov	r1, r5
 8008f54:	4622      	mov	r2, r4
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff f9e1 	bl	800831e <__swbuf_r>
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	e7ed      	b.n	8008f3c <_putc_r+0x44>

08008f60 <_fstat_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	; (8008f80 <_fstat_r+0x20>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	f7f8 fe96 	bl	8001c9e <_fstat>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d102      	bne.n	8008f7c <_fstat_r+0x1c>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	b103      	cbz	r3, 8008f7c <_fstat_r+0x1c>
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000604 	.word	0x20000604

08008f84 <_isatty_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_isatty_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7f8 fe95 	bl	8001cbe <_isatty>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_isatty_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_isatty_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20000604 	.word	0x20000604

08008fa4 <_sbrk_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d06      	ldr	r5, [pc, #24]	; (8008fc0 <_sbrk_r+0x1c>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7f8 fe9e 	bl	8001cf0 <_sbrk>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_sbrk_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_sbrk_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000604 	.word	0x20000604

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
