
RobotCar_v2.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800c0d0  0800c0d0  0001c0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6b4  0800c6b4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6bc  0800c6bc  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6bc  0800c6bc  0001c6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6c0  0800c6c0  0001c6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200001f8  0800c8bc  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800c8bc  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d1b  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e86  00000000  00000000  00036f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  00039e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001094  00000000  00000000  0003b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d74  00000000  00000000  0003c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a49  00000000  00000000  00065140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8ecc  00000000  00000000  0007eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aa0  00000000  00000000  00177a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0b8 	.word	0x0800c0b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800c0b8 	.word	0x0800c0b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <GET_TOF_DATA>:
/**
 * Auswertung der TOF-Sensoren
 *
 */
static void GET_TOF_DATA(uint8_t SensorNR)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	uint32_t delayTOF = 10;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	60bb      	str	r3, [r7, #8]
	printf("\n");
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f009 f8d4 	bl	800a060 <putchar>

		status[SensorNR] = VL53L4CD_StartRanging(deviceTOF[SensorNR]);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec0:	79fc      	ldrb	r4, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f008 f903 	bl	80090ce <VL53L4CD_StartRanging>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <GET_TOF_DATA+0x120>)
 8000ece:	551a      	strb	r2, [r3, r4]

		if(status[SensorNR] == 0)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a3c      	ldr	r2, [pc, #240]	; (8000fc4 <GET_TOF_DATA+0x120>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d15e      	bne.n	8000f98 <GET_TOF_DATA+0xf4>
		{
			uint8_t messungen = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
			// Jeden Messung zwei mal um Genauigkeit zu erhöhen
			while(messungen < 2)
 8000ede:	e058      	b.n	8000f92 <GET_TOF_DATA+0xee>
			{
				//Polling um zu pruefen ob eine neue Messung abgeschlossen ist
					HAL_Delay(delayTOF);
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f002 f861 	bl	8002fa8 <HAL_Delay>
					status[SensorNR] = VL53L4CD_CheckForDataReady(deviceTOF[SensorNR], &isReady[SensorNR]);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a35      	ldr	r2, [pc, #212]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000eea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <GET_TOF_DATA+0x124>)
 8000ef2:	440b      	add	r3, r1
 8000ef4:	79fc      	ldrb	r4, [r7, #7]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f008 f931 	bl	8009160 <VL53L4CD_CheckForDataReady>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <GET_TOF_DATA+0x120>)
 8000f04:	551a      	strb	r2, [r3, r4]

					if(isReady[SensorNR])
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <GET_TOF_DATA+0x124>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d035      	beq.n	8000f7c <GET_TOF_DATA+0xd8>
					{
						HAL_Delay(delayTOF);
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f002 f849 	bl	8002fa8 <HAL_Delay>

						//Hardwareinterrupt des Sensors löschen, sonst kann keine weitere Messung erfolgen
						VL53L4CD_ClearInterrupt(deviceTOF[SensorNR]);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 f8be 	bl	80090a0 <VL53L4CD_ClearInterrupt>

						//Entfernung auslesen
						//Die Entfernung wird immer direkt nach dem auslesen wieder gespeichert!
						HAL_Delay(delayTOF);
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f002 f83f 	bl	8002fa8 <HAL_Delay>
						VL53L4CD_GetResult(deviceTOF[SensorNR], &result[SensorNR]);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000f2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4925      	ldr	r1, [pc, #148]	; (8000fcc <GET_TOF_DATA+0x128>)
 8000f38:	440b      	add	r3, r1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f008 fa71 	bl	8009424 <VL53L4CD_GetResult>
						if(result[SensorNR].range_status == 0)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <GET_TOF_DATA+0x128>)
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d115      	bne.n	8000f7c <GET_TOF_DATA+0xd8>
						{
							distance_TOF[SensorNR] = result[SensorNR].distance_mm;
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	491d      	ldr	r1, [pc, #116]	; (8000fcc <GET_TOF_DATA+0x128>)
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	440a      	add	r2, r1
 8000f5a:	3202      	adds	r2, #2
 8000f5c:	8811      	ldrh	r1, [r2, #0]
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <GET_TOF_DATA+0x12c>)
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							printf("%s	-> Distance = %5d mm\n",TofDevStr[SensorNR], distance_TOF[SensorNR]);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <GET_TOF_DATA+0x130>)
 8000f68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <GET_TOF_DATA+0x12c>)
 8000f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <GET_TOF_DATA+0x134>)
 8000f78:	f009 f860 	bl	800a03c <iprintf>
						}
					}
					messungen++;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
					WaitMs(deviceTOF[SensorNR], delayTOF);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fa55 	bl	800243c <WaitMs>
			while(messungen < 2)
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d9a3      	bls.n	8000ee0 <GET_TOF_DATA+0x3c>
			}
		}
		HAL_Delay(delayTOF);
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f002 f805 	bl	8002fa8 <HAL_Delay>
		status[SensorNR] = VL53L4CD_StopRanging(deviceTOF[SensorNR]);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <GET_TOF_DATA+0x11c>)
 8000fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa6:	79fc      	ldrb	r4, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 f8c2 	bl	8009132 <VL53L4CD_StopRanging>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <GET_TOF_DATA+0x120>)
 8000fb4:	551a      	strb	r2, [r3, r4]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	20000228 	.word	0x20000228
 8000fc8:	20000234 	.word	0x20000234
 8000fcc:	20000254 	.word	0x20000254
 8000fd0:	200002e4 	.word	0x200002e4
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	0800c150 	.word	0x0800c150

08000fdc <TOF_INIT>:
 * Allerdings wird der Sensor 0 (0x52) zwar richtig initialisiert und eine ID zugewiesen, dennoch kann die erste I2C Adresse nicht genutzt werden, da es sonst zu Problemen bei folgenden Sensoren kommt.
 * Lösung: Variable TOF_COUNT um eins erhöhen um bei 6 Sensoren 7 I2C Adressen zu generieren, dabei die erste nicht nutzen und auswertnen. Sensoren belgen den Bus auf Device[1-7], Device [0] wird nicht genutzt.
 *
 */
static void TOF_INIT(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
	 uint8_t i;

	RESET_ALL_TOF_SEN();
 8000fe2:	f000 f8d9 	bl	8001198 <RESET_ALL_TOF_SEN>

	  for (i = 0; i < TOF_COUNT; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e06d      	b.n	80010c8 <TOF_INIT+0xec>
	  {
		  SET_TOF_PIN(i);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f888 	bl	8001104 <SET_TOF_PIN>

		  Dev_t i2cAddr = 0x52;		// !!! Wichtig !!! defaultAdress nicht ändern, führt zu I2C Problemen
 8000ff4:	2352      	movs	r3, #82	; 0x52
 8000ff6:	80bb      	strh	r3, [r7, #4]
		  deviceTOF[i]  = (i2cAddr + i*2);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b299      	uxth	r1, r3
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	440a      	add	r2, r1
 8001006:	b291      	uxth	r1, r2
 8001008:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <TOF_INIT+0x108>)
 800100a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  // Setzen der neuen I2C Adressen und auslesen der Sensor ID (0xEBAA)
		  VL53L4CD_SetI2CAddress(i2cAddr, deviceTOF[i]);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <TOF_INIT+0x108>)
 8001012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f007 ff46 	bl	8008eae <VL53L4CD_SetI2CAddress>
		  VL53L4CD_GetSensorId(deviceTOF[i], &sensor_id[i]);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <TOF_INIT+0x108>)
 8001026:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	492e      	ldr	r1, [pc, #184]	; (80010e8 <TOF_INIT+0x10c>)
 8001030:	440b      	add	r3, r1
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f007 ff56 	bl	8008ee6 <VL53L4CD_GetSensorId>

		  if (deviceTOF[i] != 0x52)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <TOF_INIT+0x108>)
 800103e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001042:	2b52      	cmp	r3, #82	; 0x52
 8001044:	d010      	beq.n	8001068 <TOF_INIT+0x8c>
		  {
			  printf("Init [ToF: %d]: Device -> %s 	ID: %04lX\n", deviceTOF[i], TofDevStr[i], (unsigned long)sensor_id[i]);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <TOF_INIT+0x108>)
 800104a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104e:	4618      	mov	r0, r3
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <TOF_INIT+0x110>)
 8001054:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4923      	ldr	r1, [pc, #140]	; (80010e8 <TOF_INIT+0x10c>)
 800105c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001060:	4601      	mov	r1, r0
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <TOF_INIT+0x114>)
 8001064:	f008 ffea 	bl	800a03c <iprintf>
		  }

		  if((status[i] || (sensor_id[i] != 0xEBAA)) && (i != 0))
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <TOF_INIT+0x118>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <TOF_INIT+0xa6>
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <TOF_INIT+0x10c>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	f64e 32aa 	movw	r2, #60330	; 0xebaa
 800107e:	4293      	cmp	r3, r2
 8001080:	d005      	beq.n	800108e <TOF_INIT+0xb2>
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <TOF_INIT+0xb2>
		  	{
		  		printf("VL53L4CD not detected at requested address\n");
 8001088:	481b      	ldr	r0, [pc, #108]	; (80010f8 <TOF_INIT+0x11c>)
 800108a:	f009 f845 	bl	800a118 <puts>
		  	}

		  //Sensor initialisieren
		  if (deviceTOF[i] != 0x52)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <TOF_INIT+0x108>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	2b52      	cmp	r3, #82	; 0x52
 8001098:	d00b      	beq.n	80010b2 <TOF_INIT+0xd6>
		  		  {
			  	  	  status[i] = VL53L4CD_SensorInit(deviceTOF[i]);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <TOF_INIT+0x108>)
 800109e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a2:	79fc      	ldrb	r4, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 ff37 	bl	8008f18 <VL53L4CD_SensorInit>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <TOF_INIT+0x118>)
 80010b0:	551a      	strb	r2, [r3, r4]
		  		  }

		  	if(status[i])
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <TOF_INIT+0x118>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <TOF_INIT+0xe6>
		  	{
		  		printf("VL53L4CD ULD Loading failed\n");
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <TOF_INIT+0x120>)
 80010be:	f009 f82b 	bl	800a118 <puts>
	  for (i = 0; i < TOF_COUNT; i++)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	3301      	adds	r3, #1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d98e      	bls.n	8000fec <TOF_INIT+0x10>
		  	}
	  	}

	  	printf("\n");
 80010ce:	200a      	movs	r0, #10
 80010d0:	f008 ffc6 	bl	800a060 <putchar>
	  	printf("VL53L4CD: Ultra Light Driver ready!\n");
 80010d4:	480a      	ldr	r0, [pc, #40]	; (8001100 <TOF_INIT+0x124>)
 80010d6:	f009 f81f 	bl	800a118 <puts>
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000214 	.word	0x20000214
 80010e8:	20000240 	.word	0x20000240
 80010ec:	20000000 	.word	0x20000000
 80010f0:	0800c16c 	.word	0x0800c16c
 80010f4:	20000228 	.word	0x20000228
 80010f8:	0800c198 	.word	0x0800c198
 80010fc:	0800c1c4 	.word	0x0800c1c4
 8001100:	0800c1e0 	.word	0x0800c1e0

08001104 <SET_TOF_PIN>:
/**
 *	PIN Set der ToF Sensoren (jeden Sonsor einzeln)
 *	Set der Pins über Register (ohne HAL-Funktion)
 */
static void SET_TOF_PIN(uint8_t device)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	switch (device)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b07      	cmp	r3, #7
 8001112:	d837      	bhi.n	8001184 <SET_TOF_PIN+0x80>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <SET_TOF_PIN+0x18>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800113d 	.word	0x0800113d
 8001120:	08001145 	.word	0x08001145
 8001124:	0800114d 	.word	0x0800114d
 8001128:	08001155 	.word	0x08001155
 800112c:	0800115d 	.word	0x0800115d
 8001130:	08001167 	.word	0x08001167
 8001134:	08001171 	.word	0x08001171
 8001138:	0800117b 	.word	0x0800117b
	{
		case 0:	//CENTER_LEFT		(PC04)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_4;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <SET_TOF_PIN+0x90>)
 800113e:	2210      	movs	r2, #16
 8001140:	619a      	str	r2, [r3, #24]
			break;
 8001142:	e020      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 1:	//FRONTSIDE_LEFT	(PC05)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_5;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <SET_TOF_PIN+0x90>)
 8001146:	2220      	movs	r2, #32
 8001148:	619a      	str	r2, [r3, #24]
			break;
 800114a:	e01c      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 2:	//FRONTSIDE_CENTER	(PC06)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_6;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <SET_TOF_PIN+0x90>)
 800114e:	2240      	movs	r2, #64	; 0x40
 8001150:	619a      	str	r2, [r3, #24]
			break;
 8001152:	e018      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 3:	//FRONTSIDE_RIGHT	(PC07)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_7;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <SET_TOF_PIN+0x90>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	619a      	str	r2, [r3, #24]
			break;
 800115a:	e014      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 4:	//BACKSIDE_CENTER 	(PC08)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_8;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <SET_TOF_PIN+0x90>)
 800115e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001162:	619a      	str	r2, [r3, #24]
			break;
 8001164:	e00f      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 5:	//BACKSIDE_LEFT 	(PC09)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_9;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <SET_TOF_PIN+0x90>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	619a      	str	r2, [r3, #24]
			break;
 800116e:	e00a      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 6:	//CENTER_RIGHT 		(PC10)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_10;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <SET_TOF_PIN+0x90>)
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001176:	619a      	str	r2, [r3, #24]
			break;
 8001178:	e005      	b.n	8001186 <SET_TOF_PIN+0x82>
		case 7:	//BACKSIDE_RIGHT 	(PC11)
			GPIOC->BSRR = (uint32_t)GPIO_PIN_11;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SET_TOF_PIN+0x90>)
 800117c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001180:	619a      	str	r2, [r3, #24]
			break;
 8001182:	e000      	b.n	8001186 <SET_TOF_PIN+0x82>

		default:
			break;
 8001184:	bf00      	nop
	}
	usDelay(3);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f8c2 	bl	8001310 <usDelay>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000800 	.word	0x48000800

08001198 <RESET_ALL_TOF_SEN>:
/**
 *	PIN Reset aller ToF Sensoren (GPIOC)
 *	Reset der Pins über Register (ohne HAL-Funktion)
 */
static void RESET_ALL_TOF_SEN(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	  GPIOC->BRR = (uint32_t)GPIO_PIN_4;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 800119e:	2210      	movs	r2, #16
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_5;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011a4:	2220      	movs	r2, #32
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_6;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_7;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_8;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_9;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_10;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
	  GPIOC->BRR = (uint32_t)GPIO_PIN_11;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <RESET_ALL_TOF_SEN+0x48>)
 80011ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
	  usDelay(3);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f89b 	bl	8001310 <usDelay>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	48000800 	.word	0x48000800

080011e4 <SET_OFFSET>:
 *
 * Falls eine Glasabdeckung für die Sensoren benutzt wird, muss zusätzlich eine Crosstalk kalibrierung erfolgen. Glas reflektiert eventuell Licht, was zu falschen Messungen führen kann
 *
 */
static void SET_OFFSET(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	int16_t offsetvalue;

	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 80011ea:	2301      	movs	r3, #1
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	e048      	b.n	8001282 <SET_OFFSET+0x9e>
	{
		switch (i) /* Offsetparameter in mm für jeden Sensor */
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d833      	bhi.n	8001260 <SET_OFFSET+0x7c>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <SET_OFFSET+0x1c>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001221 	.word	0x08001221
 8001204:	08001229 	.word	0x08001229
 8001208:	08001231 	.word	0x08001231
 800120c:	08001239 	.word	0x08001239
 8001210:	08001241 	.word	0x08001241
 8001214:	08001249 	.word	0x08001249
 8001218:	08001251 	.word	0x08001251
 800121c:	08001259 	.word	0x08001259
		{
			case 1:	//CENTER_LEFT		(PC04)
				offsetvalue = -10;
 8001220:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001224:	80fb      	strh	r3, [r7, #6]
				break;
 8001226:	e01c      	b.n	8001262 <SET_OFFSET+0x7e>
			case 2:	//FRONTSIDE_LEFT	(PC05)
				offsetvalue = -12;
 8001228:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800122c:	80fb      	strh	r3, [r7, #6]
				break;
 800122e:	e018      	b.n	8001262 <SET_OFFSET+0x7e>
			case 3:	//FRONTSIDE_RIGHT	(PC06)
				offsetvalue = -10;
 8001230:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001234:	80fb      	strh	r3, [r7, #6]
				break;
 8001236:	e014      	b.n	8001262 <SET_OFFSET+0x7e>
			case 4:	//FRONTSIDE_RIGHT	(PC07)
				offsetvalue = -10;
 8001238:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800123c:	80fb      	strh	r3, [r7, #6]
				break;
 800123e:	e010      	b.n	8001262 <SET_OFFSET+0x7e>
			case 5:	//BACKSIDE_CENTER	(PC08)
				offsetvalue = -8;
 8001240:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001244:	80fb      	strh	r3, [r7, #6]
				break;
 8001246:	e00c      	b.n	8001262 <SET_OFFSET+0x7e>
			case 6:	//BACKSIDE_LEFT		(PC09)
				offsetvalue = -15;
 8001248:	f64f 73f1 	movw	r3, #65521	; 0xfff1
 800124c:	80fb      	strh	r3, [r7, #6]
				break;
 800124e:	e008      	b.n	8001262 <SET_OFFSET+0x7e>
			case 7:	//CENTER_RIGHT		(PC10)
				offsetvalue = -10;
 8001250:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001254:	80fb      	strh	r3, [r7, #6]
				break;
 8001256:	e004      	b.n	8001262 <SET_OFFSET+0x7e>
			case 8:	//BACKSIDE_RIGHT	(PC11)
				offsetvalue = -8;
 8001258:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800125c:	80fb      	strh	r3, [r7, #6]
				break;
 800125e:	e000      	b.n	8001262 <SET_OFFSET+0x7e>

			default:
				break;
 8001260:	bf00      	nop
		}

		VL53L4CD_SetOffset(deviceTOF[i], offsetvalue);
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <SET_OFFSET+0xb0>)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f008 f987 	bl	8009584 <VL53L4CD_SetOffset>
		usDelay(3);
 8001276:	2003      	movs	r0, #3
 8001278:	f000 f84a 	bl	8001310 <usDelay>
	for (int i = 1; i < TOF_COUNT; i++)	// i = 1 um die erste I2C Adresse zu überspringen, da keiner Sensor zugewiesen
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d9b3      	bls.n	80011f0 <SET_OFFSET+0xc>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000214 	.word	0x20000214

08001298 <HAL_TIM_IC_CaptureCallback>:

/**
 * Zählt die Tick zwischen steigende und fellender Flanke
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	uint32_t Channel;

	if(htim == &htim5)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d102      	bne.n	80012ae <HAL_TIM_IC_CaptureCallback+0x16>
	{
		Channel = TIM_CHANNEL_1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e001      	b.n	80012b2 <HAL_TIM_IC_CaptureCallback+0x1a>
	}
	else
	{
		Channel = TIM_CHANNEL_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	60fb      	str	r3, [r7, #12]
	}

	if(captureIdx == 0 ) //First edge
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x68>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10a      	bne.n	80012d0 <HAL_TIM_IC_CaptureCallback+0x38>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, Channel); //__HAL_TIM_GetCounter;//
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f005 fba5 	bl	8006a0c <HAL_TIM_ReadCapturedValue>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80012c6:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x68>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
			edge2Time = HAL_TIM_ReadCapturedValue(htim, Channel);

			captureIdx = 0;
			icFlag = 1;
		}
}
 80012ce:	e010      	b.n	80012f2 <HAL_TIM_IC_CaptureCallback+0x5a>
		else if(captureIdx == 1) //Second edge
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x68>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10c      	bne.n	80012f2 <HAL_TIM_IC_CaptureCallback+0x5a>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, Channel);
 80012d8:	68f9      	ldr	r1, [r7, #12]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f005 fb96 	bl	8006a0c <HAL_TIM_ReadCapturedValue>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_TIM_IC_CaptureCallback+0x70>)
 80012e4:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x68>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_TIM_IC_CaptureCallback+0x74>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000344 	.word	0x20000344
 8001300:	200003dd 	.word	0x200003dd
 8001304:	200003e0 	.word	0x200003e0
 8001308:	200003e4 	.word	0x200003e4
 800130c:	200003dc 	.word	0x200003dc

08001310 <usDelay>:
/**
 *	Funktion stellt einen us Delay über die Internal Clock von TIM4 bereit
 *	us Delay wird für zum senden des Pulses an GPIO Pins der US-Sensoren benötigt
 */
void usDelay(uint32_t uSec)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d801      	bhi.n	8001322 <usDelay+0x12>
 800131e:	2302      	movs	r3, #2
 8001320:	607b      	str	r3, [r7, #4]
		usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <usDelay+0x60>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	62d3      	str	r3, [r2, #44]	; 0x2c
		usTIM->EGR = 1; 		/*Re-initialises the timer*/
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <usDelay+0x60>)
 800132c:	2201      	movs	r2, #1
 800132e:	615a      	str	r2, [r3, #20]
		usTIM->SR &= ~1; 		//Resets the flag
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <usDelay+0x60>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <usDelay+0x60>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6113      	str	r3, [r2, #16]
		usTIM->CR1 |= 1; 		//Enables the counter
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <usDelay+0x60>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <usDelay+0x60>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6013      	str	r3, [r2, #0]
		while((usTIM->SR&0x0001) != 1);
 8001348:	bf00      	nop
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <usDelay+0x60>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b01      	cmp	r3, #1
 8001354:	d1f9      	bne.n	800134a <usDelay+0x3a>
		usTIM->SR &= ~(0x0001);
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <usDelay+0x60>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <usDelay+0x60>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6113      	str	r3, [r2, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40000800 	.word	0x40000800

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137a:	f001 fd99 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137e:	f000 fae9 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001382:	f000 fe91 	bl	80020a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001386:	f000 fe59 	bl	800203c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800138a:	f000 fe27 	bl	8001fdc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800138e:	f000 fb33 	bl	80019f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001392:	f000 fbcb 	bl	8001b2c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001396:	f000 fb6f 	bl	8001a78 <MX_TIM1_Init>
  MX_TIM3_Init();
 800139a:	f000 fc3f 	bl	8001c1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800139e:	f000 fded 	bl	8001f7c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 80013a2:	f000 fd05 	bl	8001db0 <MX_TIM5_Init>
  MX_TIM15_Init();
 80013a6:	f000 fd75 	bl	8001e94 <MX_TIM15_Init>
  MX_TIM4_Init();
 80013aa:	f000 fcb3 	bl	8001d14 <MX_TIM4_Init>

  TOF_INIT();
 80013ae:	f7ff fe15 	bl	8000fdc <TOF_INIT>
  SET_OFFSET();
 80013b2:	f7ff ff17 	bl	80011e4 <SET_OFFSET>

  /* USER CODE BEGIN 2 */

  //UART
//  uint8_t tx_buff[10]={11,12,13,14,15,16,17,18,19};
  uint8_t rx_buff[10]={0};
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	809a      	strh	r2, [r3, #4]
//  uint8_t rx_buff2[10]={0};
  state = STOP;
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <main+0x120>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart1,rx_buff,10);
 80013c8:	463b      	mov	r3, r7
 80013ca:	220a      	movs	r2, #10
 80013cc:	4619      	mov	r1, r3
 80013ce:	4832      	ldr	r0, [pc, #200]	; (8001498 <main+0x124>)
 80013d0:	f006 fad6 	bl	8007980 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart2,"System Startup from Reset State\n",32);
 80013d4:	2220      	movs	r2, #32
 80013d6:	4931      	ldr	r1, [pc, #196]	; (800149c <main+0x128>)
 80013d8:	4831      	ldr	r0, [pc, #196]	; (80014a0 <main+0x12c>)
 80013da:	f006 fa55 	bl	8007888 <HAL_UART_Transmit_DMA>
  int UART_Tick = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]


  //PWM Servo Lenkung
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 80013e2:	2104      	movs	r1, #4
 80013e4:	482f      	ldr	r0, [pc, #188]	; (80014a4 <main+0x130>)
 80013e6:	f004 fcf9 	bl	8005ddc <HAL_TIM_PWM_Start>
  rx_buff[8]=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	723b      	strb	r3, [r7, #8]
  //50Hz==20ms (PA1)

  //PWM Motor Antrieb
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Clock is at 45MHZ Prescaler 900 Counter Period 1000 =>50Hz for Servo PWM
 80013ee:	2100      	movs	r1, #0
 80013f0:	482d      	ldr	r0, [pc, #180]	; (80014a8 <main+0x134>)
 80013f2:	f004 fcf3 	bl	8005ddc <HAL_TIM_PWM_Start>
//  uint32_t timer_counter=0;
//  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);

  //Hier wird das Neutralsignal für den Fahrtregler ausgegeben.
//  SET_PWM_MOTOR(75); 	// Set zero position of motor driver (TIM3 PWM Motor)
  htim3.Instance->CCR1 = RESET_MOTOR;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <main+0x134>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	224b      	movs	r2, #75	; 0x4b
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(2000);		// Wait for motor driver to get zero position
 80013fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001402:	f001 fdd1 	bl	8002fa8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (state) {
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <main+0x120>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d03a      	beq.n	8001484 <main+0x110>
 800140e:	2b02      	cmp	r3, #2
 8001410:	dc3b      	bgt.n	800148a <main+0x116>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <main+0xa8>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d00e      	beq.n	8001438 <main+0xc4>
		case PARK:
			START_PARKING();
			break;

		default:
			break;
 800141a:	e036      	b.n	800148a <main+0x116>
			htim2.Instance->CCR2 = RESET_LENKUNG;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <main+0x130>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2253      	movs	r2, #83	; 0x53
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 = RESET_MOTOR;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <main+0x134>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	224b      	movs	r2, #75	; 0x4b
 800142a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 800142c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001430:	f001 fdba 	bl	8002fa8 <HAL_Delay>
			CHECK_STATE();	//Checkt den aktuellen Fahrmodus (durch blauen Knopf änderbar) | einmal drücken DRIVE, kurz gedrückt halten PARK
 8001434:	f000 f87c 	bl	8001530 <CHECK_STATE>
			HAL_UART_Receive_DMA(&huart1,rx_buff,10); //Achtung Uart1 bei L476 TX(D8/PA9) RX(D2/PA10) nach Beschriftung entsprechen diese Pins Uart0!
 8001438:	463b      	mov	r3, r7
 800143a:	220a      	movs	r2, #10
 800143c:	4619      	mov	r1, r3
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <main+0x124>)
 8001440:	f006 fa9e 	bl	8007980 <HAL_UART_Receive_DMA>
				 if((SysTickGetTickcount()-UART_Tick)>=1000)
 8001444:	f001 fc22 	bl	8002c8c <SysTickGetTickcount>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001452:	db1c      	blt.n	800148e <main+0x11a>
					UART_Tick=SysTickGetTickcount();
 8001454:	f001 fc1a 	bl	8002c8c <SysTickGetTickcount>
 8001458:	60f8      	str	r0, [r7, #12]
					if(rx_buff[9]==88){TOGGLE_PIN(GPIOA,GPIO_PIN_5);}
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	2b58      	cmp	r3, #88	; 0x58
 800145e:	d104      	bne.n	800146a <main+0xf6>
 8001460:	2120      	movs	r1, #32
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f000 f82c 	bl	80014c2 <TOGGLE_PIN>
					htim2.Instance->CCR2 = rx_buff[3];
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <main+0x130>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
					htim3.Instance->CCR1 = rx_buff[4];
 8001472:	793a      	ldrb	r2, [r7, #4]
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <main+0x134>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
					ENCODE_SIGN(rx_buff[5]);
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f83b 	bl	80014f8 <ENCODE_SIGN>
			break;
 8001482:	e004      	b.n	800148e <main+0x11a>
			START_PARKING();
 8001484:	f000 f8d6 	bl	8001634 <START_PARKING>
			break;
 8001488:	e002      	b.n	8001490 <main+0x11c>
			break;
 800148a:	bf00      	nop
 800148c:	e7bb      	b.n	8001406 <main+0x92>
			break;
 800148e:	bf00      	nop
	  switch (state) {
 8001490:	e7b9      	b.n	8001406 <main+0x92>
 8001492:	bf00      	nop
 8001494:	20000750 	.word	0x20000750
 8001498:	20000520 	.word	0x20000520
 800149c:	0800c238 	.word	0x0800c238
 80014a0:	200005a8 	.word	0x200005a8
 80014a4:	20000488 	.word	0x20000488
 80014a8:	200004d4 	.word	0x200004d4

080014ac <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/

/* Private function  ---------------------------------------------------------*/
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){__NOP();} //check if all Data is received
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <TOGGLE_PIN>:
/**
 *	Toggelt Pin zwischen HIGH-LOW
 *
 */
static void TOGGLE_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]

	  /* Check the parameters */
	  assert_param(IS_GPIO_PIN(GPIO_Pin));

	  /* get current Output Data Register value */
	  odr = GPIOx->ODR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	60fb      	str	r3, [r7, #12]

	  /* Set selected pins that were at low level, and reset ones that were high */
	  GPIOx->BSRR = ((odr & GPIO_Pin) << 16U) | (~odr & GPIO_Pin);
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	041a      	lsls	r2, r3, #16
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43d9      	mvns	r1, r3
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	400b      	ands	r3, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <ENCODE_SIGN>:

/**
 * Auswerten welches Schild erkannt wurde und entsprechend den Modus ändern
 */
static void ENCODE_SIGN(uint8_t value)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b0e      	cmp	r3, #14
 8001506:	d005      	beq.n	8001514 <ENCODE_SIGN+0x1c>
 8001508:	2b2f      	cmp	r3, #47	; 0x2f
 800150a:	d107      	bne.n	800151c <ENCODE_SIGN+0x24>
		//Value für Einparkschild
		case 47:
			state = PARK;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <ENCODE_SIGN+0x34>)
 800150e:	2202      	movs	r2, #2
 8001510:	701a      	strb	r2, [r3, #0]
			break;
 8001512:	e004      	b.n	800151e <ENCODE_SIGN+0x26>
		//Value für Stop:
		case 14:
			state = STOP;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <ENCODE_SIGN+0x34>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
			break;
 800151a:	e000      	b.n	800151e <ENCODE_SIGN+0x26>
		default:
			break;
 800151c:	bf00      	nop
	}
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000750 	.word	0x20000750

08001530 <CHECK_STATE>:
 *
 * DRIVE-MODE: Bei Start schnelleres blinken der LED
 * PARK-MODE: Bei Start langsameres blinken der LED
*/
static void CHECK_STATE(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	uint8_t B1_VALUE = 0x01;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]

	TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 800153a:	2120      	movs	r1, #32
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f7ff ffbf 	bl	80014c2 <TOGGLE_PIN>

	do
	{
		B1_VALUE = CHECK_BUTTON();
 8001544:	f000 f838 	bl	80015b8 <CHECK_BUTTON>
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
	}
	while(B1_VALUE != 0x00U);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f8      	bne.n	8001544 <CHECK_STATE+0x14>

	printf("\nDRIVE-MODE:	START\n");
 8001552:	4816      	ldr	r0, [pc, #88]	; (80015ac <CHECK_STATE+0x7c>)
 8001554:	f008 fde0 	bl	800a118 <puts>
	state = DRIVE;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <CHECK_STATE+0x80>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(750);	//Zeit die Taster gedrückt werden muss um in DRIVE zu schalten
 800155e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001562:	f001 fd21 	bl	8002fa8 <HAL_Delay>

	B1_VALUE = CHECK_BUTTON();
 8001566:	f000 f827 	bl	80015b8 <CHECK_BUTTON>
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]

	if(B1_VALUE == 0x00U)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <CHECK_STATE+0x50>
	{
		printf("\nPARK-MODE:	START\n");
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <CHECK_STATE+0x84>)
 8001576:	f008 fdcf 	bl	800a118 <puts>
		state = PARK;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <CHECK_STATE+0x80>)
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]
	}

	TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 8001580:	2120      	movs	r1, #32
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f7ff ff9c 	bl	80014c2 <TOGGLE_PIN>

	if(state == DRIVE)
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <CHECK_STATE+0x80>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d103      	bne.n	800159a <CHECK_STATE+0x6a>
	{
		START_SIGNAL(100);
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f000 f828 	bl	80015e8 <START_SIGNAL>
	}
	else
	{
		START_SIGNAL(300);
	}
}
 8001598:	e003      	b.n	80015a2 <CHECK_STATE+0x72>
		START_SIGNAL(300);
 800159a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800159e:	f000 f823 	bl	80015e8 <START_SIGNAL>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	0800c25c 	.word	0x0800c25c
 80015b0:	20000750 	.word	0x20000750
 80015b4:	0800c270 	.word	0x0800c270

080015b8 <CHECK_BUTTON>:
/**
 * Funktion erkennt ob der Blaue Knopf auf dem STM32 Board gedrückt wurde
 * (PC13)
 */
GPIO_PinState CHECK_BUTTON(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
	GPIO_PinState bitstatus;
	  /* Check the parameters */
	  assert_param(IS_GPIO_PIN(GPIO_PIN_13));

	  if ((GPIOC->IDR & GPIO_PIN_13) != 0x00U)
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <CHECK_BUTTON+0x2c>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <CHECK_BUTTON+0x18>
	  {
	    bitstatus = 0x01U;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e001      	b.n	80015d4 <CHECK_BUTTON+0x1c>
	  }
	  else
	  {
	    bitstatus = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
	  }
	  return bitstatus;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	48000800 	.word	0x48000800

080015e8 <START_SIGNAL>:

static void START_SIGNAL(uint16_t MODE)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < 5; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e014      	b.n	8001622 <START_SIGNAL+0x3a>
	{
		HAL_Delay(MODE);
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fcd4 	bl	8002fa8 <HAL_Delay>
		TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 8001600:	2120      	movs	r1, #32
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f7ff ff5c 	bl	80014c2 <TOGGLE_PIN>
		HAL_Delay(MODE);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fccb 	bl	8002fa8 <HAL_Delay>
		TOGGLE_PIN(GPIOA,GPIO_PIN_5);
 8001612:	2120      	movs	r1, #32
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f7ff ff53 	bl	80014c2 <TOGGLE_PIN>
	for(int i = 0; i < 5; i++)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b04      	cmp	r3, #4
 8001626:	dde7      	ble.n	80015f8 <START_SIGNAL+0x10>
	}
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <START_PARKING>:
 *
 * MOTOR: Rückwärts 50....75....100 Vorwärts
 * LENKUNG: Rechts 45....83....105 Links
 */
static void START_PARKING(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
	int GW_PARKLÜCKE = 220U, GW_BACK = 400U, GW_PARALLEL_FRONT = 195U, GW_PARALLEL_CENTER = 250U, GW_KORREKTUR = 300U;	//GW = Grenzwert
 800163a:	23dc      	movs	r3, #220	; 0xdc
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	23c3      	movs	r3, #195	; 0xc3
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	23fa      	movs	r3, #250	; 0xfa
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001650:	607b      	str	r3, [r7, #4]

	htim3.Instance->CCR1 = 83;
 8001652:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <START_PARKING+0x184>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2253      	movs	r2, #83	; 0x53
 8001658:	635a      	str	r2, [r3, #52]	; 0x34

	while(1)
	{
		//Distanzcheck ob link/rechts einparken
		GET_TOF_DATA(2);
 800165a:	2002      	movs	r0, #2
 800165c:	f7ff fc22 	bl	8000ea4 <GET_TOF_DATA>
		GET_TOF_DATA(4);
 8001660:	2004      	movs	r0, #4
 8001662:	f7ff fc1f 	bl	8000ea4 <GET_TOF_DATA>

		if (distance_TOF[2] < distance_TOF[4] && distance_TOF[4] != 0U)
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <START_PARKING+0x188>)
 8001668:	889a      	ldrh	r2, [r3, #4]
 800166a:	4b54      	ldr	r3, [pc, #336]	; (80017bc <START_PARKING+0x188>)
 800166c:	891b      	ldrh	r3, [r3, #8]
 800166e:	429a      	cmp	r2, r3
 8001670:	f080 80aa 	bcs.w	80017c8 <START_PARKING+0x194>
 8001674:	4b51      	ldr	r3, [pc, #324]	; (80017bc <START_PARKING+0x188>)
 8001676:	891b      	ldrh	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a5 	beq.w	80017c8 <START_PARKING+0x194>
		{
		//Fahren bis Lücke erkannt wird
			do
			{
				GET_TOF_DATA(2);
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff fc10 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[2] < GW_PARKLÜCKE);	// TOF FRONTSIDE_LEFT
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <START_PARKING+0x188>)
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	461a      	mov	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4293      	cmp	r3, r2
 800168e:	dcf6      	bgt.n	800167e <START_PARKING+0x4a>

		//Fahren bis Lücke Zuende ist
			do
			{
				GET_TOF_DATA(2);
 8001690:	2002      	movs	r0, #2
 8001692:	f7ff fc07 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[2] > GW_PARKLÜCKE || distance_TOF[2] == 0U);	//TOF FRONTSIDE_LEFT
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <START_PARKING+0x188>)
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	461a      	mov	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4293      	cmp	r3, r2
 80016a0:	dbf6      	blt.n	8001690 <START_PARKING+0x5c>
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <START_PARKING+0x188>)
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f2      	beq.n	8001690 <START_PARKING+0x5c>

		//Fahren bis Auto in Position
			do
			{
				GET_TOF_DATA(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fbfa 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[1] > GW_PARKLÜCKE || distance_TOF[1] == 0U);	//TOF CENTER_LEFT
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <START_PARKING+0x188>)
 80016b2:	885b      	ldrh	r3, [r3, #2]
 80016b4:	461a      	mov	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	dbf6      	blt.n	80016aa <START_PARKING+0x76>
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <START_PARKING+0x188>)
 80016be:	885b      	ldrh	r3, [r3, #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f2      	beq.n	80016aa <START_PARKING+0x76>

			htim3.Instance->CCR1 = RESET_MOTOR;
 80016c4:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <START_PARKING+0x184>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	224b      	movs	r2, #75	; 0x4b
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34

		//Rückwärts und voll links einlenken
			htim2.Instance->CCR2 = 105;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <START_PARKING+0x18c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2269      	movs	r2, #105	; 0x69
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 80016d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d8:	f001 fc66 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <START_PARKING+0x184>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2245      	movs	r2, #69	; 0x45
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 80016e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e8:	f001 fc5e 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = RESET_MOTOR;
 80016ec:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <START_PARKING+0x184>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	224b      	movs	r2, #75	; 0x4b
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f001 fc56 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <START_PARKING+0x184>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2245      	movs	r2, #69	; 0x45
 8001702:	635a      	str	r2, [r3, #52]	; 0x34

		//Rückwärts bis TOF BACKSIDE_LEFT Mindestabstand erkannt, dann voll rechts einschlagen
			do
			{
				GET_TOF_DATA(6);
 8001704:	2006      	movs	r0, #6
 8001706:	f7ff fbcd 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[6] > GW_BACK || distance_TOF[6] == 0U);	//TOF BACKSIDE_LEFT
 800170a:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <START_PARKING+0x188>)
 800170c:	899b      	ldrh	r3, [r3, #12]
 800170e:	461a      	mov	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4293      	cmp	r3, r2
 8001714:	dbf6      	blt.n	8001704 <START_PARKING+0xd0>
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <START_PARKING+0x188>)
 8001718:	899b      	ldrh	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f2      	beq.n	8001704 <START_PARKING+0xd0>

			htim3.Instance->CCR1 = RESET_MOTOR;
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <START_PARKING+0x184>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	224b      	movs	r2, #75	; 0x4b
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8001726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172a:	f001 fc3d 	bl	8002fa8 <HAL_Delay>
			htim2.Instance->CCR2 = 45;
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <START_PARKING+0x18c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	222d      	movs	r2, #45	; 0x2d
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 8001736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800173a:	f001 fc35 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <START_PARKING+0x184>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2245      	movs	r2, #69	; 0x45
 8001744:	635a      	str	r2, [r3, #52]	; 0x34

			//Rückwärts bis Auto wieder paralell ist
				while(1)
				{
					GET_TOF_DATA(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff fbac 	bl	8000ea4 <GET_TOF_DATA>
					GET_TOF_DATA(2);
 800174c:	2002      	movs	r0, #2
 800174e:	f7ff fba9 	bl	8000ea4 <GET_TOF_DATA>

					if (distance_TOF[1] < GW_PARALLEL_CENTER && distance_TOF[2] < GW_PARALLEL_FRONT)	//TOF CENTER_LEFT | TOF FRONTSIDE_LEFT
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <START_PARKING+0x188>)
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4293      	cmp	r3, r2
 800175c:	ddf3      	ble.n	8001746 <START_PARKING+0x112>
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <START_PARKING+0x188>)
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4293      	cmp	r3, r2
 8001768:	dded      	ble.n	8001746 <START_PARKING+0x112>
					{
						htim3.Instance->CCR1 = RESET_MOTOR;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <START_PARKING+0x184>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	224b      	movs	r2, #75	; 0x4b
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR2 = RESET_LENKUNG;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <START_PARKING+0x18c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2253      	movs	r2, #83	; 0x53
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
						HAL_Delay(1000);
 800177a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177e:	f001 fc13 	bl	8002fa8 <HAL_Delay>
						break;
 8001782:	bf00      	nop
					}
				}

			htim3.Instance->CCR1 = 83;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <START_PARKING+0x184>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2253      	movs	r2, #83	; 0x53
 800178a:	635a      	str	r2, [r3, #52]	; 0x34

		//Geradeaus bis Auto korrekt steht
			do
			{
				GET_TOF_DATA(3);
 800178c:	2003      	movs	r0, #3
 800178e:	f7ff fb89 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[3] > GW_KORREKTUR|| distance_TOF[3] == 0U);	//TOF FRONTSIDE_CENTER
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <START_PARKING+0x188>)
 8001794:	88db      	ldrh	r3, [r3, #6]
 8001796:	461a      	mov	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4293      	cmp	r3, r2
 800179c:	dbf6      	blt.n	800178c <START_PARKING+0x158>
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <START_PARKING+0x188>)
 80017a0:	88db      	ldrh	r3, [r3, #6]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f2      	beq.n	800178c <START_PARKING+0x158>

			htim3.Instance->CCR1 = RESET_MOTOR;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <START_PARKING+0x184>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	224b      	movs	r2, #75	; 0x4b
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
			state = STOP;
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <START_PARKING+0x190>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
			break;
 80017b4:	e0af      	b.n	8001916 <START_PARKING+0x2e2>
 80017b6:	bf00      	nop
 80017b8:	200004d4 	.word	0x200004d4
 80017bc:	200002e4 	.word	0x200002e4
 80017c0:	20000488 	.word	0x20000488
 80017c4:	20000750 	.word	0x20000750

		}
		else if(distance_TOF[4] < distance_TOF[2] && distance_TOF[2] != 0U)
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <START_PARKING+0x2ec>)
 80017ca:	891a      	ldrh	r2, [r3, #8]
 80017cc:	4b54      	ldr	r3, [pc, #336]	; (8001920 <START_PARKING+0x2ec>)
 80017ce:	889b      	ldrh	r3, [r3, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f4bf af42 	bcs.w	800165a <START_PARKING+0x26>
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <START_PARKING+0x2ec>)
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f43f af3d 	beq.w	800165a <START_PARKING+0x26>
		{
		//Fahren bis Lücke erkannt wird
			do
			{
				GET_TOF_DATA(4);
 80017e0:	2004      	movs	r0, #4
 80017e2:	f7ff fb5f 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[4] < GW_PARKLÜCKE);	// TOF FRONTSIDE_RIGHT
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <START_PARKING+0x2ec>)
 80017e8:	891b      	ldrh	r3, [r3, #8]
 80017ea:	461a      	mov	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	dcf6      	bgt.n	80017e0 <START_PARKING+0x1ac>

		//Fahren bis Lücke Zuende ist
			do
			{
				GET_TOF_DATA(4);
 80017f2:	2004      	movs	r0, #4
 80017f4:	f7ff fb56 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[4] > GW_PARKLÜCKE || distance_TOF[4] == 0U);	//TOF FRONTSIDE_RIGHT
 80017f8:	4b49      	ldr	r3, [pc, #292]	; (8001920 <START_PARKING+0x2ec>)
 80017fa:	891b      	ldrh	r3, [r3, #8]
 80017fc:	461a      	mov	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4293      	cmp	r3, r2
 8001802:	dbf6      	blt.n	80017f2 <START_PARKING+0x1be>
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <START_PARKING+0x2ec>)
 8001806:	891b      	ldrh	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f2      	beq.n	80017f2 <START_PARKING+0x1be>

		//Fahren bis Auto in Position
			do
			{
				GET_TOF_DATA(7);
 800180c:	2007      	movs	r0, #7
 800180e:	f7ff fb49 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[7] > GW_PARKLÜCKE || distance_TOF[7] == 0U);	//TOF CENTER_RIGHT
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <START_PARKING+0x2ec>)
 8001814:	89db      	ldrh	r3, [r3, #14]
 8001816:	461a      	mov	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	4293      	cmp	r3, r2
 800181c:	dbf6      	blt.n	800180c <START_PARKING+0x1d8>
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <START_PARKING+0x2ec>)
 8001820:	89db      	ldrh	r3, [r3, #14]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f2      	beq.n	800180c <START_PARKING+0x1d8>

			htim3.Instance->CCR1 = RESET_MOTOR;
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <START_PARKING+0x2f0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	224b      	movs	r2, #75	; 0x4b
 800182c:	635a      	str	r2, [r3, #52]	; 0x34

		//Rückwärts und voll rechts einlenken
			htim2.Instance->CCR2 = 45;
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <START_PARKING+0x2f4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	222d      	movs	r2, #45	; 0x2d
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 8001836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800183a:	f001 fbb5 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <START_PARKING+0x2f0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2245      	movs	r2, #69	; 0x45
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8001846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184a:	f001 fbad 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = RESET_MOTOR;
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <START_PARKING+0x2f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	224b      	movs	r2, #75	; 0x4b
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8001856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185a:	f001 fba5 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <START_PARKING+0x2f0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2245      	movs	r2, #69	; 0x45
 8001864:	635a      	str	r2, [r3, #52]	; 0x34

		//Rückwärts bis TOF BACKSIDE_RIGHT Mindestabstand erkannt, dann voll links einschlagen
			do
			{
				GET_TOF_DATA(8);
 8001866:	2008      	movs	r0, #8
 8001868:	f7ff fb1c 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[8] > GW_BACK || distance_TOF[8] == 0U);	//TOF BACKSIDE_RIGHT
 800186c:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <START_PARKING+0x2ec>)
 800186e:	8a1b      	ldrh	r3, [r3, #16]
 8001870:	461a      	mov	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4293      	cmp	r3, r2
 8001876:	dbf6      	blt.n	8001866 <START_PARKING+0x232>
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <START_PARKING+0x2ec>)
 800187a:	8a1b      	ldrh	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f2      	beq.n	8001866 <START_PARKING+0x232>

			htim3.Instance->CCR1 = RESET_MOTOR;
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <START_PARKING+0x2f0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	224b      	movs	r2, #75	; 0x4b
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8001888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188c:	f001 fb8c 	bl	8002fa8 <HAL_Delay>
			htim2.Instance->CCR2 = 105;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <START_PARKING+0x2f4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2269      	movs	r2, #105	; 0x69
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(1000);
 8001898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189c:	f001 fb84 	bl	8002fa8 <HAL_Delay>
			htim3.Instance->CCR1 = 69;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <START_PARKING+0x2f0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2245      	movs	r2, #69	; 0x45
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

			//Rückwärts bis Auto wieder paralell ist
				while(1)
				{
					GET_TOF_DATA(7);
 80018a8:	2007      	movs	r0, #7
 80018aa:	f7ff fafb 	bl	8000ea4 <GET_TOF_DATA>
					GET_TOF_DATA(4);
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff faf8 	bl	8000ea4 <GET_TOF_DATA>

					if (distance_TOF[7] < GW_PARALLEL_CENTER && distance_TOF[4] < GW_PARALLEL_FRONT)	//TOF CENTER_RIGHT | TOF FRONTSIDE_RIGHT
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <START_PARKING+0x2ec>)
 80018b6:	89db      	ldrh	r3, [r3, #14]
 80018b8:	461a      	mov	r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4293      	cmp	r3, r2
 80018be:	ddf3      	ble.n	80018a8 <START_PARKING+0x274>
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <START_PARKING+0x2ec>)
 80018c2:	891b      	ldrh	r3, [r3, #8]
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	dded      	ble.n	80018a8 <START_PARKING+0x274>
					{
						htim3.Instance->CCR1 = RESET_MOTOR;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <START_PARKING+0x2f0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	224b      	movs	r2, #75	; 0x4b
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR2 = RESET_LENKUNG;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <START_PARKING+0x2f4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2253      	movs	r2, #83	; 0x53
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
						HAL_Delay(1000);
 80018dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e0:	f001 fb62 	bl	8002fa8 <HAL_Delay>
						break;
 80018e4:	bf00      	nop
					}
				}

			htim3.Instance->CCR1 = 83;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <START_PARKING+0x2f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2253      	movs	r2, #83	; 0x53
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34

		//Geradeaus bis Auto korrekt steht
			do
			{
				GET_TOF_DATA(3);
 80018ee:	2003      	movs	r0, #3
 80018f0:	f7ff fad8 	bl	8000ea4 <GET_TOF_DATA>
			}
			while(distance_TOF[3] > GW_KORREKTUR|| distance_TOF[3] == 0U);	//TOF FRONTSIDE_CENTER
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <START_PARKING+0x2ec>)
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4293      	cmp	r3, r2
 80018fe:	dbf6      	blt.n	80018ee <START_PARKING+0x2ba>
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <START_PARKING+0x2ec>)
 8001902:	88db      	ldrh	r3, [r3, #6]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f2      	beq.n	80018ee <START_PARKING+0x2ba>

			htim3.Instance->CCR1 = RESET_MOTOR;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <START_PARKING+0x2f0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	224b      	movs	r2, #75	; 0x4b
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
			state = STOP;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <START_PARKING+0x2f8>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002e4 	.word	0x200002e4
 8001924:	200004d4 	.word	0x200004d4
 8001928:	20000488 	.word	0x20000488
 800192c:	20000750 	.word	0x20000750

08001930 <__io_putchar>:

/**
 *	Funktion dient zur printf Ausgabe auf der seriellen Schnittstelle
 */
	PUTCHAR
	{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
		/* e.g. write a character to the USART2 and Loop until the end of transmission */
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001938:	1d39      	adds	r1, r7, #4
 800193a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193e:	2201      	movs	r2, #1
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <__io_putchar+0x20>)
 8001942:	f005 ff17 	bl	8007774 <HAL_UART_Transmit>

		return ch;
 8001946:	687b      	ldr	r3, [r7, #4]
	}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200005a8 	.word	0x200005a8

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2244      	movs	r2, #68	; 0x44
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f008 fcb8 	bl	800a2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800197a:	f002 fe65 	bl	8004648 <HAL_PWREx_ControlVoltageScaling>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001984:	f000 fc22 	bl	80021cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001988:	2302      	movs	r3, #2
 800198a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001992:	2310      	movs	r3, #16
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001996:	2302      	movs	r3, #2
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199a:	2302      	movs	r3, #2
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800199e:	2302      	movs	r3, #2
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 80019a2:	2319      	movs	r3, #25
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019a6:	2307      	movs	r3, #7
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80019ae:	2304      	movs	r3, #4
 80019b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fe9c 	bl	80046f4 <HAL_RCC_OscConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019c2:	f000 fc03 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c6:	230f      	movs	r3, #15
 80019c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ca:	2303      	movs	r3, #3
 80019cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fa63 	bl	8004eac <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019ec:	f000 fbee 	bl	80021cc <Error_Handler>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3758      	adds	r7, #88	; 0x58
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_I2C1_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <MX_I2C1_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00200B2B;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <MX_I2C1_Init+0x7c>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a34:	f002 f826 	bl	8003a84 <HAL_I2C_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a3e:	f000 fbc5 	bl	80021cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4809      	ldr	r0, [pc, #36]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a46:	f002 fd59 	bl	80044fc <HAL_I2CEx_ConfigAnalogFilter>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a50:	f000 fbbc 	bl	80021cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_I2C1_Init+0x74>)
 8001a58:	f002 fd9b 	bl	8004592 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 fbb3 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200003e8 	.word	0x200003e8
 8001a70:	40005400 	.word	0x40005400
 8001a74:	00200b2b 	.word	0x00200b2b

08001a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f008 fc26 	bl	800a2d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <MX_TIM1_Init+0xb0>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	480e      	ldr	r0, [pc, #56]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001aec:	f004 fadd 	bl	80060aa <HAL_TIM_Encoder_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001af6:	f000 fb69 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_TIM1_Init+0xac>)
 8001b0c:	f005 fd3e 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001b16:	f000 fb59 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000043c 	.word	0x2000043c
 8001b28:	40012c00 	.word	0x40012c00

08001b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b68:	f240 3283 	movw	r2, #899	; 0x383
 8001b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001b8a:	f004 f86f 	bl	8005c6c <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001b94:	f000 fb1a 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481c      	ldr	r0, [pc, #112]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001ba6:	f004 fe67 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001bb0:	f000 fb0c 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb4:	4818      	ldr	r0, [pc, #96]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001bb6:	f004 f8b0 	bl	8005d1a <HAL_TIM_PWM_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001bc0:	f000 fb04 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001bd4:	f005 fcda 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001bde:	f000 faf5 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	2360      	movs	r3, #96	; 0x60
 8001be4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001bfa:	f004 fd29 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c04:	f000 fae2 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <MX_TIM2_Init+0xec>)
 8001c0a:	f000 fdc9 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	; 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000488 	.word	0x20000488

08001c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c50:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <MX_TIM3_Init+0xf4>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c56:	f240 3283 	movw	r2, #899	; 0x383
 8001c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c76:	4825      	ldr	r0, [pc, #148]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c78:	f003 fff8 	bl	8005c6c <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001c82:	f000 faa3 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c90:	4619      	mov	r1, r3
 8001c92:	481e      	ldr	r0, [pc, #120]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001c94:	f004 fdf0 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c9e:	f000 fa95 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ca2:	481a      	ldr	r0, [pc, #104]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001ca4:	f004 f839 	bl	8005d1a <HAL_TIM_PWM_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001cae:	f000 fa8d 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4812      	ldr	r0, [pc, #72]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001cc2:	f005 fc63 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001ccc:	f000 fa7e 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd0:	2360      	movs	r3, #96	; 0x60
 8001cd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001ce8:	f004 fcb2 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001cf2:	f000 fa6b 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);					///*******MODIFIED
 8001cf6:	213c      	movs	r1, #60	; 0x3c
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001cfa:	f004 fa7c 	bl	80061f6 <HAL_TIM_Encoder_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM3_Init+0xf0>)
 8001d00:	f000 fd4e 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 8001d04:	bf00      	nop
 8001d06:	3738      	adds	r7, #56	; 0x38
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200004d4 	.word	0x200004d4
 8001d10:	40000400 	.word	0x40000400

08001d14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <MX_TIM4_Init+0x98>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d3a:	2231      	movs	r2, #49	; 0x31
 8001d3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d58:	f003 ff88 	bl	8005c6c <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 fa33 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d74:	f004 fd80 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f000 fa25 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d90:	f005 fbfc 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d9a:	f000 fa17 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002f8 	.word	0x200002f8
 8001dac:	40000800 	.word	0x40000800

08001db0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001dde:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <MX_TIM5_Init+0xe0>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50-1;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001de4:	2231      	movs	r2, #49	; 0x31
 8001de6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001df0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001df4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e02:	4822      	ldr	r0, [pc, #136]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001e04:	f003 ff32 	bl	8005c6c <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8001e0e:	f000 f9dd 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481b      	ldr	r0, [pc, #108]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001e20:	f004 fd2a 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001e2a:	f000 f9cf 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001e2e:	4817      	ldr	r0, [pc, #92]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001e30:	f004 f8da 	bl	8005fe8 <HAL_TIM_IC_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e3a:	f000 f9c7 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001e4e:	f005 fb9d 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8001e58:	f000 f9b8 	bl	80021cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e60:	2301      	movs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <MX_TIM5_Init+0xdc>)
 8001e74:	f004 fb4f 	bl	8006516 <HAL_TIM_IC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8001e7e:	f000 f9a5 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3730      	adds	r7, #48	; 0x30
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000344 	.word	0x20000344
 8001e90:	40000c00 	.word	0x40000c00

08001e94 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <MX_TIM15_Init+0xe4>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50-1;
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ec8:	2231      	movs	r2, #49	; 0x31
 8001eca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ed4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ed8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001eec:	4821      	ldr	r0, [pc, #132]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001eee:	f003 febd 	bl	8005c6c <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8001ef8:	f000 f968 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0320 	add.w	r3, r7, #32
 8001f06:	4619      	mov	r1, r3
 8001f08:	481a      	ldr	r0, [pc, #104]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001f0a:	f004 fcb5 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001f14:	f000 f95a 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001f18:	4816      	ldr	r0, [pc, #88]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001f1a:	f004 f865 	bl	8005fe8 <HAL_TIM_IC_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001f24:	f000 f952 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	480f      	ldr	r0, [pc, #60]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001f38:	f005 fb28 	bl	800758c <HAL_TIMEx_MasterConfigSynchronization>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001f42:	f000 f943 	bl	80021cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001f46:	230a      	movs	r3, #10
 8001f48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 8001f52:	2304      	movs	r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_TIM15_Init+0xe0>)
 8001f5e:	f004 fada 	bl	8006516 <HAL_TIM_IC_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001f68:	f000 f930 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	3730      	adds	r7, #48	; 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000390 	.word	0x20000390
 8001f78:	40014000 	.word	0x40014000

08001f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <MX_USART1_UART_Init+0x5c>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fc0:	f005 fb8a 	bl	80076d8 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fca:	f000 f8ff 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000520 	.word	0x20000520
 8001fd8:	40013800 	.word	0x40013800

08001fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART2_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002020:	f005 fb5a 	bl	80076d8 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 f8cf 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200005a8 	.word	0x200005a8
 8002038:	40004400 	.word	0x40004400

0800203c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_DMA_Init+0x68>)
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <MX_DMA_Init+0x68>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6493      	str	r3, [r2, #72]	; 0x48
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_DMA_Init+0x68>)
 8002050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	200e      	movs	r0, #14
 8002060:	f001 f8a1 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002064:	200e      	movs	r0, #14
 8002066:	f001 f8ba 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	200f      	movs	r0, #15
 8002070:	f001 f899 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002074:	200f      	movs	r0, #15
 8002076:	f001 f8b2 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2010      	movs	r0, #16
 8002080:	f001 f891 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002084:	2010      	movs	r0, #16
 8002086:	f001 f8aa 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2011      	movs	r0, #17
 8002090:	f001 f889 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002094:	2011      	movs	r0, #17
 8002096:	f001 f8a2 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <MX_GPIO_Init+0x118>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <MX_GPIO_Init+0x118>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <MX_GPIO_Init+0x118>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <MX_GPIO_Init+0x118>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2120      	movs	r1, #32
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f001 fc95 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CENTER_LEFT_Pin|FRONTSIDE_LEFT_Pin|FRONTSIDE_CENTER_Pin|FRONTSIDE_RIGHT_Pin
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 617f 	mov.w	r1, #4080	; 0xff0
 8002130:	4824      	ldr	r0, [pc, #144]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002132:	f001 fc8f 	bl	8003a54 <HAL_GPIO_WritePin>
                          |BACKSIDE_CENTER_Pin|BACKSIDE_LEFT_Pin|CENTER_RIGHT_Pin|BACKSIDE_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGGER_FRONT_US_Pin|TRIGGER_BACK_US_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800213c:	4822      	ldr	r0, [pc, #136]	; (80021c8 <MX_GPIO_Init+0x120>)
 800213e:	f001 fc89 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_BLUE_Pin */
  GPIO_InitStruct.Pin = B1_BLUE_Pin;
 8002142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	481b      	ldr	r0, [pc, #108]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002158:	f001 fad2 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800215c:	2320      	movs	r3, #32
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002176:	f001 fac3 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : CENTER_LEFT_Pin FRONTSIDE_LEFT_Pin FRONTSIDE_CENTER_Pin FRONTSIDE_RIGHT_Pin
                           BACKSIDE_CENTER_Pin BACKSIDE_LEFT_Pin CENTER_RIGHT_Pin BACKSIDE_RIGHT_Pin */
  GPIO_InitStruct.Pin = CENTER_LEFT_Pin|FRONTSIDE_LEFT_Pin|FRONTSIDE_CENTER_Pin|FRONTSIDE_RIGHT_Pin
 800217a:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800217e:	617b      	str	r3, [r7, #20]
                          |BACKSIDE_CENTER_Pin|BACKSIDE_LEFT_Pin|CENTER_RIGHT_Pin|BACKSIDE_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002194:	f001 fab4 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_FRONT_US_Pin TRIGGER_BACK_US_Pin */
  GPIO_InitStruct.Pin = TRIGGER_FRONT_US_Pin|TRIGGER_BACK_US_Pin;
 8002198:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_GPIO_Init+0x120>)
 80021b2:	f001 faa5 	bl	8003700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	48000800 	.word	0x48000800
 80021c8:	48000400 	.word	0x48000400

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <VL53L4CD_RdDWord>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
 80021de:	4603      	mov	r3, r0
 80021e0:	603a      	str	r2, [r7, #0]
 80021e2:	80fb      	strh	r3, [r7, #6]
 80021e4:	460b      	mov	r3, r1
 80021e6:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80021fc:	f107 020c 	add.w	r2, r7, #12
 8002200:	88f9      	ldrh	r1, [r7, #6]
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2302      	movs	r3, #2
 8002208:	4810      	ldr	r0, [pc, #64]	; (800224c <VL53L4CD_RdDWord+0x74>)
 800220a:	f001 fcd7 	bl	8003bbc <HAL_I2C_Master_Transmit>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8002212:	f107 0208 	add.w	r2, r7, #8
 8002216:	88f9      	ldrh	r1, [r7, #6]
 8002218:	2364      	movs	r3, #100	; 0x64
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2304      	movs	r3, #4
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <VL53L4CD_RdDWord+0x74>)
 8002220:	f001 fde4 	bl	8003dec <HAL_I2C_Master_Receive>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8002228:	7a3b      	ldrb	r3, [r7, #8]
 800222a:	061a      	lsls	r2, r3, #24
 800222c:	7a7b      	ldrb	r3, [r7, #9]
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8002232:	7abb      	ldrb	r3, [r7, #10]
 8002234:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8002236:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8002238:	7afa      	ldrb	r2, [r7, #11]
 800223a:	4313      	orrs	r3, r2
 800223c:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	601a      	str	r2, [r3, #0]
	return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200003e8 	.word	0x200003e8

08002250 <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	603a      	str	r2, [r7, #0]
 800225a:	80fb      	strh	r3, [r7, #6]
 800225c:	460b      	mov	r3, r1
 800225e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b29b      	uxth	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 800226e:	88bb      	ldrh	r3, [r7, #4]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8002274:	f107 020c 	add.w	r2, r7, #12
 8002278:	88f9      	ldrh	r1, [r7, #6]
 800227a:	2364      	movs	r3, #100	; 0x64
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2302      	movs	r3, #2
 8002280:	480f      	ldr	r0, [pc, #60]	; (80022c0 <VL53L4CD_RdWord+0x70>)
 8002282:	f001 fc9b 	bl	8003bbc <HAL_I2C_Master_Transmit>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 800228a:	f107 0208 	add.w	r2, r7, #8
 800228e:	88f9      	ldrh	r1, [r7, #6]
 8002290:	2364      	movs	r3, #100	; 0x64
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2302      	movs	r3, #2
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <VL53L4CD_RdWord+0x70>)
 8002298:	f001 fda8 	bl	8003dec <HAL_I2C_Master_Receive>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 80022a0:	7a3b      	ldrb	r3, [r7, #8]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	7a7b      	ldrb	r3, [r7, #9]
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	801a      	strh	r2, [r3, #0]
	return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200003e8 	.word	0x200003e8

080022c4 <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4603      	mov	r3, r0
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	80fb      	strh	r3, [r7, #6]
 80022d0:	460b      	mov	r3, r1
 80022d2:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 80022e8:	f107 020c 	add.w	r2, r7, #12
 80022ec:	88f9      	ldrh	r1, [r7, #6]
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2302      	movs	r3, #2
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <VL53L4CD_RdByte+0x60>)
 80022f6:	f001 fc61 	bl	8003bbc <HAL_I2C_Master_Transmit>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	88f9      	ldrh	r1, [r7, #6]
 8002304:	2364      	movs	r3, #100	; 0x64
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <VL53L4CD_RdByte+0x60>)
 800230c:	f001 fd6e 	bl	8003dec <HAL_I2C_Master_Receive>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8002314:	7a3a      	ldrb	r2, [r7, #8]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	701a      	strb	r2, [r3, #0]
	return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200003e8 	.word	0x200003e8

08002328 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
 8002332:	460b      	mov	r3, r1
 8002334:	80bb      	strh	r3, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b29b      	uxth	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8002352:	f107 020c 	add.w	r2, r7, #12
 8002356:	88f9      	ldrh	r1, [r7, #6]
 8002358:	2364      	movs	r3, #100	; 0x64
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2303      	movs	r3, #3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <VL53L4CD_WrByte+0x4c>)
 8002360:	f001 fc2c 	bl	8003bbc <HAL_I2C_Master_Transmit>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
	return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003e8 	.word	0x200003e8

08002378 <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af02      	add	r7, sp, #8
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
 8002382:	460b      	mov	r3, r1
 8002384:	80bb      	strh	r3, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800238e:	88bb      	ldrh	r3, [r7, #4]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8002398:	88bb      	ldrh	r3, [r7, #4]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	88f9      	ldrh	r1, [r7, #6]
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2304      	movs	r3, #4
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <VL53L4CD_WrWord+0x58>)
 80023bc:	f001 fbfe 	bl	8003bbc <HAL_I2C_Master_Transmit>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200003e8 	.word	0x200003e8

080023d4 <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	4603      	mov	r3, r0
 80023dc:	603a      	str	r2, [r7, #0]
 80023de:	80fb      	strh	r3, [r7, #6]
 80023e0:	460b      	mov	r3, r1
 80023e2:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 80023f2:	88bb      	ldrh	r3, [r7, #4]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	0e1b      	lsrs	r3, r3, #24
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2db      	uxtb	r3, r3
 8002406:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b2db      	uxtb	r3, r3
 800240e:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8002416:	f107 0208 	add.w	r2, r7, #8
 800241a:	88f9      	ldrh	r1, [r7, #6]
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2306      	movs	r3, #6
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <VL53L4CD_WrDWord+0x64>)
 8002424:	f001 fbca 	bl	8003bbc <HAL_I2C_Master_Transmit>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
	return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200003e8 	.word	0x200003e8

0800243c <WaitMs>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f000 fdad 	bl	8002fa8 <HAL_Delay>
	return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_MspInit+0x44>)
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <HAL_MspInit+0x44>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6613      	str	r3, [r2, #96]	; 0x60
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_MspInit+0x44>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_MspInit+0x44>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_MspInit+0x44>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_MspInit+0x44>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0ac      	sub	sp, #176	; 0xb0
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2288      	movs	r2, #136	; 0x88
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f007 ff09 	bl	800a2d8 <memset>
  if(hi2c->Instance==I2C1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_I2C_MspInit+0xc8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d147      	bne.n	8002560 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 ff09 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024e8:	f7ff fe70 	bl	80021cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <HAL_I2C_MspInit+0xcc>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_I2C_MspInit+0xcc>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <HAL_I2C_MspInit+0xcc>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002512:	2301      	movs	r3, #1
 8002514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251e:	2304      	movs	r3, #4
 8002520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002528:	4619      	mov	r1, r3
 800252a:	4811      	ldr	r0, [pc, #68]	; (8002570 <HAL_I2C_MspInit+0xd0>)
 800252c:	f001 f8e8 	bl	8003700 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_I2C_MspInit+0xd4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_I2C_MspInit+0xd4>)
 8002536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253a:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_I2C_MspInit+0xd4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_I2C_MspInit+0xd4>)
 8002542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002546:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_I2C_MspInit+0xcc>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_I2C_MspInit+0xcc>)
 800254e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_I2C_MspInit+0xcc>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	37b0      	adds	r7, #176	; 0xb0
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40005400 	.word	0x40005400
 800256c:	40021000 	.word	0x40021000
 8002570:	48000400 	.word	0x48000400
 8002574:	40010000 	.word	0x40010000

08002578 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_TIM_Encoder_MspInit+0x90>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d131      	bne.n	80025fe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 80025a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_TIM_Encoder_MspInit+0x94>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f001 f889 	bl	8003700 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2018      	movs	r0, #24
 80025f4:	f000 fdd7 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025f8:	2018      	movs	r0, #24
 80025fa:	f000 fdf0 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d114      	bne.n	800265c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	201c      	movs	r0, #28
 8002650:	f000 fda9 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002654:	201c      	movs	r0, #28
 8002656:	f000 fdc2 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800265a:	e090      	b.n	800277e <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4a      	ldr	r2, [pc, #296]	; (800278c <HAL_TIM_Base_MspInit+0x17c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10c      	bne.n	8002680 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a47      	ldr	r2, [pc, #284]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
}
 800267e:	e07e      	b.n	800277e <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a42      	ldr	r2, [pc, #264]	; (8002790 <HAL_TIM_Base_MspInit+0x180>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a3e      	ldr	r2, [pc, #248]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	e06c      	b.n	800277e <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM5)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_TIM_Base_MspInit+0x184>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d131      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a35      	ldr	r2, [pc, #212]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_FRONT_US_Pin;
 80026de:	2301      	movs	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026ee:	2302      	movs	r3, #2
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_FRONT_US_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fc:	f001 f800 	bl	8003700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2032      	movs	r0, #50	; 0x32
 8002706:	f000 fd4e 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800270a:	2032      	movs	r0, #50	; 0x32
 800270c:	f000 fd67 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8002710:	e035      	b.n	800277e <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM15)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_TIM_Base_MspInit+0x188>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d130      	bne.n	800277e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 800271e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6613      	str	r3, [r2, #96]	; 0x60
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_TIM_Base_MspInit+0x178>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_BACK_US_Pin;
 800274c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800275e:	230e      	movs	r3, #14
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_BACK_US_GPIO_Port, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_TIM_Base_MspInit+0x18c>)
 800276a:	f000 ffc9 	bl	8003700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2018      	movs	r0, #24
 8002774:	f000 fd17 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002778:	2018      	movs	r0, #24
 800277a:	f000 fd30 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3738      	adds	r7, #56	; 0x38
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800
 8002794:	40000c00 	.word	0x40000c00
 8002798:	40014000 	.word	0x40014000
 800279c:	48000400 	.word	0x48000400

080027a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c0:	d11d      	bne.n	80027fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027da:	2302      	movs	r3, #2
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f8:	f000 ff82 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027fc:	e021      	b.n	8002842 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIM_MspPostInit+0xb0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d11c      	bne.n	8002842 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_TIM_MspPostInit+0xac>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002820:	2340      	movs	r3, #64	; 0x40
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002830:	2302      	movs	r3, #2
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f000 ff5f 	bl	8003700 <HAL_GPIO_Init>
}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	40000400 	.word	0x40000400

08002854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b0ae      	sub	sp, #184	; 0xb8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2288      	movs	r2, #136	; 0x88
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f007 fd2f 	bl	800a2d8 <memset>
  if(huart->Instance==USART1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_UART_MspInit+0x1a4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	f040 80c7 	bne.w	8002a14 <HAL_UART_MspInit+0x1c0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002886:	2301      	movs	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800288a:	2300      	movs	r3, #0
 800288c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fd2e 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800289e:	f7ff fc95 	bl	80021cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028a2:	4b56      	ldr	r3, [pc, #344]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	4a55      	ldr	r2, [pc, #340]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6613      	str	r3, [r2, #96]	; 0x60
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a49      	ldr	r2, [pc, #292]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_UART_MspInit+0x1a8>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002904:	2307      	movs	r3, #7
 8002906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800290e:	4619      	mov	r1, r3
 8002910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002914:	f000 fef4 	bl	8003700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002918:	2340      	movs	r3, #64	; 0x40
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002930:	2307      	movs	r3, #7
 8002932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800293a:	4619      	mov	r1, r3
 800293c:	4830      	ldr	r0, [pc, #192]	; (8002a00 <HAL_UART_MspInit+0x1ac>)
 800293e:	f000 fedf 	bl	8003700 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002944:	4a30      	ldr	r2, [pc, #192]	; (8002a08 <HAL_UART_MspInit+0x1b4>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002948:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 800294a:	2202      	movs	r2, #2
 800294c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002978:	4822      	ldr	r0, [pc, #136]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 800297a:	f000 fc4b 	bl	8003214 <HAL_DMA_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002984:	f7ff fc22 	bl	80021cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 800298c:	675a      	str	r2, [r3, #116]	; 0x74
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_UART_MspInit+0x1b0>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_UART_MspInit+0x1bc>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 800299c:	2202      	movs	r2, #2
 800299e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029ca:	4810      	ldr	r0, [pc, #64]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029cc:	f000 fc22 	bl	8003214 <HAL_DMA_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 80029d6:	f7ff fbf9 	bl	80021cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029de:	671a      	str	r2, [r3, #112]	; 0x70
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_UART_MspInit+0x1b8>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	2025      	movs	r0, #37	; 0x25
 80029ec:	f000 fbdb 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029f0:	2025      	movs	r0, #37	; 0x25
 80029f2:	f000 fbf4 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029f6:	e0a9      	b.n	8002b4c <HAL_UART_MspInit+0x2f8>
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40021000 	.word	0x40021000
 8002a00:	48000400 	.word	0x48000400
 8002a04:	20000630 	.word	0x20000630
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	20000678 	.word	0x20000678
 8002a10:	40020044 	.word	0x40020044
  else if(huart->Instance==USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <HAL_UART_MspInit+0x300>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 8096 	bne.w	8002b4c <HAL_UART_MspInit+0x2f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a20:	2302      	movs	r3, #2
 8002a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a24:	2300      	movs	r3, #0
 8002a26:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fc61 	bl	80052f4 <HAL_RCCEx_PeriphCLKConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8002a38:	f7ff fbc8 	bl	80021cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3c:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a60:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_UART_MspInit+0x304>)
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a84:	2307      	movs	r3, #7
 8002a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a94:	f000 fe34 	bl	8003700 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002a9a:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <HAL_UART_MspInit+0x30c>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ace:	4823      	ldr	r0, [pc, #140]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ad0:	f000 fba0 	bl	8003214 <HAL_DMA_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8002ada:	f7ff fb77 	bl	80021cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ae2:	675a      	str	r2, [r3, #116]	; 0x74
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_UART_MspInit+0x308>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_UART_MspInit+0x314>)
 8002aee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002af2:	2202      	movs	r2, #2
 8002af4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002af8:	2210      	movs	r2, #16
 8002afa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b20:	4810      	ldr	r0, [pc, #64]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b22:	f000 fb77 	bl	8003214 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8002b2c:	f7ff fb4e 	bl	80021cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b34:	671a      	str	r2, [r3, #112]	; 0x70
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <HAL_UART_MspInit+0x310>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2026      	movs	r0, #38	; 0x26
 8002b42:	f000 fb30 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b46:	2026      	movs	r0, #38	; 0x26
 8002b48:	f000 fb49 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8002b4c:	bf00      	nop
 8002b4e:	37b8      	adds	r7, #184	; 0xb8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	200006c0 	.word	0x200006c0
 8002b60:	4002006c 	.word	0x4002006c
 8002b64:	20000708 	.word	0x20000708
 8002b68:	40020080 	.word	0x40020080

08002b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <NMI_Handler+0x4>

08002b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <MemManage_Handler+0x4>

08002b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb8:	f000 f9d6 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ulTimer += 1;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <SysTick_Handler+0x18>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	4a02      	ldr	r2, [pc, #8]	; (8002bcc <SysTick_Handler+0x18>)
 8002bc4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000754 	.word	0x20000754

08002bd0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA1_Channel4_IRQHandler+0x10>)
 8002bd6:	f000 fcb4 	bl	8003542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000678 	.word	0x20000678

08002be4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <DMA1_Channel5_IRQHandler+0x10>)
 8002bea:	f000 fcaa 	bl	8003542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000630 	.word	0x20000630

08002bf8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <DMA1_Channel6_IRQHandler+0x10>)
 8002bfe:	f000 fca0 	bl	8003542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200006c0 	.word	0x200006c0

08002c0c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Channel7_IRQHandler+0x10>)
 8002c12:	f000 fc96 	bl	8003542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000708 	.word	0x20000708

08002c20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002c26:	f003 fb74 	bl	8006312 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002c2a:	4803      	ldr	r0, [pc, #12]	; (8002c38 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002c2c:	f003 fb71 	bl	8006312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000043c 	.word	0x2000043c
 8002c38:	20000390 	.word	0x20000390

08002c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM2_IRQHandler+0x10>)
 8002c42:	f003 fb66 	bl	8006312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000488 	.word	0x20000488

08002c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <USART1_IRQHandler+0x10>)
 8002c56:	f004 fedf 	bl	8007a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000520 	.word	0x20000520

08002c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <USART2_IRQHandler+0x10>)
 8002c6a:	f004 fed5 	bl	8007a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200005a8 	.word	0x200005a8

08002c78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TIM5_IRQHandler+0x10>)
 8002c7e:	f003 fb48 	bl	8006312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000344 	.word	0x20000344

08002c8c <SysTickGetTickcount>:

/* USER CODE BEGIN 1 */
unsigned long SysTickGetTickcount(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
	unsigned long ulTickcount;

	ulTickcount = ulTimer;
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTickGetTickcount+0x1c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	607b      	str	r3, [r7, #4]

	return ulTickcount;
 8002c98:	687b      	ldr	r3, [r7, #4]


}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000754 	.word	0x20000754

08002cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
	return 1;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_kill>:

int _kill(int pid, int sig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cc6:	f007 fb59 	bl	800a37c <__errno>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2216      	movs	r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_exit>:

void _exit (int status)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffe7 	bl	8002cbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cee:	e7fe      	b.n	8002cee <_exit+0x12>

08002cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00a      	b.n	8002d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d02:	f3af 8000 	nop.w
 8002d06:	4601      	mov	r1, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	60ba      	str	r2, [r7, #8]
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf0      	blt.n	8002d02 <_read+0x12>
	}

return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e009      	b.n	8002d50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fdf3 	bl	8001930 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbf1      	blt.n	8002d3c <_write+0x12>
	}
	return len;
 8002d58:	687b      	ldr	r3, [r7, #4]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_close>:

int _close(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_isatty>:

int _isatty(int file)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	return 1;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <_sbrk+0x5c>)
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <_sbrk+0x60>)
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_sbrk+0x64>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <_sbrk+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dfc:	f007 fabe 	bl	800a37c <__errno>
 8002e00:	4603      	mov	r3, r0
 8002e02:	220c      	movs	r2, #12
 8002e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e009      	b.n	8002e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <_sbrk+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <_sbrk+0x64>)
 8002e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20018000 	.word	0x20018000
 8002e2c:	00000400 	.word	0x00000400
 8002e30:	20000758 	.word	0x20000758
 8002e34:	200008b0 	.word	0x200008b0

08002e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <SystemInit+0x20>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <SystemInit+0x20>)
 8002e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e60:	f7ff ffea 	bl	8002e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	; (8002e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <LoopForever+0xe>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ea8 <LoopForever+0x16>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f007 fa7d 	bl	800a388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e8e:	f7fe fa71 	bl	8001374 <main>

08002e92 <LoopForever>:

LoopForever:
    b LoopForever
 8002e92:	e7fe      	b.n	8002e92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002ea0:	0800c6c4 	.word	0x0800c6c4
  ldr r2, =_sbss
 8002ea4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ea8:	200008ac 	.word	0x200008ac

08002eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC1_2_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_Init+0x3c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <HAL_Init+0x3c>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f000 f962 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f000 f80f 	bl	8002ef0 <HAL_InitTick>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	71fb      	strb	r3, [r7, #7]
 8002edc:	e001      	b.n	8002ee2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ede:	f7ff fabb 	bl	8002458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_InitTick+0x6c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_InitTick+0x70>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_InitTick+0x6c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f96d 	bl	80031fa <HAL_SYSTICK_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d809      	bhi.n	8002f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f000 f937 	bl	80031a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_InitTick+0x74>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e004      	b.n	8002f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e001      	b.n	8002f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000002c 	.word	0x2000002c
 8002f60:	20000024 	.word	0x20000024
 8002f64:	20000028 	.word	0x20000028

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000002c 	.word	0x2000002c
 8002f8c:	2000075c 	.word	0x2000075c

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	2000075c 	.word	0x2000075c

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000002c 	.word	0x2000002c

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e098      	b.n	8003358 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <HAL_DMA_Init+0x150>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d80f      	bhi.n	8003252 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_DMA_Init+0x154>)
 800323a:	4413      	add	r3, r2
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_DMA_Init+0x158>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_DMA_Init+0x15c>)
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
 8003250:	e00e      	b.n	8003270 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_DMA_Init+0x160>)
 800325a:	4413      	add	r3, r2
 800325c:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_DMA_Init+0x158>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	009a      	lsls	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a42      	ldr	r2, [pc, #264]	; (8003378 <HAL_DMA_Init+0x164>)
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ca:	d039      	beq.n	8003340 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_DMA_Init+0x15c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11a      	bne.n	800330c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_DMA_Init+0x168>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f003 031c 	and.w	r3, r3, #28
 80032e2:	210f      	movs	r1, #15
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	4924      	ldr	r1, [pc, #144]	; (800337c <HAL_DMA_Init+0x168>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_DMA_Init+0x168>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f003 031c 	and.w	r3, r3, #28
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	491d      	ldr	r1, [pc, #116]	; (800337c <HAL_DMA_Init+0x168>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
 800330a:	e019      	b.n	8003340 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_DMA_Init+0x16c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f003 031c 	and.w	r3, r3, #28
 8003318:	210f      	movs	r1, #15
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	4917      	ldr	r1, [pc, #92]	; (8003380 <HAL_DMA_Init+0x16c>)
 8003322:	4013      	ands	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_DMA_Init+0x16c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f003 031c 	and.w	r3, r3, #28
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	4911      	ldr	r1, [pc, #68]	; (8003380 <HAL_DMA_Init+0x16c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40020407 	.word	0x40020407
 8003368:	bffdfff8 	.word	0xbffdfff8
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	40020000 	.word	0x40020000
 8003374:	bffdfbf8 	.word	0xbffdfbf8
 8003378:	40020400 	.word	0x40020400
 800337c:	400200a8 	.word	0x400200a8
 8003380:	400204a8 	.word	0x400204a8

08003384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_DMA_Start_IT+0x20>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e04b      	b.n	800343c <HAL_DMA_Start_IT+0xb8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d13a      	bne.n	800342e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f95f 	bl	80036a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 020e 	orr.w	r2, r2, #14
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e00f      	b.n	800341c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 020a 	orr.w	r2, r2, #10
 800341a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e005      	b.n	800343a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d008      	beq.n	800346e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2204      	movs	r2, #4
 8003460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e022      	b.n	80034b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 020e 	bic.w	r2, r2, #14
 800347c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f003 021c 	and.w	r2, r3, #28
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d005      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e029      	b.n	8003538 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020e 	bic.w	r2, r2, #14
 80034f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f003 021c 	and.w	r2, r3, #28
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
    }
  }
  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 031c 	and.w	r3, r3, #28
 8003562:	2204      	movs	r2, #4
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d026      	beq.n	80035bc <HAL_DMA_IRQHandler+0x7a>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0204 	bic.w	r2, r2, #4
 8003594:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f003 021c 	and.w	r2, r3, #28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2104      	movs	r1, #4
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d071      	beq.n	8003696 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035ba:	e06c      	b.n	8003696 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	f003 031c 	and.w	r3, r3, #28
 80035c4:	2202      	movs	r2, #2
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02e      	beq.n	800362e <HAL_DMA_IRQHandler+0xec>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d029      	beq.n	800362e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020a 	bic.w	r2, r2, #10
 80035f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f003 021c 	and.w	r2, r3, #28
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2102      	movs	r1, #2
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d038      	beq.n	8003696 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800362c:	e033      	b.n	8003696 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 031c 	and.w	r3, r3, #28
 8003636:	2208      	movs	r2, #8
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x156>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d025      	beq.n	8003698 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020e 	bic.w	r2, r2, #14
 800365a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f003 021c 	and.w	r2, r3, #28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003696:	bf00      	nop
 8003698:	bf00      	nop
}
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f003 021c 	and.w	r2, r3, #28
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d108      	bne.n	80036e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036e2:	e007      	b.n	80036f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370e:	e17f      	b.n	8003a10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8171 	beq.w	8003a0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d005      	beq.n	8003740 <HAL_GPIO_Init+0x40>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d130      	bne.n	80037a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003776:	2201      	movs	r2, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0201 	and.w	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d118      	bne.n	80037e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037b4:	2201      	movs	r2, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f003 0201 	and.w	r2, r3, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d017      	beq.n	800381c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d123      	bne.n	8003870 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	6939      	ldr	r1, [r7, #16]
 800386c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80ac 	beq.w	8003a0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <HAL_GPIO_Init+0x330>)
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	4a5e      	ldr	r2, [pc, #376]	; (8003a30 <HAL_GPIO_Init+0x330>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6613      	str	r3, [r2, #96]	; 0x60
 80038be:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <HAL_GPIO_Init+0x330>)
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038ca:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_GPIO_Init+0x334>)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	3302      	adds	r3, #2
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038f4:	d025      	beq.n	8003942 <HAL_GPIO_Init+0x242>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4f      	ldr	r2, [pc, #316]	; (8003a38 <HAL_GPIO_Init+0x338>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01f      	beq.n	800393e <HAL_GPIO_Init+0x23e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <HAL_GPIO_Init+0x33c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d019      	beq.n	800393a <HAL_GPIO_Init+0x23a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4d      	ldr	r2, [pc, #308]	; (8003a40 <HAL_GPIO_Init+0x340>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_GPIO_Init+0x236>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4c      	ldr	r2, [pc, #304]	; (8003a44 <HAL_GPIO_Init+0x344>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00d      	beq.n	8003932 <HAL_GPIO_Init+0x232>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_GPIO_Init+0x348>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <HAL_GPIO_Init+0x22e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <HAL_GPIO_Init+0x34c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_GPIO_Init+0x22a>
 8003926:	2306      	movs	r3, #6
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x244>
 800392a:	2307      	movs	r3, #7
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x244>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x244>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x244>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x244>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x244>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x244>
 8003942:	2300      	movs	r3, #0
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003954:	4937      	ldr	r1, [pc, #220]	; (8003a34 <HAL_GPIO_Init+0x334>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_GPIO_Init+0x350>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	43db      	mvns	r3, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003986:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_GPIO_Init+0x350>)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_GPIO_Init+0x350>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_GPIO_Init+0x350>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_GPIO_Init+0x350>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_GPIO_Init+0x350>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_GPIO_Init+0x350>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a04:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_GPIO_Init+0x350>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f47f ae78 	bne.w	8003710 <HAL_GPIO_Init+0x10>
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	48000c00 	.word	0x48000c00
 8003a44:	48001000 	.word	0x48001000
 8003a48:	48001400 	.word	0x48001400
 8003a4c:	48001800 	.word	0x48001800
 8003a50:	40010400 	.word	0x40010400

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a64:	787b      	ldrb	r3, [r7, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e08d      	b.n	8003bb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fcf8 	bl	80024a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d108      	bne.n	8003b26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	e007      	b.n	8003b36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69d9      	ldr	r1, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	817b      	strh	r3, [r7, #10]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 80fd 	bne.w	8003dd8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_Master_Transmit+0x30>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0f6      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf4:	f7ff f9cc 	bl	8002f90 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2319      	movs	r3, #25
 8003c00:	2201      	movs	r2, #1
 8003c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa0a 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e0e1      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2210      	movs	r2, #16
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2bff      	cmp	r3, #255	; 0xff
 8003c46:	d906      	bls.n	8003c56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	22ff      	movs	r2, #255	; 0xff
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e007      	b.n	8003c66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d024      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <HAL_I2C_Master_Transmit+0x228>)
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fbf1 	bl	8004498 <I2C_TransferConfig>
 8003cb6:	e066      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <HAL_I2C_Master_Transmit+0x228>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fbe6 	bl	8004498 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ccc:	e05b      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f9f3 	bl	80040be <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07b      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d034      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d130      	bne.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f976 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e04d      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	d90e      	bls.n	8003d66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	22ff      	movs	r2, #255	; 0xff
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	2300      	movs	r3, #0
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fb9a 	bl	8004498 <I2C_TransferConfig>
 8003d64:	e00f      	b.n	8003d86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fb89 	bl	8004498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19e      	bne.n	8003cce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	6a39      	ldr	r1, [r7, #32]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f9d9 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01a      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <HAL_I2C_Master_Transmit+0x22c>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	80002000 	.word	0x80002000
 8003de8:	fe00e800 	.word	0xfe00e800

08003dec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	817b      	strh	r3, [r7, #10]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	f040 80db 	bne.w	8003fc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2C_Master_Receive+0x30>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0d4      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e24:	f7ff f8b4 	bl	8002f90 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2319      	movs	r3, #25
 8003e30:	2201      	movs	r2, #1
 8003e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f8f2 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0bf      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2222      	movs	r2, #34	; 0x22
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2210      	movs	r2, #16
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	893a      	ldrh	r2, [r7, #8]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2bff      	cmp	r3, #255	; 0xff
 8003e76:	d90e      	bls.n	8003e96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	4b52      	ldr	r3, [pc, #328]	; (8003fd0 <HAL_I2C_Master_Receive+0x1e4>)
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fb02 	bl	8004498 <I2C_TransferConfig>
 8003e94:	e06d      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	8979      	ldrh	r1, [r7, #10]
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_I2C_Master_Receive+0x1e4>)
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 faf1 	bl	8004498 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003eb6:	e05c      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6a39      	ldr	r1, [r7, #32]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f989 	bl	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e07c      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d034      	beq.n	8003f72 <HAL_I2C_Master_Receive+0x186>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d130      	bne.n	8003f72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f880 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04d      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2bff      	cmp	r3, #255	; 0xff
 8003f32:	d90e      	bls.n	8003f52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 faa4 	bl	8004498 <I2C_TransferConfig>
 8003f50:	e00f      	b.n	8003f72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	8979      	ldrh	r1, [r7, #10]
 8003f64:	2300      	movs	r3, #0
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fa93 	bl	8004498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d19d      	bne.n	8003eb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6a39      	ldr	r1, [r7, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f8e3 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e01a      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2220      	movs	r2, #32
 8003f96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_I2C_Master_Receive+0x1e8>)
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	80002400 	.word	0x80002400
 8003fd4:	fe00e800 	.word	0xfe00e800

08003fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d103      	bne.n	8003ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d007      	beq.n	8004014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	619a      	str	r2, [r3, #24]
  }
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004030:	e031      	b.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d02d      	beq.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe ffa9 	bl	8002f90 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d122      	bne.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d113      	bne.n	8004096 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0be      	beq.n	8004032 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040ca:	e033      	b.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f901 	bl	80042d8 <I2C_IsErrorOccurred>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e031      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d025      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fe ff52 	bl	8002f90 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11a      	bne.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d013      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e007      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d1c4      	bne.n	80040cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004158:	e02f      	b.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f8ba 	bl	80042d8 <I2C_IsErrorOccurred>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe ff0f 	bl	8002f90 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11a      	bne.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d013      	beq.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d1c8      	bne.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e0:	e06b      	b.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f876 	bl	80042d8 <I2C_IsErrorOccurred>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e069      	b.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b20      	cmp	r3, #32
 8004202:	d138      	bne.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d105      	bne.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e055      	b.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d107      	bne.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2210      	movs	r2, #16
 8004232:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2204      	movs	r2, #4
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
 800423a:	e002      	b.n	8004242 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2220      	movs	r2, #32
 8004248:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004256:	400b      	ands	r3, r1
 8004258:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e029      	b.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fe fe8b 	bl	8002f90 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d116      	bne.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00f      	beq.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e007      	b.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d18c      	bne.n	80041e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	fe00e800 	.word	0xfe00e800

080042d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d068      	beq.n	80043d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800430c:	e049      	b.n	80043a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d045      	beq.n	80043a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fe3b 	bl	8002f90 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_IsErrorOccurred+0x54>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13a      	bne.n	80043a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800433e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d121      	bne.n	8004394 <I2C_IsErrorOccurred+0xbc>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d01d      	beq.n	8004394 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b20      	cmp	r3, #32
 800435c:	d01a      	beq.n	8004394 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800436e:	f7fe fe0f 	bl	8002f90 <HAL_GetTick>
 8004372:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004374:	e00e      	b.n	8004394 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004376:	f7fe fe0b 	bl	8002f90 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b19      	cmp	r3, #25
 8004382:	d907      	bls.n	8004394 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f043 0320 	orr.w	r3, r3, #32
 800438a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004392:	e006      	b.n	80043a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d1e9      	bne.n	8004376 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d003      	beq.n	80043b8 <I2C_IsErrorOccurred+0xe0>
 80043b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0aa      	beq.n	800430e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800441a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fdc3 	bl	8003fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <I2C_IsErrorOccurred+0x1bc>)
 800445e:	400b      	ands	r3, r1
 8004460:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800448a:	4618      	mov	r0, r3
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	fe00e800 	.word	0xfe00e800

08004498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044b0:	7a7b      	ldrb	r3, [r7, #9]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	0d5b      	lsrs	r3, r3, #21
 80044d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <I2C_TransferConfig+0x60>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	43db      	mvns	r3, r3
 80044dc:	ea02 0103 	and.w	r1, r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	03ff63ff 	.word	0x03ff63ff

080044fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b20      	cmp	r3, #32
 8004510:	d138      	bne.n	8004584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800451c:	2302      	movs	r3, #2
 800451e:	e032      	b.n	8004586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800454e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d139      	bne.n	800461c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e033      	b.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2224      	movs	r2, #36	; 0x24
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <HAL_PWREx_GetVoltageRange+0x18>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40007000 	.word	0x40007000

08004648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d130      	bne.n	80046ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004658:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d038      	beq.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004674:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004676:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2232      	movs	r2, #50	; 0x32
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468c:	e002      	b.n	8004694 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b01      	subs	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a0:	d102      	bne.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f2      	bne.n	800468e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d110      	bne.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e00f      	b.n	80046da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d007      	beq.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046d0:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40007000 	.word	0x40007000
 80046ec:	20000024 	.word	0x20000024
 80046f0:	431bde83 	.word	0x431bde83

080046f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e3ca      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b97      	ldr	r3, [pc, #604]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004710:	4b94      	ldr	r3, [pc, #592]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80e4 	beq.w	80048f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <HAL_RCC_OscConfig+0x4a>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	f040 808b 	bne.w	800484c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 8087 	bne.w	800484c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800473e:	4b89      	ldr	r3, [pc, #548]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e3a2      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <HAL_RCC_OscConfig+0x7c>
 8004766:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476e:	e005      	b.n	800477c <HAL_RCC_OscConfig+0x88>
 8004770:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477c:	4293      	cmp	r3, r2
 800477e:	d223      	bcs.n	80047c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fd55 	bl	8005234 <RCC_SetFlashLatencyFromMSIRange>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e383      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004794:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a72      	ldr	r2, [pc, #456]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800479a:	f043 0308 	orr.w	r3, r3, #8
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b70      	ldr	r3, [pc, #448]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	496d      	ldr	r1, [pc, #436]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b2:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	4968      	ldr	r1, [pc, #416]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
 80047c6:	e025      	b.n	8004814 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047c8:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a65      	ldr	r2, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4960      	ldr	r1, [pc, #384]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047e6:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	495b      	ldr	r1, [pc, #364]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fd15 	bl	8005234 <RCC_SetFlashLatencyFromMSIRange>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e343      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004814:	f000 fc4a 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b52      	ldr	r3, [pc, #328]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	4950      	ldr	r1, [pc, #320]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
 8004830:	4a4e      	ldr	r2, [pc, #312]	; (800496c <HAL_RCC_OscConfig+0x278>)
 8004832:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004834:	4b4e      	ldr	r3, [pc, #312]	; (8004970 <HAL_RCC_OscConfig+0x27c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe fb59 	bl	8002ef0 <HAL_InitTick>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d052      	beq.n	80048ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	e327      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d032      	beq.n	80048ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004854:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a42      	ldr	r2, [pc, #264]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004860:	f7fe fb96 	bl	8002f90 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004868:	f7fe fb92 	bl	8002f90 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e310      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004886:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a36      	ldr	r2, [pc, #216]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800488c:	f043 0308 	orr.w	r3, r3, #8
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b34      	ldr	r3, [pc, #208]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4931      	ldr	r1, [pc, #196]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	492c      	ldr	r1, [pc, #176]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	e01a      	b.n	80048f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a29      	ldr	r2, [pc, #164]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048c6:	f7fe fb63 	bl	8002f90 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ce:	f7fe fb5f 	bl	8002f90 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e2dd      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048e0:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0x1da>
 80048ec:	e000      	b.n	80048f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d074      	beq.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x21a>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d10e      	bne.n	8004926 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d10b      	bne.n	8004926 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d064      	beq.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d160      	bne.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e2ba      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x24a>
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e026      	b.n	800498c <HAL_RCC_OscConfig+0x298>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004946:	d115      	bne.n	8004974 <HAL_RCC_OscConfig+0x280>
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800494e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a02      	ldr	r2, [pc, #8]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800495a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e014      	b.n	800498c <HAL_RCC_OscConfig+0x298>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	0800c29c 	.word	0x0800c29c
 800496c:	20000024 	.word	0x20000024
 8004970:	20000028 	.word	0x20000028
 8004974:	4ba0      	ldr	r3, [pc, #640]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a9f      	ldr	r2, [pc, #636]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 800497a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b9d      	ldr	r3, [pc, #628]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a9c      	ldr	r2, [pc, #624]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fafc 	bl	8002f90 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fe faf8 	bl	8002f90 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e276      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ae:	4b92      	ldr	r3, [pc, #584]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x2a8>
 80049ba:	e014      	b.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fe fae8 	bl	8002f90 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fe fae4 	bl	8002f90 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e262      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d6:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2d0>
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d060      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x310>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d119      	bne.n	8004a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d116      	bne.n	8004a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a04:	4b7c      	ldr	r3, [pc, #496]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x328>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e23f      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	4973      	ldr	r1, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a30:	e040      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d023      	beq.n	8004a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3a:	4b6f      	ldr	r3, [pc, #444]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6e      	ldr	r2, [pc, #440]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fe faa3 	bl	8002f90 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fe fa9f 	bl	8002f90 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e21d      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a60:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	495f      	ldr	r1, [pc, #380]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
 8004a80:	e018      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b5d      	ldr	r3, [pc, #372]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5c      	ldr	r2, [pc, #368]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe fa7f 	bl	8002f90 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fe fa7b 	bl	8002f90 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1f9      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d03c      	beq.n	8004b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac8:	4b4b      	ldr	r3, [pc, #300]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ace:	4a4a      	ldr	r2, [pc, #296]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fa5a 	bl	8002f90 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fe fa56 	bl	8002f90 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1d4      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ef      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x3ec>
 8004b00:	e01b      	b.n	8004b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fe fa3d 	bl	8002f90 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1a:	f7fe fa39 	bl	8002f90 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1b7      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b2c:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ef      	bne.n	8004b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80a6 	beq.w	8004c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d118      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8c:	f7fe fa00 	bl	8002f90 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b94:	f7fe f9fc 	bl	8002f90 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e17a      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x508>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4d8>
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bca:	e029      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d115      	bne.n	8004c00 <HAL_RCC_OscConfig+0x50c>
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <HAL_RCC_OscConfig+0x504>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	4b9c      	ldr	r3, [pc, #624]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	4a9b      	ldr	r2, [pc, #620]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c10:	4b98      	ldr	r3, [pc, #608]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a97      	ldr	r2, [pc, #604]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe f9b2 	bl	8002f90 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fe f9ae 	bl	8002f90 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e12a      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c46:	4b8b      	ldr	r3, [pc, #556]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ed      	beq.n	8004c30 <HAL_RCC_OscConfig+0x53c>
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fe f99b 	bl	8002f90 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5e:	f7fe f997 	bl	8002f90 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e113      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c74:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ed      	bne.n	8004c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c82:	7ffb      	ldrb	r3, [r7, #31]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d105      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c88:	4b7a      	ldr	r3, [pc, #488]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	4a79      	ldr	r2, [pc, #484]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80fe 	beq.w	8004e9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	f040 80d0 	bne.w	8004e48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ca8:	4b72      	ldr	r3, [pc, #456]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f003 0203 	and.w	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d130      	bne.n	8004d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d127      	bne.n	8004d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d11f      	bne.n	8004d1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce8:	2a07      	cmp	r2, #7
 8004cea:	bf14      	ite	ne
 8004cec:	2201      	movne	r2, #1
 8004cee:	2200      	moveq	r2, #0
 8004cf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d113      	bne.n	8004d1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	3b01      	subs	r3, #1
 8004d18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d06e      	beq.n	8004dfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d069      	beq.n	8004df8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0ad      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d40:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a4b      	ldr	r2, [pc, #300]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d4c:	f7fe f920 	bl	8002f90 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe f91c 	bl	8002f90 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e09a      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_OscConfig+0x784>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d82:	3a01      	subs	r2, #1
 8004d84:	0112      	lsls	r2, r2, #4
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d8c:	0212      	lsls	r2, r2, #8
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d94:	0852      	lsrs	r2, r2, #1
 8004d96:	3a01      	subs	r2, #1
 8004d98:	0552      	lsls	r2, r2, #21
 8004d9a:	4311      	orrs	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004da0:	0852      	lsrs	r2, r2, #1
 8004da2:	3a01      	subs	r2, #1
 8004da4:	0652      	lsls	r2, r2, #25
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dac:	0912      	lsrs	r2, r2, #4
 8004dae:	0452      	lsls	r2, r2, #17
 8004db0:	430a      	orrs	r2, r1
 8004db2:	4930      	ldr	r1, [pc, #192]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004db8:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd0:	f7fe f8de 	bl	8002f90 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fe f8da 	bl	8002f90 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e058      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004df6:	e050      	b.n	8004e9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e04f      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d148      	bne.n	8004e9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e20:	f7fe f8b6 	bl	8002f90 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fe f8b2 	bl	8002f90 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e030      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x734>
 8004e46:	e028      	b.n	8004e9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d023      	beq.n	8004e96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_RCC_OscConfig+0x780>)
 8004e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fe f899 	bl	8002f90 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	e00c      	b.n	8004e7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e62:	f7fe f895 	bl	8002f90 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d905      	bls.n	8004e7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e013      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x7b0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ec      	bne.n	8004e62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_OscConfig+0x7b0>)
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	4905      	ldr	r1, [pc, #20]	; (8004ea4 <HAL_RCC_OscConfig+0x7b0>)
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCC_OscConfig+0x7b4>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60cb      	str	r3, [r1, #12]
 8004e94:	e001      	b.n	8004e9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	feeefffc 	.word	0xfeeefffc

08004eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0e7      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b75      	ldr	r3, [pc, #468]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d910      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b72      	ldr	r3, [pc, #456]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	4970      	ldr	r1, [pc, #448]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b6e      	ldr	r3, [pc, #440]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0cf      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	4b66      	ldr	r3, [pc, #408]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d908      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f0c:	4b63      	ldr	r3, [pc, #396]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4960      	ldr	r1, [pc, #384]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04c      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d107      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	4b5a      	ldr	r3, [pc, #360]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d121      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0a6      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4a:	4b54      	ldr	r3, [pc, #336]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d115      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e09a      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f62:	4b4e      	ldr	r3, [pc, #312]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e08e      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e086      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4943      	ldr	r1, [pc, #268]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f94:	f7fd fffc 	bl	8002f90 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fd fff8 	bl	8002f90 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e06e      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b3a      	ldr	r3, [pc, #232]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d010      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d208      	bcs.n	8004ff2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe0:	4b2e      	ldr	r3, [pc, #184]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	492b      	ldr	r1, [pc, #172]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d210      	bcs.n	8005022 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005000:	4b25      	ldr	r3, [pc, #148]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 0207 	bic.w	r2, r3, #7
 8005008:	4923      	ldr	r1, [pc, #140]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005010:	4b21      	ldr	r3, [pc, #132]	; (8005098 <HAL_RCC_ClockConfig+0x1ec>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d001      	beq.n	8005022 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e036      	b.n	8005090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4918      	ldr	r1, [pc, #96]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4910      	ldr	r1, [pc, #64]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005060:	f000 f824 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	490b      	ldr	r1, [pc, #44]	; (80050a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1f8>)
 800507e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7fd ff33 	bl	8002ef0 <HAL_InitTick>
 800508a:	4603      	mov	r3, r0
 800508c:	72fb      	strb	r3, [r7, #11]

  return status;
 800508e:	7afb      	ldrb	r3, [r7, #11]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40022000 	.word	0x40022000
 800509c:	40021000 	.word	0x40021000
 80050a0:	0800c29c 	.word	0x0800c29c
 80050a4:	20000024 	.word	0x20000024
 80050a8:	20000028 	.word	0x20000028

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c4:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x34>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d121      	bne.n	800511e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d11e      	bne.n	800511e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050ec:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e005      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d102      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005124:	4b25      	ldr	r3, [pc, #148]	; (80051bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	e004      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d101      	bne.n	8005134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005130:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d134      	bne.n	80051a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d003      	beq.n	8005152 <HAL_RCC_GetSysClockFreq+0xa6>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d003      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0xac>
 8005150:	e005      	b.n	800515e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <HAL_RCC_GetSysClockFreq+0x110>)
 8005154:	617b      	str	r3, [r7, #20]
      break;
 8005156:	e005      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800515a:	617b      	str	r3, [r7, #20]
      break;
 800515c:	e002      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	617b      	str	r3, [r7, #20]
      break;
 8005162:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	3301      	adds	r3, #1
 8005170:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	fb03 f202 	mul.w	r2, r3, r2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	0e5b      	lsrs	r3, r3, #25
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	3301      	adds	r3, #1
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051a4:	69bb      	ldr	r3, [r7, #24]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3724      	adds	r7, #36	; 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	0800c2b4 	.word	0x0800c2b4
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200

080051c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000024 	.word	0x20000024

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051e0:	f7ff fff0 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4904      	ldr	r1, [pc, #16]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40021000 	.word	0x40021000
 8005204:	0800c2ac 	.word	0x0800c2ac

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800520c:	f7ff ffda 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0adb      	lsrs	r3, r3, #11
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4904      	ldr	r1, [pc, #16]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40021000 	.word	0x40021000
 8005230:	0800c2ac 	.word	0x0800c2ac

08005234 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800524c:	f7ff f9ee 	bl	800462c <HAL_PWREx_GetVoltageRange>
 8005250:	6178      	str	r0, [r7, #20]
 8005252:	e014      	b.n	800527e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	6593      	str	r3, [r2, #88]	; 0x58
 8005260:	4b22      	ldr	r3, [pc, #136]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800526c:	f7ff f9de 	bl	800462c <HAL_PWREx_GetVoltageRange>
 8005270:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005284:	d10b      	bne.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d919      	bls.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2ba0      	cmp	r3, #160	; 0xa0
 8005290:	d902      	bls.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005292:	2302      	movs	r3, #2
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e013      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005298:	2301      	movs	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	e010      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d902      	bls.n	80052aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052a4:	2303      	movs	r3, #3
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e00a      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d102      	bne.n	80052b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052b0:	2302      	movs	r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e004      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b70      	cmp	r3, #112	; 0x70
 80052ba:	d101      	bne.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052bc:	2301      	movs	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 0207 	bic.w	r2, r3, #7
 80052c8:	4909      	ldr	r1, [pc, #36]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d001      	beq.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40022000 	.word	0x40022000

080052f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052fc:	2300      	movs	r3, #0
 80052fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005300:	2300      	movs	r3, #0
 8005302:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530c:	2b00      	cmp	r3, #0
 800530e:	d041      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005318:	d02a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800531a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800531e:	d824      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005324:	d008      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800532a:	d81e      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005334:	d010      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005336:	e018      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005338:	4b86      	ldr	r3, [pc, #536]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a85      	ldr	r2, [pc, #532]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005344:	e015      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fabb 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005356:	e00c      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3320      	adds	r3, #32
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fba6 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005368:	e003      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	74fb      	strb	r3, [r7, #19]
      break;
 800536e:	e000      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10b      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005378:	4b76      	ldr	r3, [pc, #472]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005386:	4973      	ldr	r1, [pc, #460]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800538e:	e001      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d041      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053a8:	d02a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ae:	d824      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b4:	d008      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053ba:	d81e      	bhi.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c4:	d010      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053c6:	e018      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053c8:	4b62      	ldr	r3, [pc, #392]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d4:	e015      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fa73 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053e6:	e00c      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3320      	adds	r3, #32
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb5e 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	74fb      	strb	r3, [r7, #19]
      break;
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005408:	4b52      	ldr	r3, [pc, #328]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005416:	494f      	ldr	r1, [pc, #316]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800541e:	e001      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80a0 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544c:	4b41      	ldr	r3, [pc, #260]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005450:	4a40      	ldr	r2, [pc, #256]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6593      	str	r3, [r2, #88]	; 0x58
 8005458:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005464:	2301      	movs	r3, #1
 8005466:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a3a      	ldr	r2, [pc, #232]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005474:	f7fd fd8c 	bl	8002f90 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800547a:	e009      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fd fd88 	bl	8002f90 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	74fb      	strb	r3, [r7, #19]
        break;
 800548e:	e005      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005490:	4b31      	ldr	r3, [pc, #196]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ef      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d15c      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01f      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d019      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c0:	4b24      	ldr	r3, [pc, #144]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054cc:	4b21      	ldr	r3, [pc, #132]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	4a20      	ldr	r2, [pc, #128]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054dc:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e2:	4a1c      	ldr	r2, [pc, #112]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fd fd47 	bl	8002f90 <HAL_GetTick>
 8005502:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005504:	e00b      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fd fd43 	bl	8002f90 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d902      	bls.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	74fb      	strb	r3, [r7, #19]
            break;
 800551c:	e006      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ec      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005542:	4904      	ldr	r1, [pc, #16]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800554a:	e009      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005560:	7c7b      	ldrb	r3, [r7, #17]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d105      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005566:	4b9e      	ldr	r3, [pc, #632]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	4a9d      	ldr	r2, [pc, #628]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005570:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800557e:	4b98      	ldr	r3, [pc, #608]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	f023 0203 	bic.w	r2, r3, #3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	4994      	ldr	r1, [pc, #592]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a0:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	f023 020c 	bic.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	498c      	ldr	r1, [pc, #560]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c2:	4b87      	ldr	r3, [pc, #540]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	4983      	ldr	r1, [pc, #524]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e4:	4b7e      	ldr	r3, [pc, #504]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	497b      	ldr	r1, [pc, #492]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005606:	4b76      	ldr	r3, [pc, #472]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005614:	4972      	ldr	r1, [pc, #456]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005628:	4b6d      	ldr	r3, [pc, #436]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	496a      	ldr	r1, [pc, #424]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564a:	4b65      	ldr	r3, [pc, #404]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	4961      	ldr	r1, [pc, #388]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566c:	4b5c      	ldr	r3, [pc, #368]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	4959      	ldr	r1, [pc, #356]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800568e:	4b54      	ldr	r3, [pc, #336]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	4950      	ldr	r1, [pc, #320]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b0:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	4948      	ldr	r1, [pc, #288]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d2:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e0:	493f      	ldr	r1, [pc, #252]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d028      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f4:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005702:	4937      	ldr	r1, [pc, #220]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005712:	d106      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005714:	4b32      	ldr	r3, [pc, #200]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a31      	ldr	r2, [pc, #196]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571e:	60d3      	str	r3, [r2, #12]
 8005720:	e011      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800572a:	d10c      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f8c8 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d028      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	491f      	ldr	r1, [pc, #124]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005770:	d106      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800577c:	60d3      	str	r3, [r2, #12]
 800577e:	e011      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f899 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057be:	4908      	ldr	r1, [pc, #32]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ce:	d109      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4a02      	ldr	r2, [pc, #8]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057da:	60d3      	str	r3, [r2, #12]
 80057dc:	e014      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ec:	d10c      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f867 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02f      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005814:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005822:	4928      	ldr	r1, [pc, #160]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005832:	d10d      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3304      	adds	r3, #4
 8005838:	2102      	movs	r1, #2
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f844 	bl	80058c8 <RCCEx_PLLSAI1_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	74bb      	strb	r3, [r7, #18]
 800584e:	e011      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3320      	adds	r3, #32
 800585e:	2102      	movs	r1, #2
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f925 	bl	8005ab0 <RCCEx_PLLSAI2_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005880:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	490d      	ldr	r1, [pc, #52]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b2:	4904      	ldr	r1, [pc, #16]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40021000 	.word	0x40021000

080058c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058d6:	4b75      	ldr	r3, [pc, #468]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d018      	beq.n	8005914 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0203 	and.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d10d      	bne.n	800590e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
       ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
       ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d047      	beq.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
 8005912:	e044      	b.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d018      	beq.n	800594e <RCCEx_PLLSAI1_Config+0x86>
 800591c:	2b03      	cmp	r3, #3
 800591e:	d825      	bhi.n	800596c <RCCEx_PLLSAI1_Config+0xa4>
 8005920:	2b01      	cmp	r3, #1
 8005922:	d002      	beq.n	800592a <RCCEx_PLLSAI1_Config+0x62>
 8005924:	2b02      	cmp	r3, #2
 8005926:	d009      	beq.n	800593c <RCCEx_PLLSAI1_Config+0x74>
 8005928:	e020      	b.n	800596c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592a:	4b60      	ldr	r3, [pc, #384]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11d      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593a:	e01a      	b.n	8005972 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800593c:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d116      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800594c:	e013      	b.n	8005976 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800594e:	4b57      	ldr	r3, [pc, #348]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10f      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595a:	4b54      	ldr	r3, [pc, #336]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596a:	e006      	b.n	800597a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e004      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597a:	bf00      	nop
    }

    if(status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	430b      	orrs	r3, r1
 8005998:	4944      	ldr	r1, [pc, #272]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	4313      	orrs	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d17d      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059a4:	4b41      	ldr	r3, [pc, #260]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a40      	ldr	r2, [pc, #256]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b0:	f7fd faee 	bl	8002f90 <HAL_GetTick>
 80059b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059b6:	e009      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b8:	f7fd faea 	bl	8002f90 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d902      	bls.n	80059cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	73fb      	strb	r3, [r7, #15]
        break;
 80059ca:	e005      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ef      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d160      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d111      	bne.n	8005a08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e4:	4b31      	ldr	r3, [pc, #196]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	0912      	lsrs	r2, r2, #4
 80059fc:	0452      	lsls	r2, r2, #17
 80059fe:	430a      	orrs	r2, r1
 8005a00:	492a      	ldr	r1, [pc, #168]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
 8005a06:	e027      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d112      	bne.n	8005a34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6892      	ldr	r2, [r2, #8]
 8005a1e:	0211      	lsls	r1, r2, #8
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6912      	ldr	r2, [r2, #16]
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0552      	lsls	r2, r2, #21
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	491f      	ldr	r1, [pc, #124]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	610b      	str	r3, [r1, #16]
 8005a32:	e011      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a34:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6892      	ldr	r2, [r2, #8]
 8005a44:	0211      	lsls	r1, r2, #8
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6952      	ldr	r2, [r2, #20]
 8005a4a:	0852      	lsrs	r2, r2, #1
 8005a4c:	3a01      	subs	r2, #1
 8005a4e:	0652      	lsls	r2, r2, #25
 8005a50:	430a      	orrs	r2, r1
 8005a52:	4916      	ldr	r1, [pc, #88]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fd fa94 	bl	8002f90 <HAL_GetTick>
 8005a68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a6a:	e009      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a6c:	f7fd fa90 	bl	8002f90 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d902      	bls.n	8005a80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a7e:	e005      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0ef      	beq.n	8005a6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	4904      	ldr	r1, [pc, #16]	; (8005aac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000

08005ab0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005abe:	4b6a      	ldr	r3, [pc, #424]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d018      	beq.n	8005afc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aca:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0203 	and.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d10d      	bne.n	8005af6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ae2:	4b61      	ldr	r3, [pc, #388]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
       ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d047      	beq.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	e044      	b.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d018      	beq.n	8005b36 <RCCEx_PLLSAI2_Config+0x86>
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d825      	bhi.n	8005b54 <RCCEx_PLLSAI2_Config+0xa4>
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d002      	beq.n	8005b12 <RCCEx_PLLSAI2_Config+0x62>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d009      	beq.n	8005b24 <RCCEx_PLLSAI2_Config+0x74>
 8005b10:	e020      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b12:	4b55      	ldr	r3, [pc, #340]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11d      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b22:	e01a      	b.n	8005b5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b24:	4b50      	ldr	r3, [pc, #320]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d116      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b34:	e013      	b.n	8005b5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b42:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b52:	e006      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e004      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6819      	ldr	r1, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	4939      	ldr	r1, [pc, #228]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d167      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b8c:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a35      	ldr	r2, [pc, #212]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b98:	f7fd f9fa 	bl	8002f90 <HAL_GetTick>
 8005b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b9e:	e009      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba0:	f7fd f9f6 	bl	8002f90 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d902      	bls.n	8005bb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb2:	e005      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ef      	bne.n	8005ba0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d14a      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6892      	ldr	r2, [r2, #8]
 8005bdc:	0211      	lsls	r1, r2, #8
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	0912      	lsrs	r2, r2, #4
 8005be4:	0452      	lsls	r2, r2, #17
 8005be6:	430a      	orrs	r2, r1
 8005be8:	491f      	ldr	r1, [pc, #124]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	614b      	str	r3, [r1, #20]
 8005bee:	e011      	b.n	8005c14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6892      	ldr	r2, [r2, #8]
 8005c00:	0211      	lsls	r1, r2, #8
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6912      	ldr	r2, [r2, #16]
 8005c06:	0852      	lsrs	r2, r2, #1
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	0652      	lsls	r2, r2, #25
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	4916      	ldr	r1, [pc, #88]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c14:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fd f9b6 	bl	8002f90 <HAL_GetTick>
 8005c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c26:	e009      	b.n	8005c3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c28:	f7fd f9b2 	bl	8002f90 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3a:	e005      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ef      	beq.n	8005c28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4904      	ldr	r1, [pc, #16]	; (8005c68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e049      	b.n	8005d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc fcbc 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f000 ff1a 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e049      	b.n	8005dc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f841 	bl	8005dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fec3 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start+0x24>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e03c      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d109      	bne.n	8005e1a <HAL_TIM_PWM_Start+0x3e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e02f      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x58>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e022      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x72>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e015      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x8c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_PWM_Start+0x9e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e09c      	b.n	8005fbc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xb6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e90:	e023      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xc6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea0:	e01b      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xd6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb0:	e013      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0xe6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec0:	e00b      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0xf6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed0:	e003      	b.n	8005eda <HAL_TIM_PWM_Start+0xfe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fb2c 	bl	8007540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a35      	ldr	r2, [pc, #212]	; (8005fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a34      	ldr	r2, [pc, #208]	; (8005fc8 <HAL_TIM_PWM_Start+0x1ec>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a32      	ldr	r2, [pc, #200]	; (8005fcc <HAL_TIM_PWM_Start+0x1f0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a31      	ldr	r2, [pc, #196]	; (8005fd0 <HAL_TIM_PWM_Start+0x1f4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x13e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2f      	ldr	r2, [pc, #188]	; (8005fd4 <HAL_TIM_PWM_Start+0x1f8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x142>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_PWM_Start+0x144>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01d      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d018      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_TIM_PWM_Start+0x1fc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_TIM_PWM_Start+0x200>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_TIM_PWM_Start+0x204>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <HAL_TIM_PWM_Start+0x1ec>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_TIM_PWM_Start+0x19e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <HAL_TIM_PWM_Start+0x1f0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d115      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <HAL_TIM_PWM_Start+0x208>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b06      	cmp	r3, #6
 8005f8a:	d015      	beq.n	8005fb8 <HAL_TIM_PWM_Start+0x1dc>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f92:	d011      	beq.n	8005fb8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa4:	e008      	b.n	8005fb8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e000      	b.n	8005fba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	00010007 	.word	0x00010007

08005fe8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e049      	b.n	800608e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f841 	bl	8006096 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f000 fd5c 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e097      	b.n	80061ee <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fc fa50 	bl	8002578 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80060ee:	f023 0307 	bic.w	r3, r3, #7
 80060f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fcf0 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	4313      	orrs	r3, r2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800614a:	f023 030c 	bic.w	r3, r3, #12
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	4313      	orrs	r3, r2
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	011a      	lsls	r2, r3, #4
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	4313      	orrs	r3, r2
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006188:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006190:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4313      	orrs	r3, r2
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800620e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006216:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800621e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d110      	bne.n	8006248 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800622c:	7b7b      	ldrb	r3, [r7, #13]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e069      	b.n	800630a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006246:	e031      	b.n	80062ac <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d110      	bne.n	8006270 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d102      	bne.n	800625a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006254:	7b3b      	ldrb	r3, [r7, #12]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d001      	beq.n	800625e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e055      	b.n	800630a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626e:	e01d      	b.n	80062ac <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d108      	bne.n	8006288 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d105      	bne.n	8006288 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800627c:	7b7b      	ldrb	r3, [r7, #13]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d102      	bne.n	8006288 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006282:	7b3b      	ldrb	r3, [r7, #12]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e03e      	b.n	800630a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_Encoder_Start+0xc4>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d008      	beq.n	80062ca <HAL_TIM_Encoder_Start+0xd4>
 80062b8:	e00f      	b.n	80062da <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f93c 	bl	8007540 <TIM_CCxChannelCmd>
      break;
 80062c8:	e016      	b.n	80062f8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	2104      	movs	r1, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f934 	bl	8007540 <TIM_CCxChannelCmd>
      break;
 80062d8:	e00e      	b.n	80062f8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 f92c 	bl	8007540 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2201      	movs	r2, #1
 80062ee:	2104      	movs	r1, #4
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f925 	bl	8007540 <TIM_CCxChannelCmd>
      break;
 80062f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01b      	beq.n	8006376 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f06f 0202 	mvn.w	r2, #2
 8006346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fa ff9b 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006362:	e005      	b.n	8006370 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fb9f 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fba6 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01b      	beq.n	80063c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f06f 0204 	mvn.w	r2, #4
 8006392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fa ff75 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80063ae:	e005      	b.n	80063bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fb79 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fb80 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0208 	mvn.w	r2, #8
 80063de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2204      	movs	r2, #4
 80063e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fa ff4f 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80063fa:	e005      	b.n	8006408 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fb53 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fb5a 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d020      	beq.n	800645a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0210 	mvn.w	r2, #16
 800642a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2208      	movs	r2, #8
 8006430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fa ff29 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006446:	e005      	b.n	8006454 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb2d 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb34 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f06f 0201 	mvn.w	r2, #1
 8006476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb0b 	bl	8006a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f907 	bl	80076b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f8ff 	bl	80076c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 faf3 	bl	8006ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f06f 0220 	mvn.w	r2, #32
 8006506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 f8c7 	bl	800769c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b086      	sub	sp, #24
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006530:	2302      	movs	r3, #2
 8006532:	e088      	b.n	8006646 <HAL_TIM_IC_ConfigChannel+0x130>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11b      	bne.n	800657a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006552:	f000 fe37 	bl	80071c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 020c 	bic.w	r2, r2, #12
 8006564:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6999      	ldr	r1, [r3, #24]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	619a      	str	r2, [r3, #24]
 8006578:	e060      	b.n	800663c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11c      	bne.n	80065ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006590:	f000 feb5 	bl	80072fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	619a      	str	r2, [r3, #24]
 80065b8:	e040      	b.n	800663c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80065d0:	f000 ff02 	bl	80073d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020c 	bic.w	r2, r2, #12
 80065e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69d9      	ldr	r1, [r3, #28]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	61da      	str	r2, [r3, #28]
 80065f6:	e021      	b.n	800663c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d11c      	bne.n	8006638 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800660e:	f000 ff1f 	bl	8007450 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006620:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69d9      	ldr	r1, [r3, #28]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	021a      	lsls	r2, r3, #8
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	61da      	str	r2, [r3, #28]
 8006636:	e001      	b.n	800663c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ff      	b.n	800686e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b14      	cmp	r3, #20
 800667a:	f200 80f0 	bhi.w	800685e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800667e:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066d9 	.word	0x080066d9
 8006688:	0800685f 	.word	0x0800685f
 800668c:	0800685f 	.word	0x0800685f
 8006690:	0800685f 	.word	0x0800685f
 8006694:	08006719 	.word	0x08006719
 8006698:	0800685f 	.word	0x0800685f
 800669c:	0800685f 	.word	0x0800685f
 80066a0:	0800685f 	.word	0x0800685f
 80066a4:	0800675b 	.word	0x0800675b
 80066a8:	0800685f 	.word	0x0800685f
 80066ac:	0800685f 	.word	0x0800685f
 80066b0:	0800685f 	.word	0x0800685f
 80066b4:	0800679b 	.word	0x0800679b
 80066b8:	0800685f 	.word	0x0800685f
 80066bc:	0800685f 	.word	0x0800685f
 80066c0:	0800685f 	.word	0x0800685f
 80066c4:	080067dd 	.word	0x080067dd
 80066c8:	0800685f 	.word	0x0800685f
 80066cc:	0800685f 	.word	0x0800685f
 80066d0:	0800685f 	.word	0x0800685f
 80066d4:	0800681d 	.word	0x0800681d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa9a 	bl	8006c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e0a5      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fb0a 	bl	8006d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e084      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb73 	bl	8006e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e064      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbdb 	bl	8006f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e043      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fc24 	bl	8007030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800681a:	e023      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fc68 	bl	80070f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800685c:	e002      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0b6      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x18a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	d03e      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0xd8>
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d6:	f200 8087 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	f000 8086 	beq.w	80069ee <HAL_TIM_ConfigClockSource+0x176>
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e6:	d87f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d01a      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0xaa>
 80068ec:	2b70      	cmp	r3, #112	; 0x70
 80068ee:	d87b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d050      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x11e>
 80068f4:	2b60      	cmp	r3, #96	; 0x60
 80068f6:	d877      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d03c      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xfe>
 80068fc:	2b50      	cmp	r3, #80	; 0x50
 80068fe:	d873      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d058      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x13e>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d86f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d064      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d86b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d060      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d867      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d05a      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006920:	e062      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006932:	f000 fde5 	bl	8007500 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	609a      	str	r2, [r3, #8]
      break;
 800694e:	e04f      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	f000 fdce 	bl	8007500 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006972:	609a      	str	r2, [r3, #8]
      break;
 8006974:	e03c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	461a      	mov	r2, r3
 8006984:	f000 fc8c 	bl	80072a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2150      	movs	r1, #80	; 0x50
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fd9b 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006994:	e02c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fce8 	bl	8007378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2160      	movs	r1, #96	; 0x60
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fd8b 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 80069b4:	e01c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 fc6c 	bl	80072a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2140      	movs	r1, #64	; 0x40
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd7b 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f000 fd72 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e000      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d831      	bhi.n	8006a84 <HAL_TIM_ReadCapturedValue+0x78>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006a7b 	.word	0x08006a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	60fb      	str	r3, [r7, #12]

      break;
 8006a64:	e00f      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	60fb      	str	r3, [r7, #12]

      break;
 8006a6e:	e00a      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	60fb      	str	r3, [r7, #12]

      break;
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	60fb      	str	r3, [r7, #12]

      break;
 8006a82:	e000      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a84:	bf00      	nop
  }

  return tmpreg;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01f      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d01b      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d017      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800

08006c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f023 0201 	bic.w	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f023 0302 	bic.w	r3, r3, #2
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2c      	ldr	r2, [pc, #176]	; (8006d24 <TIM_OC1_SetConfig+0x10c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2b      	ldr	r2, [pc, #172]	; (8006d28 <TIM_OC1_SetConfig+0x110>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2a      	ldr	r2, [pc, #168]	; (8006d2c <TIM_OC1_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <TIM_OC1_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <TIM_OC1_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d10c      	bne.n	8006cb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0308 	bic.w	r3, r3, #8
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 0304 	bic.w	r3, r3, #4
 8006cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <TIM_OC1_SetConfig+0x10c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <TIM_OC1_SetConfig+0x110>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <TIM_OC1_SetConfig+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <TIM_OC1_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC1_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d111      	bne.n	8006cfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	621a      	str	r2, [r3, #32]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40013400 	.word	0x40013400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800

08006d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	f023 0210 	bic.w	r2, r3, #16
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0320 	bic.w	r3, r3, #32
 8006d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <TIM_OC2_SetConfig+0x100>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC2_SetConfig+0x6c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <TIM_OC2_SetConfig+0x104>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10d      	bne.n	8006dc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <TIM_OC2_SetConfig+0x100>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00f      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_OC2_SetConfig+0x104>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <TIM_OC2_SetConfig+0x108>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a1a      	ldr	r2, [pc, #104]	; (8006e44 <TIM_OC2_SetConfig+0x10c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <TIM_OC2_SetConfig+0x110>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d113      	bne.n	8006e10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <TIM_OC3_SetConfig+0xfc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC3_SetConfig+0x6a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <TIM_OC3_SetConfig+0x100>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d10d      	bne.n	8006ed2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <TIM_OC3_SetConfig+0xfc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <TIM_OC3_SetConfig+0x100>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <TIM_OC3_SetConfig+0x104>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <TIM_OC3_SetConfig+0x108>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d113      	bne.n	8006f22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800

08006f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <TIM_OC4_SetConfig+0xc0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <TIM_OC4_SetConfig+0xc4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <TIM_OC4_SetConfig+0xc8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <TIM_OC4_SetConfig+0xcc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a14      	ldr	r2, [pc, #80]	; (800702c <TIM_OC4_SetConfig+0xd0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	019b      	lsls	r3, r3, #6
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40013400 	.word	0x40013400
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800

08007030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <TIM_OC5_SetConfig+0xb4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <TIM_OC5_SetConfig+0xb8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC5_SetConfig+0xbc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC5_SetConfig+0xc0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <TIM_OC5_SetConfig+0xc4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d109      	bne.n	80070be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40013400 	.word	0x40013400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800

080070f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_OC6_SetConfig+0xb8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00f      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <TIM_OC6_SetConfig+0xbc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <TIM_OC6_SetConfig+0xc0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC6_SetConfig+0xc4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <TIM_OC6_SetConfig+0xc8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d109      	bne.n	8007188 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f023 0201 	bic.w	r2, r3, #1
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a26      	ldr	r2, [pc, #152]	; (8007288 <TIM_TI1_SetConfig+0xc4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d017      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f8:	d013      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a23      	ldr	r2, [pc, #140]	; (800728c <TIM_TI1_SetConfig+0xc8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00f      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <TIM_TI1_SetConfig+0xcc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00b      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a21      	ldr	r2, [pc, #132]	; (8007294 <TIM_TI1_SetConfig+0xd0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d007      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a20      	ldr	r2, [pc, #128]	; (8007298 <TIM_TI1_SetConfig+0xd4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_TI1_SetConfig+0x5e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <TIM_TI1_SetConfig+0xd8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <TIM_TI1_SetConfig+0x62>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <TIM_TI1_SetConfig+0x64>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e003      	b.n	8007246 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800724c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	b2db      	uxtb	r3, r3
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f023 030a 	bic.w	r3, r3, #10
 8007260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f003 030a 	and.w	r3, r3, #10
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800
 8007294:	40000c00 	.word	0x40000c00
 8007298:	40013400 	.word	0x40013400
 800729c:	40014000 	.word	0x40014000

080072a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 030a 	bic.w	r3, r3, #10
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f023 0210 	bic.w	r2, r3, #16
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800733c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	b29b      	uxth	r3, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007350:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	621a      	str	r2, [r3, #32]
}
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0210 	bic.w	r2, r3, #16
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	031b      	lsls	r3, r3, #12
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007414:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	b2db      	uxtb	r3, r3
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007428:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800748e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	031b      	lsls	r3, r3, #12
 8007494:	b29b      	uxth	r3, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	031b      	lsls	r3, r3, #12
 80074a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f043 0307 	orr.w	r3, r3, #7
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	609a      	str	r2, [r3, #8]
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	021a      	lsls	r2, r3, #8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	431a      	orrs	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4313      	orrs	r3, r2
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	609a      	str	r2, [r3, #8]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	2201      	movs	r2, #1
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a1a      	ldr	r2, [r3, #32]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	43db      	mvns	r3, r3
 8007562:	401a      	ands	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	fa01 f303 	lsl.w	r3, r1, r3
 8007578:	431a      	orrs	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e068      	b.n	8007676 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2e      	ldr	r2, [pc, #184]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a2d      	ldr	r2, [pc, #180]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d108      	bne.n	80075ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d018      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1b      	ldr	r2, [pc, #108]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1a      	ldr	r2, [pc, #104]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a18      	ldr	r2, [pc, #96]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a13      	ldr	r2, [pc, #76]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a14      	ldr	r2, [pc, #80]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d10c      	bne.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4313      	orrs	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40014000 	.word	0x40014000

0800769c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e040      	b.n	800776c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fb f8aa 	bl	8002854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2224      	movs	r2, #36	; 0x24
 8007704:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0201 	bic.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 ff50 	bl	80085c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc95 	bl	8008054 <UART_SetConfig>
 800772a:	4603      	mov	r3, r0
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e01b      	b.n	800776c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 ffcf 	bl	8008708 <UART_CheckIdleState>
 800776a:	4603      	mov	r3, r0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007788:	2b20      	cmp	r3, #32
 800778a:	d178      	bne.n	800787e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_UART_Transmit+0x24>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e071      	b.n	8007880 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2221      	movs	r2, #33	; 0x21
 80077a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077aa:	f7fb fbf1 	bl	8002f90 <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d108      	bne.n	80077dc <HAL_UART_Transmit+0x68>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	e003      	b.n	80077e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077e4:	e030      	b.n	8007848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f001 f831 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e03c      	b.n	8007880 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	881a      	ldrh	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007818:	b292      	uxth	r2, r2
 800781a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	3302      	adds	r3, #2
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	e008      	b.n	8007836 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	781a      	ldrb	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	b292      	uxth	r2, r2
 800782e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	3301      	adds	r3, #1
 8007834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1c8      	bne.n	80077e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2200      	movs	r2, #0
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 fffa 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e005      	b.n	8007880 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789a:	2b20      	cmp	r3, #32
 800789c:	d165      	bne.n	800796a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <HAL_UART_Transmit_DMA+0x22>
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e05e      	b.n	800796c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2221      	movs	r2, #33	; 0x21
 80078d0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d027      	beq.n	800792a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	4a25      	ldr	r2, [pc, #148]	; (8007974 <HAL_UART_Transmit_DMA+0xec>)
 80078e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4a24      	ldr	r2, [pc, #144]	; (8007978 <HAL_UART_Transmit_DMA+0xf0>)
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	4a23      	ldr	r2, [pc, #140]	; (800797c <HAL_UART_Transmit_DMA+0xf4>)
 80078f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f6:	2200      	movs	r2, #0
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007902:	4619      	mov	r1, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3328      	adds	r3, #40	; 0x28
 800790a:	461a      	mov	r2, r3
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	f7fb fd39 	bl	8003384 <HAL_DMA_Start_IT>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2210      	movs	r2, #16
 800791c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e020      	b.n	800796c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	613b      	str	r3, [r7, #16]
   return(result);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	623a      	str	r2, [r7, #32]
 8007954:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	69f9      	ldr	r1, [r7, #28]
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e5      	bne.n	8007932 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e000      	b.n	800796c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3728      	adds	r7, #40	; 0x28
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	08008b7d 	.word	0x08008b7d
 8007978:	08008c17 	.word	0x08008c17
 800797c:	08008d9d 	.word	0x08008d9d

08007980 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007994:	2b20      	cmp	r3, #32
 8007996:	d137      	bne.n	8007a08 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_UART_Receive_DMA+0x24>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e030      	b.n	8007a0a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <HAL_UART_Receive_DMA+0x94>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01f      	beq.n	80079f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d018      	beq.n	80079f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	613b      	str	r3, [r7, #16]
   return(result);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	623b      	str	r3, [r7, #32]
 80079e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	69f9      	ldr	r1, [r7, #28]
 80079ea:	6a3a      	ldr	r2, [r7, #32]
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e6      	bne.n	80079c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	461a      	mov	r2, r3
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 ff92 	bl	8008928 <UART_Start_Receive_DMA>
 8007a04:	4603      	mov	r3, r0
 8007a06:	e000      	b.n	8007a0a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40008000 	.word	0x40008000

08007a18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b0ba      	sub	sp, #232	; 0xe8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a46:	4013      	ands	r3, r2
 8007a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d115      	bne.n	8007a80 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00f      	beq.n	8007a80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 82ae 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
      }
      return;
 8007a7e:	e2a8      	b.n	8007fd2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8117 	beq.w	8007cb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a9a:	4b85      	ldr	r3, [pc, #532]	; (8007cb0 <HAL_UART_IRQHandler+0x298>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 810a 	beq.w	8007cb8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d011      	beq.n	8007ad4 <HAL_UART_IRQHandler+0xbc>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aca:	f043 0201 	orr.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d011      	beq.n	8007b04 <HAL_UART_IRQHandler+0xec>
 8007ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2202      	movs	r2, #2
 8007af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afa:	f043 0204 	orr.w	r2, r3, #4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d011      	beq.n	8007b34 <HAL_UART_IRQHandler+0x11c>
 8007b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2204      	movs	r2, #4
 8007b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2a:	f043 0202 	orr.w	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d017      	beq.n	8007b70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b66:	f043 0208 	orr.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d012      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x18a>
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00c      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8214 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d005      	beq.n	8007bfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d04f      	beq.n	8007c9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 ff5a 	bl	8008ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d141      	bne.n	8007c92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1d9      	bne.n	8007c0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d013      	beq.n	8007c8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c66:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <HAL_UART_IRQHandler+0x29c>)
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fb fc26 	bl	80034c0 <HAL_DMA_Abort_IT>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d017      	beq.n	8007caa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	e00f      	b.n	8007caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9cc 	bl	8008028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	e00b      	b.n	8007caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9c8 	bl	8008028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	e007      	b.n	8007caa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9c4 	bl	8008028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007ca8:	e195      	b.n	8007fd6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007caa:	bf00      	nop
    return;
 8007cac:	e193      	b.n	8007fd6 <HAL_UART_IRQHandler+0x5be>
 8007cae:	bf00      	nop
 8007cb0:	04000120 	.word	0x04000120
 8007cb4:	08008e1b 	.word	0x08008e1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	f040 814e 	bne.w	8007f5e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8147 	beq.w	8007f5e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8140 	beq.w	8007f5e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	f040 80b8 	bne.w	8007e66 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 8167 	beq.w	8007fda <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f080 815f 	bcs.w	8007fda <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 8086 	bne.w	8007e44 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1da      	bne.n	8007d38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007da6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007daa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e1      	bne.n	8007d82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e3      	bne.n	8007dbe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e4      	bne.n	8007e04 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fb fb00 	bl	8003444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8ec 	bl	800803c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e64:	e0b9      	b.n	8007fda <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80ab 	beq.w	8007fde <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80a6 	beq.w	8007fde <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e4      	bne.n	8007e92 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eec:	633a      	str	r2, [r7, #48]	; 0x30
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e3      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	69b9      	ldr	r1, [r7, #24]
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	617b      	str	r3, [r7, #20]
   return(result);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e4      	bne.n	8007f14 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f870 	bl	800803c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f5c:	e03f      	b.n	8007fde <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00e      	beq.n	8007f88 <HAL_UART_IRQHandler+0x570>
 8007f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 ff8a 	bl	8008e9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f86:	e02d      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00e      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01c      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
    }
    return;
 8007fb0:	e017      	b.n	8007fe2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d012      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
 8007fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00c      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 ff3b 	bl	8008e46 <UART_EndTransmit_IT>
    return;
 8007fd0:	e008      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e006      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007fe2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007fe4:	37e8      	adds	r7, #232	; 0xe8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008058:	b08a      	sub	sp, #40	; 0x28
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	431a      	orrs	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4313      	orrs	r3, r2
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4ba4      	ldr	r3, [pc, #656]	; (8008314 <UART_SetConfig+0x2c0>)
 8008084:	4013      	ands	r3, r2
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800808c:	430b      	orrs	r3, r1
 800808e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a99      	ldr	r2, [pc, #612]	; (8008318 <UART_SetConfig+0x2c4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	4313      	orrs	r3, r2
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d0:	430a      	orrs	r2, r1
 80080d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a90      	ldr	r2, [pc, #576]	; (800831c <UART_SetConfig+0x2c8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d126      	bne.n	800812c <UART_SetConfig+0xd8>
 80080de:	4b90      	ldr	r3, [pc, #576]	; (8008320 <UART_SetConfig+0x2cc>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d81b      	bhi.n	8008124 <UART_SetConfig+0xd0>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0xa0>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	08008115 	.word	0x08008115
 80080fc:	0800810d 	.word	0x0800810d
 8008100:	0800811d 	.word	0x0800811d
 8008104:	2301      	movs	r3, #1
 8008106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810a:	e116      	b.n	800833a <UART_SetConfig+0x2e6>
 800810c:	2302      	movs	r3, #2
 800810e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008112:	e112      	b.n	800833a <UART_SetConfig+0x2e6>
 8008114:	2304      	movs	r3, #4
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811a:	e10e      	b.n	800833a <UART_SetConfig+0x2e6>
 800811c:	2308      	movs	r3, #8
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008122:	e10a      	b.n	800833a <UART_SetConfig+0x2e6>
 8008124:	2310      	movs	r3, #16
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812a:	e106      	b.n	800833a <UART_SetConfig+0x2e6>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a7c      	ldr	r2, [pc, #496]	; (8008324 <UART_SetConfig+0x2d0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d138      	bne.n	80081a8 <UART_SetConfig+0x154>
 8008136:	4b7a      	ldr	r3, [pc, #488]	; (8008320 <UART_SetConfig+0x2cc>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	f003 030c 	and.w	r3, r3, #12
 8008140:	2b0c      	cmp	r3, #12
 8008142:	d82d      	bhi.n	80081a0 <UART_SetConfig+0x14c>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0xf8>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	08008181 	.word	0x08008181
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081a1 	.word	0x080081a1
 800815c:	08008191 	.word	0x08008191
 8008160:	080081a1 	.word	0x080081a1
 8008164:	080081a1 	.word	0x080081a1
 8008168:	080081a1 	.word	0x080081a1
 800816c:	08008189 	.word	0x08008189
 8008170:	080081a1 	.word	0x080081a1
 8008174:	080081a1 	.word	0x080081a1
 8008178:	080081a1 	.word	0x080081a1
 800817c:	08008199 	.word	0x08008199
 8008180:	2300      	movs	r3, #0
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008186:	e0d8      	b.n	800833a <UART_SetConfig+0x2e6>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e0d4      	b.n	800833a <UART_SetConfig+0x2e6>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008196:	e0d0      	b.n	800833a <UART_SetConfig+0x2e6>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e0cc      	b.n	800833a <UART_SetConfig+0x2e6>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a6:	e0c8      	b.n	800833a <UART_SetConfig+0x2e6>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a5e      	ldr	r2, [pc, #376]	; (8008328 <UART_SetConfig+0x2d4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d125      	bne.n	80081fe <UART_SetConfig+0x1aa>
 80081b2:	4b5b      	ldr	r3, [pc, #364]	; (8008320 <UART_SetConfig+0x2cc>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081bc:	2b30      	cmp	r3, #48	; 0x30
 80081be:	d016      	beq.n	80081ee <UART_SetConfig+0x19a>
 80081c0:	2b30      	cmp	r3, #48	; 0x30
 80081c2:	d818      	bhi.n	80081f6 <UART_SetConfig+0x1a2>
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d00a      	beq.n	80081de <UART_SetConfig+0x18a>
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d814      	bhi.n	80081f6 <UART_SetConfig+0x1a2>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <UART_SetConfig+0x182>
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d008      	beq.n	80081e6 <UART_SetConfig+0x192>
 80081d4:	e00f      	b.n	80081f6 <UART_SetConfig+0x1a2>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081dc:	e0ad      	b.n	800833a <UART_SetConfig+0x2e6>
 80081de:	2302      	movs	r3, #2
 80081e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081e4:	e0a9      	b.n	800833a <UART_SetConfig+0x2e6>
 80081e6:	2304      	movs	r3, #4
 80081e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ec:	e0a5      	b.n	800833a <UART_SetConfig+0x2e6>
 80081ee:	2308      	movs	r3, #8
 80081f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f4:	e0a1      	b.n	800833a <UART_SetConfig+0x2e6>
 80081f6:	2310      	movs	r3, #16
 80081f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fc:	e09d      	b.n	800833a <UART_SetConfig+0x2e6>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a4a      	ldr	r2, [pc, #296]	; (800832c <UART_SetConfig+0x2d8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d125      	bne.n	8008254 <UART_SetConfig+0x200>
 8008208:	4b45      	ldr	r3, [pc, #276]	; (8008320 <UART_SetConfig+0x2cc>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008212:	2bc0      	cmp	r3, #192	; 0xc0
 8008214:	d016      	beq.n	8008244 <UART_SetConfig+0x1f0>
 8008216:	2bc0      	cmp	r3, #192	; 0xc0
 8008218:	d818      	bhi.n	800824c <UART_SetConfig+0x1f8>
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d00a      	beq.n	8008234 <UART_SetConfig+0x1e0>
 800821e:	2b80      	cmp	r3, #128	; 0x80
 8008220:	d814      	bhi.n	800824c <UART_SetConfig+0x1f8>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <UART_SetConfig+0x1d8>
 8008226:	2b40      	cmp	r3, #64	; 0x40
 8008228:	d008      	beq.n	800823c <UART_SetConfig+0x1e8>
 800822a:	e00f      	b.n	800824c <UART_SetConfig+0x1f8>
 800822c:	2300      	movs	r3, #0
 800822e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008232:	e082      	b.n	800833a <UART_SetConfig+0x2e6>
 8008234:	2302      	movs	r3, #2
 8008236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800823a:	e07e      	b.n	800833a <UART_SetConfig+0x2e6>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008242:	e07a      	b.n	800833a <UART_SetConfig+0x2e6>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800824a:	e076      	b.n	800833a <UART_SetConfig+0x2e6>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008252:	e072      	b.n	800833a <UART_SetConfig+0x2e6>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a35      	ldr	r2, [pc, #212]	; (8008330 <UART_SetConfig+0x2dc>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d12a      	bne.n	80082b4 <UART_SetConfig+0x260>
 800825e:	4b30      	ldr	r3, [pc, #192]	; (8008320 <UART_SetConfig+0x2cc>)
 8008260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800826c:	d01a      	beq.n	80082a4 <UART_SetConfig+0x250>
 800826e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008272:	d81b      	bhi.n	80082ac <UART_SetConfig+0x258>
 8008274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008278:	d00c      	beq.n	8008294 <UART_SetConfig+0x240>
 800827a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827e:	d815      	bhi.n	80082ac <UART_SetConfig+0x258>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <UART_SetConfig+0x238>
 8008284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008288:	d008      	beq.n	800829c <UART_SetConfig+0x248>
 800828a:	e00f      	b.n	80082ac <UART_SetConfig+0x258>
 800828c:	2300      	movs	r3, #0
 800828e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008292:	e052      	b.n	800833a <UART_SetConfig+0x2e6>
 8008294:	2302      	movs	r3, #2
 8008296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800829a:	e04e      	b.n	800833a <UART_SetConfig+0x2e6>
 800829c:	2304      	movs	r3, #4
 800829e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082a2:	e04a      	b.n	800833a <UART_SetConfig+0x2e6>
 80082a4:	2308      	movs	r3, #8
 80082a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082aa:	e046      	b.n	800833a <UART_SetConfig+0x2e6>
 80082ac:	2310      	movs	r3, #16
 80082ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082b2:	e042      	b.n	800833a <UART_SetConfig+0x2e6>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <UART_SetConfig+0x2c4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d13a      	bne.n	8008334 <UART_SetConfig+0x2e0>
 80082be:	4b18      	ldr	r3, [pc, #96]	; (8008320 <UART_SetConfig+0x2cc>)
 80082c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082cc:	d01a      	beq.n	8008304 <UART_SetConfig+0x2b0>
 80082ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082d2:	d81b      	bhi.n	800830c <UART_SetConfig+0x2b8>
 80082d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d8:	d00c      	beq.n	80082f4 <UART_SetConfig+0x2a0>
 80082da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082de:	d815      	bhi.n	800830c <UART_SetConfig+0x2b8>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <UART_SetConfig+0x298>
 80082e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e8:	d008      	beq.n	80082fc <UART_SetConfig+0x2a8>
 80082ea:	e00f      	b.n	800830c <UART_SetConfig+0x2b8>
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082f2:	e022      	b.n	800833a <UART_SetConfig+0x2e6>
 80082f4:	2302      	movs	r3, #2
 80082f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082fa:	e01e      	b.n	800833a <UART_SetConfig+0x2e6>
 80082fc:	2304      	movs	r3, #4
 80082fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008302:	e01a      	b.n	800833a <UART_SetConfig+0x2e6>
 8008304:	2308      	movs	r3, #8
 8008306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800830a:	e016      	b.n	800833a <UART_SetConfig+0x2e6>
 800830c:	2310      	movs	r3, #16
 800830e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008312:	e012      	b.n	800833a <UART_SetConfig+0x2e6>
 8008314:	efff69f3 	.word	0xefff69f3
 8008318:	40008000 	.word	0x40008000
 800831c:	40013800 	.word	0x40013800
 8008320:	40021000 	.word	0x40021000
 8008324:	40004400 	.word	0x40004400
 8008328:	40004800 	.word	0x40004800
 800832c:	40004c00 	.word	0x40004c00
 8008330:	40005000 	.word	0x40005000
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a9f      	ldr	r2, [pc, #636]	; (80085bc <UART_SetConfig+0x568>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d17a      	bne.n	800843a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008348:	2b08      	cmp	r3, #8
 800834a:	d824      	bhi.n	8008396 <UART_SetConfig+0x342>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <UART_SetConfig+0x300>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008379 	.word	0x08008379
 8008358:	08008397 	.word	0x08008397
 800835c:	08008381 	.word	0x08008381
 8008360:	08008397 	.word	0x08008397
 8008364:	08008387 	.word	0x08008387
 8008368:	08008397 	.word	0x08008397
 800836c:	08008397 	.word	0x08008397
 8008370:	08008397 	.word	0x08008397
 8008374:	0800838f 	.word	0x0800838f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008378:	f7fc ff30 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 800837c:	61f8      	str	r0, [r7, #28]
        break;
 800837e:	e010      	b.n	80083a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008380:	4b8f      	ldr	r3, [pc, #572]	; (80085c0 <UART_SetConfig+0x56c>)
 8008382:	61fb      	str	r3, [r7, #28]
        break;
 8008384:	e00d      	b.n	80083a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008386:	f7fc fe91 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800838a:	61f8      	str	r0, [r7, #28]
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	61fb      	str	r3, [r7, #28]
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80fb 	beq.w	80085a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d305      	bcc.n	80083c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d903      	bls.n	80083ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083cc:	e0e8      	b.n	80085a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2200      	movs	r2, #0
 80083d2:	461c      	mov	r4, r3
 80083d4:	4615      	mov	r5, r2
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	022b      	lsls	r3, r5, #8
 80083e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80083e4:	0222      	lsls	r2, r4, #8
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	6849      	ldr	r1, [r1, #4]
 80083ea:	0849      	lsrs	r1, r1, #1
 80083ec:	2000      	movs	r0, #0
 80083ee:	4688      	mov	r8, r1
 80083f0:	4681      	mov	r9, r0
 80083f2:	eb12 0a08 	adds.w	sl, r2, r8
 80083f6:	eb43 0b09 	adc.w	fp, r3, r9
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 fbcc 	bl	8000ba8 <__aeabi_uldivmod>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4613      	mov	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841e:	d308      	bcc.n	8008432 <UART_SetConfig+0x3de>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008426:	d204      	bcs.n	8008432 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	60da      	str	r2, [r3, #12]
 8008430:	e0b6      	b.n	80085a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008438:	e0b2      	b.n	80085a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008442:	d15e      	bne.n	8008502 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008448:	2b08      	cmp	r3, #8
 800844a:	d828      	bhi.n	800849e <UART_SetConfig+0x44a>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0x400>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008479 	.word	0x08008479
 8008458:	08008481 	.word	0x08008481
 800845c:	08008489 	.word	0x08008489
 8008460:	0800849f 	.word	0x0800849f
 8008464:	0800848f 	.word	0x0800848f
 8008468:	0800849f 	.word	0x0800849f
 800846c:	0800849f 	.word	0x0800849f
 8008470:	0800849f 	.word	0x0800849f
 8008474:	08008497 	.word	0x08008497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008478:	f7fc feb0 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 800847c:	61f8      	str	r0, [r7, #28]
        break;
 800847e:	e014      	b.n	80084aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008480:	f7fc fec2 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8008484:	61f8      	str	r0, [r7, #28]
        break;
 8008486:	e010      	b.n	80084aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008488:	4b4d      	ldr	r3, [pc, #308]	; (80085c0 <UART_SetConfig+0x56c>)
 800848a:	61fb      	str	r3, [r7, #28]
        break;
 800848c:	e00d      	b.n	80084aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800848e:	f7fc fe0d 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8008492:	61f8      	str	r0, [r7, #28]
        break;
 8008494:	e009      	b.n	80084aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800849a:	61fb      	str	r3, [r7, #28]
        break;
 800849c:	e005      	b.n	80084aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80084a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d077      	beq.n	80085a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	005a      	lsls	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	441a      	add	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b0f      	cmp	r3, #15
 80084ca:	d916      	bls.n	80084fa <UART_SetConfig+0x4a6>
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d2:	d212      	bcs.n	80084fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f023 030f 	bic.w	r3, r3, #15
 80084dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	8afb      	ldrh	r3, [r7, #22]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	8afa      	ldrh	r2, [r7, #22]
 80084f6:	60da      	str	r2, [r3, #12]
 80084f8:	e052      	b.n	80085a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008500:	e04e      	b.n	80085a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008506:	2b08      	cmp	r3, #8
 8008508:	d827      	bhi.n	800855a <UART_SetConfig+0x506>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x4bc>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008535 	.word	0x08008535
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008545 	.word	0x08008545
 800851c:	0800855b 	.word	0x0800855b
 8008520:	0800854b 	.word	0x0800854b
 8008524:	0800855b 	.word	0x0800855b
 8008528:	0800855b 	.word	0x0800855b
 800852c:	0800855b 	.word	0x0800855b
 8008530:	08008553 	.word	0x08008553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008534:	f7fc fe52 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8008538:	61f8      	str	r0, [r7, #28]
        break;
 800853a:	e014      	b.n	8008566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800853c:	f7fc fe64 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8008540:	61f8      	str	r0, [r7, #28]
        break;
 8008542:	e010      	b.n	8008566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <UART_SetConfig+0x56c>)
 8008546:	61fb      	str	r3, [r7, #28]
        break;
 8008548:	e00d      	b.n	8008566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800854a:	f7fc fdaf 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800854e:	61f8      	str	r0, [r7, #28]
        break;
 8008550:	e009      	b.n	8008566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008556:	61fb      	str	r3, [r7, #28]
        break;
 8008558:	e005      	b.n	8008566 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008564:	bf00      	nop
    }

    if (pclk != 0U)
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d019      	beq.n	80085a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	085a      	lsrs	r2, r3, #1
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	fbb2 f3f3 	udiv	r3, r2, r3
 800857e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	2b0f      	cmp	r3, #15
 8008584:	d909      	bls.n	800859a <UART_SetConfig+0x546>
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d205      	bcs.n	800859a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60da      	str	r2, [r3, #12]
 8008598:	e002      	b.n	80085a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80085ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3728      	adds	r7, #40	; 0x28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ba:	bf00      	nop
 80085bc:	40008000 	.word	0x40008000
 80085c0:	00f42400 	.word	0x00f42400

080085c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00a      	beq.n	8008632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01a      	beq.n	80086da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086c2:	d10a      	bne.n	80086da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	605a      	str	r2, [r3, #4]
  }
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b098      	sub	sp, #96	; 0x60
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008718:	f7fa fc3a 	bl	8002f90 <HAL_GetTick>
 800871c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b08      	cmp	r3, #8
 800872a:	d12e      	bne.n	800878a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800872c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008734:	2200      	movs	r2, #0
 8008736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f88c 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d021      	beq.n	800878a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800875a:	653b      	str	r3, [r7, #80]	; 0x50
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008764:	647b      	str	r3, [r7, #68]	; 0x44
 8008766:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800876a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e062      	b.n	8008850 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b04      	cmp	r3, #4
 8008796:	d149      	bne.n	800882c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a0:	2200      	movs	r2, #0
 80087a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f856 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d03c      	beq.n	800882c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	623b      	str	r3, [r7, #32]
   return(result);
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d0:	633b      	str	r3, [r7, #48]	; 0x30
 80087d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e6      	bne.n	80087b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3308      	adds	r3, #8
 80087ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3308      	adds	r3, #8
 8008802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008804:	61fa      	str	r2, [r7, #28]
 8008806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	69b9      	ldr	r1, [r7, #24]
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	617b      	str	r3, [r7, #20]
   return(result);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e011      	b.n	8008850 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3758      	adds	r7, #88	; 0x58
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008868:	e049      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d045      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7fa fb8d 	bl	8002f90 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <UART_WaitOnFlagUntilTimeout+0x30>
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e048      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	d031      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d110      	bne.n	80088ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2208      	movs	r2, #8
 80088ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f8ff 	bl	8008ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2208      	movs	r2, #8
 80088ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e029      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d8:	d111      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f8e5 	bl	8008ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e00f      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4013      	ands	r3, r2
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	429a      	cmp	r2, r3
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d0a6      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b096      	sub	sp, #88	; 0x58
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2222      	movs	r2, #34	; 0x22
 8008950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008958:	2b00      	cmp	r3, #0
 800895a:	d028      	beq.n	80089ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008960:	4a3e      	ldr	r2, [pc, #248]	; (8008a5c <UART_Start_Receive_DMA+0x134>)
 8008962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008968:	4a3d      	ldr	r2, [pc, #244]	; (8008a60 <UART_Start_Receive_DMA+0x138>)
 800896a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	4a3c      	ldr	r2, [pc, #240]	; (8008a64 <UART_Start_Receive_DMA+0x13c>)
 8008972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008978:	2200      	movs	r2, #0
 800897a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3324      	adds	r3, #36	; 0x24
 8008986:	4619      	mov	r1, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	461a      	mov	r2, r3
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	f7fa fcf8 	bl	8003384 <HAL_DMA_Start_IT>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2210      	movs	r2, #16
 800899e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e051      	b.n	8008a52 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ca:	657b      	str	r3, [r7, #84]	; 0x54
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3308      	adds	r3, #8
 8008a06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a08:	637a      	str	r2, [r7, #52]	; 0x34
 8008a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3308      	adds	r3, #8
 8008a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a3c:	623a      	str	r2, [r7, #32]
 8008a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69f9      	ldr	r1, [r7, #28]
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e5      	bne.n	8008a1c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3758      	adds	r7, #88	; 0x58
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08008c33 	.word	0x08008c33
 8008a60:	08008d5f 	.word	0x08008d5f
 8008a64:	08008d9d 	.word	0x08008d9d

08008a68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6979      	ldr	r1, [r7, #20]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008aa8:	bf00      	nop
 8008aaa:	3724      	adds	r7, #36	; 0x24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b095      	sub	sp, #84	; 0x54
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ada:	643b      	str	r3, [r7, #64]	; 0x40
 8008adc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e6      	bne.n	8008abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d118      	bne.n	8008b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b48:	61bb      	str	r3, [r7, #24]
 8008b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	613b      	str	r3, [r7, #16]
   return(result);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008b70:	bf00      	nop
 8008b72:	3754      	adds	r7, #84	; 0x54
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b090      	sub	sp, #64	; 0x40
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d137      	bne.n	8008c08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	623b      	str	r3, [r7, #32]
   return(result);
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e5      	bne.n	8008ba0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	69b9      	ldr	r1, [r7, #24]
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e6      	bne.n	8008bd4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c06:	e002      	b.n	8008c0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c0a:	f7ff f9ef 	bl	8007fec <HAL_UART_TxCpltCallback>
}
 8008c0e:	bf00      	nop
 8008c10:	3740      	adds	r7, #64	; 0x40
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff f9eb 	bl	8008000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b09c      	sub	sp, #112	; 0x70
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d171      	bne.n	8008d32 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e6      	bne.n	8008c56 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ca8:	647a      	str	r2, [r7, #68]	; 0x44
 8008caa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e5      	bne.n	8008c88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	623b      	str	r3, [r7, #32]
   return(result);
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8008cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cdc:	633a      	str	r2, [r7, #48]	; 0x30
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e5      	bne.n	8008cbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d118      	bne.n	8008d32 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f023 0310 	bic.w	r3, r3, #16
 8008d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d34:	2200      	movs	r2, #0
 8008d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d107      	bne.n	8008d50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d46:	4619      	mov	r1, r3
 8008d48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d4a:	f7ff f977 	bl	800803c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d4e:	e002      	b.n	8008d56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008d50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d52:	f7f8 fbab 	bl	80014ac <HAL_UART_RxCpltCallback>
}
 8008d56:	bf00      	nop
 8008d58:	3770      	adds	r7, #112	; 0x70
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d109      	bne.n	8008d8e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff f958 	bl	800803c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d8c:	e002      	b.n	8008d94 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff f940 	bl	8008014 <HAL_UART_RxHalfCpltCallback>
}
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc2:	2b80      	cmp	r3, #128	; 0x80
 8008dc4:	d109      	bne.n	8008dda <UART_DMAError+0x3e>
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2b21      	cmp	r3, #33	; 0x21
 8008dca:	d106      	bne.n	8008dda <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008dd4:	6978      	ldr	r0, [r7, #20]
 8008dd6:	f7ff fe47 	bl	8008a68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de4:	2b40      	cmp	r3, #64	; 0x40
 8008de6:	d109      	bne.n	8008dfc <UART_DMAError+0x60>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b22      	cmp	r3, #34	; 0x22
 8008dec:	d106      	bne.n	8008dfc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	f7ff fe5c 	bl	8008ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e02:	f043 0210 	orr.w	r2, r3, #16
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e0c:	6978      	ldr	r0, [r7, #20]
 8008e0e:	f7ff f90b 	bl	8008028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e12:	bf00      	nop
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff f8f5 	bl	8008028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b088      	sub	sp, #32
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e6      	bne.n	8008e4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff f8ad 	bl	8007fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e92:	bf00      	nop
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <VL53L4CD_SetI2CAddress>:
}

VL53L4CD_Error VL53L4CD_SetI2CAddress(
		Dev_t dev,
		uint8_t new_address)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	80fb      	strh	r3, [r7, #6]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	717b      	strb	r3, [r7, #5]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_I2C_SLAVE__DEVICE_ADDRESS,
 8008ec2:	797b      	ldrb	r3, [r7, #5]
 8008ec4:	085b      	lsrs	r3, r3, #1
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	2101      	movs	r1, #1
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f9 fa2b 	bl	8002328 <VL53L4CD_WrByte>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	73fb      	strb	r3, [r7, #15]
			(uint8_t)(new_address >> (uint8_t)1));
	return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <VL53L4CD_GetSensorId>:

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	4603      	mov	r3, r0
 8008eee:	6039      	str	r1, [r7, #0]
 8008ef0:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	f240 110f 	movw	r1, #271	; 0x10f
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f9 f9a6 	bl	8002250 <VL53L4CD_RdWord>
 8008f04:	4603      	mov	r3, r0
 8008f06:	461a      	mov	r2, r3
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	73fb      	strb	r3, [r7, #15]
	return status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <VL53L4CD_SensorInit>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 8008f26:	2301      	movs	r3, #1
 8008f28:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 8008f2e:	f107 0209 	add.w	r2, r7, #9
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	21e5      	movs	r1, #229	; 0xe5
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 f9c4 	bl	80022c4 <VL53L4CD_RdByte>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	461a      	mov	r2, r3
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 8008f46:	7a7b      	ldrb	r3, [r7, #9]
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d102      	bne.n	8008f52 <VL53L4CD_SensorInit+0x3a>
		{
			continue_loop = (uint8_t)0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	737b      	strb	r3, [r7, #13]
 8008f50:	e00b      	b.n	8008f6a <VL53L4CD_SensorInit+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 8008f52:	897b      	ldrh	r3, [r7, #10]
 8008f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f58:	d203      	bcs.n	8008f62 <VL53L4CD_SensorInit+0x4a>
		{
			i++;
 8008f5a:	897b      	ldrh	r3, [r7, #10]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	817b      	strh	r3, [r7, #10]
 8008f60:	e003      	b.n	8008f6a <VL53L4CD_SensorInit+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8008f66:	23ff      	movs	r3, #255	; 0xff
 8008f68:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7f9 fa64 	bl	800243c <WaitMs>
	}while(continue_loop == (uint8_t)1);
 8008f74:	7b7b      	ldrb	r3, [r7, #13]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d0d9      	beq.n	8008f2e <VL53L4CD_SensorInit+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8008f7a:	232d      	movs	r3, #45	; 0x2d
 8008f7c:	73bb      	strb	r3, [r7, #14]
 8008f7e:	e011      	b.n	8008fa4 <VL53L4CD_SensorInit+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	3b2d      	subs	r3, #45	; 0x2d
				VL53L4CD_DEFAULT_CONFIGURATION[
 8008f88:	4a44      	ldr	r2, [pc, #272]	; (800909c <VL53L4CD_SensorInit+0x184>)
 8008f8a:	5cd2      	ldrb	r2, [r2, r3]
		status |= VL53L4CD_WrByte(dev, Addr,
 8008f8c:	88fb      	ldrh	r3, [r7, #6]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f9 f9ca 	bl	8002328 <VL53L4CD_WrByte>
 8008f94:	4603      	mov	r3, r0
 8008f96:	461a      	mov	r2, r3
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	73bb      	strb	r3, [r7, #14]
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	2b87      	cmp	r3, #135	; 0x87
 8008fa8:	d9ea      	bls.n	8008f80 <VL53L4CD_SensorInit+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	2240      	movs	r2, #64	; 0x40
 8008fae:	2187      	movs	r1, #135	; 0x87
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7f9 f9b9 	bl	8002328 <VL53L4CD_WrByte>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8008fc8:	f107 0209 	add.w	r2, r7, #9
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 f8c5 	bl	8009160 <VL53L4CD_CheckForDataReady>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 8008fe0:	7a7b      	ldrb	r3, [r7, #9]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d102      	bne.n	8008fec <VL53L4CD_SensorInit+0xd4>
		{
			continue_loop = (uint8_t)0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	737b      	strb	r3, [r7, #13]
 8008fea:	e00b      	b.n	8009004 <VL53L4CD_SensorInit+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8008fec:	897b      	ldrh	r3, [r7, #10]
 8008fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff2:	d203      	bcs.n	8008ffc <VL53L4CD_SensorInit+0xe4>
		{
			i++;
 8008ff4:	897b      	ldrh	r3, [r7, #10]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	817b      	strh	r3, [r7, #10]
 8008ffa:	e003      	b.n	8009004 <VL53L4CD_SensorInit+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8009000:	23ff      	movs	r3, #255	; 0xff
 8009002:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	2101      	movs	r1, #1
 8009008:	4618      	mov	r0, r3
 800900a:	f7f9 fa17 	bl	800243c <WaitMs>
	}while(continue_loop == (uint8_t)1);
 800900e:	7b7b      	ldrb	r3, [r7, #13]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d0d9      	beq.n	8008fc8 <VL53L4CD_SensorInit+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f842 	bl	80090a0 <VL53L4CD_ClearInterrupt>
 800901c:	4603      	mov	r3, r0
 800901e:	461a      	mov	r2, r3
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	4313      	orrs	r3, r2
 8009024:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f882 	bl	8009132 <VL53L4CD_StopRanging>
 800902e:	4603      	mov	r3, r0
 8009030:	461a      	mov	r2, r3
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	4313      	orrs	r3, r2
 8009036:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	2209      	movs	r2, #9
 800903c:	2108      	movs	r1, #8
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 f972 	bl	8002328 <VL53L4CD_WrByte>
 8009044:	4603      	mov	r3, r0
 8009046:	461a      	mov	r2, r3
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4313      	orrs	r3, r2
 800904c:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	2200      	movs	r2, #0
 8009052:	210b      	movs	r1, #11
 8009054:	4618      	mov	r0, r3
 8009056:	f7f9 f967 	bl	8002328 <VL53L4CD_WrByte>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4313      	orrs	r3, r2
 8009062:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800906a:	2124      	movs	r1, #36	; 0x24
 800906c:	4618      	mov	r0, r3
 800906e:	f7f9 f983 	bl	8002378 <VL53L4CD_WrWord>
 8009072:	4603      	mov	r3, r0
 8009074:	461a      	mov	r2, r3
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	4313      	orrs	r3, r2
 800907a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	2200      	movs	r2, #0
 8009080:	2132      	movs	r1, #50	; 0x32
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f8b0 	bl	80091e8 <VL53L4CD_SetRangeTiming>
 8009088:	4603      	mov	r3, r0
 800908a:	461a      	mov	r2, r3
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	4313      	orrs	r3, r2
 8009090:	73fb      	strb	r3, [r7, #15]

	return status;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	0800c2e4 	.word	0x0800c2e4

080090a0 <VL53L4CD_ClearInterrupt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	2201      	movs	r2, #1
 80090b2:	2186      	movs	r1, #134	; 0x86
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f9 f937 	bl	8002328 <VL53L4CD_WrByte>
 80090ba:	4603      	mov	r3, r0
 80090bc:	461a      	mov	r2, r3
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	4603      	mov	r3, r0
 80090d6:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 80090dc:	f107 0208 	add.w	r2, r7, #8
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	216c      	movs	r1, #108	; 0x6c
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f9 f877 	bl	80021d8 <VL53L4CD_RdDWord>
 80090ea:	4603      	mov	r3, r0
 80090ec:	461a      	mov	r2, r3
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <VL53L4CD_StartRanging+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	2221      	movs	r2, #33	; 0x21
 80090fe:	2187      	movs	r1, #135	; 0x87
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 f911 	bl	8002328 <VL53L4CD_WrByte>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4313      	orrs	r3, r2
 800910e:	73fb      	strb	r3, [r7, #15]
 8009110:	e00a      	b.n	8009128 <VL53L4CD_StartRanging+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	2240      	movs	r2, #64	; 0x40
 8009116:	2187      	movs	r1, #135	; 0x87
 8009118:	4618      	mov	r0, r3
 800911a:	f7f9 f905 	bl	8002328 <VL53L4CD_WrByte>
 800911e:	4603      	mov	r3, r0
 8009120:	461a      	mov	r2, r3
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	4313      	orrs	r3, r2
 8009126:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	4603      	mov	r3, r0
 800913a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	2200      	movs	r2, #0
 8009144:	2187      	movs	r1, #135	; 0x87
 8009146:	4618      	mov	r0, r3
 8009148:	f7f9 f8ee 	bl	8002328 <VL53L4CD_WrByte>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4313      	orrs	r3, r2
 8009154:	73fb      	strb	r3, [r7, #15]
	return status;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 8009170:	f107 020d 	add.w	r2, r7, #13
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	2130      	movs	r1, #48	; 0x30
 8009178:	4618      	mov	r0, r3
 800917a:	f7f9 f8a3 	bl	80022c4 <VL53L4CD_RdByte>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	4313      	orrs	r3, r2
 8009186:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8009188:	7b7b      	ldrb	r3, [r7, #13]
 800918a:	f003 0310 	and.w	r3, r3, #16
 800918e:	b2db      	uxtb	r3, r3
 8009190:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 8009192:	7b7b      	ldrb	r3, [r7, #13]
 8009194:	091b      	lsrs	r3, r3, #4
 8009196:	b2db      	uxtb	r3, r3
 8009198:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 800919a:	7b7b      	ldrb	r3, [r7, #13]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d102      	bne.n	80091a6 <VL53L4CD_CheckForDataReady+0x46>
	{
		int_pol = (uint8_t)0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
 80091a4:	e001      	b.n	80091aa <VL53L4CD_CheckForDataReady+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 80091aa:	f107 020d 	add.w	r2, r7, #13
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	2131      	movs	r1, #49	; 0x31
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f9 f886 	bl	80022c4 <VL53L4CD_RdByte>
 80091b8:	4603      	mov	r3, r0
 80091ba:	461a      	mov	r2, r3
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	4313      	orrs	r3, r2
 80091c0:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 80091c2:	7b7b      	ldrb	r3, [r7, #13]
 80091c4:	f003 0201 	and.w	r2, r3, #1
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d103      	bne.n	80091d6 <VL53L4CD_CheckForDataReady+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	e002      	b.n	80091dc <VL53L4CD_CheckForDataReady+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08c      	sub	sp, #48	; 0x30
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 80091fc:	2300      	movs	r3, #0
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009200:	2300      	movs	r3, #0
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 8009204:	4b86      	ldr	r3, [pc, #536]	; (8009420 <VL53L4CD_SetRangeTiming+0x238>)
 8009206:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 8009208:	f107 0214 	add.w	r2, r7, #20
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	2106      	movs	r1, #6
 8009210:	4618      	mov	r0, r3
 8009212:	f7f9 f81d 	bl	8002250 <VL53L4CD_RdWord>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
 800921a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800921e:	4313      	orrs	r3, r2
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(osc_frequency != (uint16_t)0)
 8009224:	8abb      	ldrh	r3, [r7, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d012      	beq.n	8009250 <VL53L4CD_SetRangeTiming+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009230:	fb02 f303 	mul.w	r3, r2, r3
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 8009236:	8abb      	ldrh	r3, [r7, #20]
 8009238:	461a      	mov	r2, r3
 800923a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800923e:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 8009242:	4613      	mov	r3, r2
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	4413      	add	r3, r2
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	099b      	lsrs	r3, r3, #6
 800924c:	62bb      	str	r3, [r7, #40]	; 0x28
 800924e:	e005      	b.n	800925c <VL53L4CD_SetRangeTiming+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8009250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009254:	f063 0301 	orn	r3, r3, #1
 8009258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10) 
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b09      	cmp	r3, #9
 8009260:	d906      	bls.n	8009270 <VL53L4CD_SetRangeTiming+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2bc8      	cmp	r3, #200	; 0xc8
 8009266:	d803      	bhi.n	8009270 <VL53L4CD_SetRangeTiming+0x88>
 8009268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <VL53L4CD_SetRangeTiming+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 8009270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009274:	f063 0301 	orn	r3, r3, #1
 8009278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800927c:	e05e      	b.n	800933c <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d111      	bne.n	80092a8 <VL53L4CD_SetRangeTiming+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 8009284:	89fb      	ldrh	r3, [r7, #14]
 8009286:	2200      	movs	r2, #0
 8009288:	216c      	movs	r1, #108	; 0x6c
 800928a:	4618      	mov	r0, r3
 800928c:	f7f9 f8a2 	bl	80023d4 <VL53L4CD_WrDWord>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009298:	4313      	orrs	r3, r2
 800929a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		timing_budget_us -= (uint32_t)2500;
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
 80092a6:	e049      	b.n	800933c <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d93f      	bls.n	8009330 <VL53L4CD_SetRangeTiming+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 80092b0:	f107 0216 	add.w	r2, r7, #22
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	21de      	movs	r1, #222	; 0xde
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f8 ffc9 	bl	8002250 <VL53L4CD_RdWord>
 80092be:	4603      	mov	r3, r0
 80092c0:	461a      	mov	r2, r3
 80092c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 80092cc:	8afb      	ldrh	r3, [r7, #22]
 80092ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	ee07 3a90 	vmov	s15, r3
 80092dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80092e4:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 80092e8:	8afb      	ldrh	r3, [r7, #22]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 80092fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80092fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009302:	89fb      	ldrh	r3, [r7, #14]
 8009304:	ee17 2a90 	vmov	r2, s15
 8009308:	216c      	movs	r1, #108	; 0x6c
 800930a:	4618      	mov	r0, r3
 800930c:	f7f9 f862 	bl	80023d4 <VL53L4CD_WrDWord>
 8009310:	4603      	mov	r3, r0
 8009312:	461a      	mov	r2, r3
 8009314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009318:	4313      	orrs	r3, r2
 800931a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	f5a3 5386 	sub.w	r3, r3, #4288	; 0x10c0
 8009324:	3b0c      	subs	r3, #12
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
		timing_budget_us /= (uint32_t)2;
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	085b      	lsrs	r3, r3, #1
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
 800932e:	e005      	b.n	800933c <VL53L4CD_SetRangeTiming+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 8009330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009334:	f063 0301 	orn	r3, r3, #1
 8009338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 800933c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009340:	2bfe      	cmp	r3, #254	; 0xfe
 8009342:	d067      	beq.n	8009414 <VL53L4CD_SetRangeTiming+0x22c>
	{
				ms_byte = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	85bb      	strh	r3, [r7, #44]	; 0x2c
				timing_budget_us = timing_budget_us << 12;
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	031b      	lsls	r3, r3, #12
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
				tmp = macro_period_us*(uint32_t)16;
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	09da      	lsrs	r2, r3, #7
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	441a      	add	r2, r3
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	099b      	lsrs	r3, r3, #6
 8009360:	fbb2 f3f3 	udiv	r3, r2, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8009368:	e005      	b.n	8009376 <VL53L4CD_SetRangeTiming+0x18e>
						 ls_byte = ls_byte >> 1;
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8009370:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009372:	3301      	adds	r3, #1
 8009374:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1f4      	bne.n	800936a <VL53L4CD_SetRangeTiming+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8009380:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	b29b      	uxth	r3, r3
 800938a:	b2db      	uxtb	r3, r3
 800938c:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 800938e:	4413      	add	r3, r2
 8009390:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 8009392:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009394:	89fb      	ldrh	r3, [r7, #14]
 8009396:	215e      	movs	r1, #94	; 0x5e
 8009398:	4618      	mov	r0, r3
 800939a:	f7f8 ffed 	bl	8002378 <VL53L4CD_WrWord>
 800939e:	4603      	mov	r3, r0
 80093a0:	461a      	mov	r2, r3
 80093a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093a6:	4313      	orrs	r3, r2
 80093a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				ms_byte = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
				tmp = macro_period_us*(uint32_t)12;
 80093b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b2:	4613      	mov	r3, r2
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	09da      	lsrs	r2, r3, #7
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	441a      	add	r2, r3
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	099b      	lsrs	r3, r3, #6
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80093d0:	e005      	b.n	80093de <VL53L4CD_SetRangeTiming+0x1f6>
						 ls_byte = ls_byte >> 1;
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 80093d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093da:	3301      	adds	r3, #1
 80093dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f4      	bne.n	80093d2 <VL53L4CD_SetRangeTiming+0x1ea>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 80093e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 80093f6:	4413      	add	r3, r2
 80093f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 80093fa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80093fc:	89fb      	ldrh	r3, [r7, #14]
 80093fe:	2161      	movs	r1, #97	; 0x61
 8009400:	4618      	mov	r0, r3
 8009402:	f7f8 ffb9 	bl	8002378 <VL53L4CD_WrWord>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800940e:	4313      	orrs	r3, r2
 8009410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return status;
 8009414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009418:	4618      	mov	r0, r3
 800941a:	3730      	adds	r7, #48	; 0x30
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	3f870a3d 	.word	0x3f870a3d

08009424 <VL53L4CD_GetResult>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 8009424:	b5b0      	push	{r4, r5, r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 8009436:	4b52      	ldr	r3, [pc, #328]	; (8009580 <VL53L4CD_GetResult+0x15c>)
 8009438:	f107 0408 	add.w	r4, r7, #8
 800943c:	461d      	mov	r5, r3
 800943e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009442:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009446:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 800944a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800944e:	88fb      	ldrh	r3, [r7, #6]
 8009450:	2189      	movs	r1, #137	; 0x89
 8009452:	4618      	mov	r0, r3
 8009454:	f7f8 ff36 	bl	80022c4 <VL53L4CD_RdByte>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009460:	4313      	orrs	r3, r2
 8009462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8009466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (temp_8 < (uint8_t)24)
 8009474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009478:	2b17      	cmp	r3, #23
 800947a:	d807      	bhi.n	800948c <VL53L4CD_GetResult+0x68>
	{
		temp_8 = status_rtn[temp_8];
 800947c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009480:	3328      	adds	r3, #40	; 0x28
 8009482:	443b      	add	r3, r7
 8009484:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8009488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	p_result->range_status = temp_8;
 800948c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8009494:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	218c      	movs	r1, #140	; 0x8c
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 fed7 	bl	8002250 <VL53L4CD_RdWord>
 80094a2:	4603      	mov	r3, r0
 80094a4:	461a      	mov	r2, r3
 80094a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 80094b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094b2:	0a1b      	lsrs	r3, r3, #8
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 80094ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094be:	88fb      	ldrh	r3, [r7, #6]
 80094c0:	218e      	movs	r1, #142	; 0x8e
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f8 fec4 	bl	8002250 <VL53L4CD_RdWord>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 80094d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	b29a      	uxth	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 80094e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	2190      	movs	r1, #144	; 0x90
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f8 feb1 	bl	8002250 <VL53L4CD_RdWord>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 80094fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	b29a      	uxth	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 8009506:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	2192      	movs	r1, #146	; 0x92
 800950e:	4618      	mov	r0, r3
 8009510:	f7f8 fe9e 	bl	8002250 <VL53L4CD_RdWord>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800951c:	4313      	orrs	r3, r2
 800951e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 8009522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009524:	089b      	lsrs	r3, r3, #2
 8009526:	b29a      	uxth	r2, r3
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 800952c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	2196      	movs	r1, #150	; 0x96
 8009534:	4618      	mov	r0, r3
 8009536:	f7f8 fe8b 	bl	8002250 <VL53L4CD_RdWord>
 800953a:	4603      	mov	r3, r0
 800953c:	461a      	mov	r2, r3
 800953e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009542:	4313      	orrs	r3, r2
 8009544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 8009548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	899b      	ldrh	r3, [r3, #12]
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	b29a      	uxth	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	899b      	ldrh	r3, [r3, #12]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8009568:	fbb2 f3f3 	udiv	r3, r2, r3
 800956c:	b29a      	uxth	r2, r3
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	80da      	strh	r2, [r3, #6]

	return status;
 8009572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009576:	4618      	mov	r0, r3
 8009578:	3728      	adds	r7, #40	; 0x28
 800957a:	46bd      	mov	sp, r7
 800957c:	bdb0      	pop	{r4, r5, r7, pc}
 800957e:	bf00      	nop
 8009580:	0800c284 	.word	0x0800c284

08009584 <VL53L4CD_SetOffset>:

VL53L4CD_Error VL53L4CD_SetOffset(
		Dev_t dev,
		int16_t OffsetValueInMm)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	460a      	mov	r2, r1
 800958e:	80fb      	strh	r3, [r7, #6]
 8009590:	4613      	mov	r3, r2
 8009592:	80bb      	strh	r3, [r7, #4]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
	uint16_t temp;

	temp = (uint16_t)((uint16_t)OffsetValueInMm*(uint16_t)4);
 8009598:	88bb      	ldrh	r3, [r7, #4]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	81bb      	strh	r3, [r7, #12]

	status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_OFFSET_MM, temp);
 800959e:	89ba      	ldrh	r2, [r7, #12]
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	211e      	movs	r1, #30
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7f8 fee7 	bl	8002378 <VL53L4CD_WrWord>
 80095aa:	4603      	mov	r3, r0
 80095ac:	461a      	mov	r2, r3
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_INNER_OFFSET_MM, (uint8_t)0x0);
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2120      	movs	r1, #32
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f8 fedc 	bl	8002378 <VL53L4CD_WrWord>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, VL53L4CD_OUTER_OFFSET_MM, (uint8_t)0x0);
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	2200      	movs	r2, #0
 80095ce:	2122      	movs	r1, #34	; 0x22
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f8 fed1 	bl	8002378 <VL53L4CD_WrWord>
 80095d6:	4603      	mov	r3, r0
 80095d8:	461a      	mov	r2, r3
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	4313      	orrs	r3, r2
 80095de:	73fb      	strb	r3, [r7, #15]
	return status;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <__cvt>:
 80095ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ee:	ec55 4b10 	vmov	r4, r5, d0
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	460e      	mov	r6, r1
 80095f6:	4619      	mov	r1, r3
 80095f8:	462b      	mov	r3, r5
 80095fa:	bfbb      	ittet	lt
 80095fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009600:	461d      	movlt	r5, r3
 8009602:	2300      	movge	r3, #0
 8009604:	232d      	movlt	r3, #45	; 0x2d
 8009606:	700b      	strb	r3, [r1, #0]
 8009608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800960e:	4691      	mov	r9, r2
 8009610:	f023 0820 	bic.w	r8, r3, #32
 8009614:	bfbc      	itt	lt
 8009616:	4622      	movlt	r2, r4
 8009618:	4614      	movlt	r4, r2
 800961a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800961e:	d005      	beq.n	800962c <__cvt+0x42>
 8009620:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009624:	d100      	bne.n	8009628 <__cvt+0x3e>
 8009626:	3601      	adds	r6, #1
 8009628:	2102      	movs	r1, #2
 800962a:	e000      	b.n	800962e <__cvt+0x44>
 800962c:	2103      	movs	r1, #3
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	ab02      	add	r3, sp, #8
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	ec45 4b10 	vmov	d0, r4, r5
 800963a:	4653      	mov	r3, sl
 800963c:	4632      	mov	r2, r6
 800963e:	f000 ff53 	bl	800a4e8 <_dtoa_r>
 8009642:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009646:	4607      	mov	r7, r0
 8009648:	d102      	bne.n	8009650 <__cvt+0x66>
 800964a:	f019 0f01 	tst.w	r9, #1
 800964e:	d022      	beq.n	8009696 <__cvt+0xac>
 8009650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009654:	eb07 0906 	add.w	r9, r7, r6
 8009658:	d110      	bne.n	800967c <__cvt+0x92>
 800965a:	783b      	ldrb	r3, [r7, #0]
 800965c:	2b30      	cmp	r3, #48	; 0x30
 800965e:	d10a      	bne.n	8009676 <__cvt+0x8c>
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f7 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800966c:	b918      	cbnz	r0, 8009676 <__cvt+0x8c>
 800966e:	f1c6 0601 	rsb	r6, r6, #1
 8009672:	f8ca 6000 	str.w	r6, [sl]
 8009676:	f8da 3000 	ldr.w	r3, [sl]
 800967a:	4499      	add	r9, r3
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f7 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009688:	b108      	cbz	r0, 800968e <__cvt+0xa4>
 800968a:	f8cd 900c 	str.w	r9, [sp, #12]
 800968e:	2230      	movs	r2, #48	; 0x30
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	454b      	cmp	r3, r9
 8009694:	d307      	bcc.n	80096a6 <__cvt+0xbc>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800969a:	1bdb      	subs	r3, r3, r7
 800969c:	4638      	mov	r0, r7
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	b004      	add	sp, #16
 80096a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a6:	1c59      	adds	r1, r3, #1
 80096a8:	9103      	str	r1, [sp, #12]
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	e7f0      	b.n	8009690 <__cvt+0xa6>

080096ae <__exponent>:
 80096ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096b0:	4603      	mov	r3, r0
 80096b2:	2900      	cmp	r1, #0
 80096b4:	bfb8      	it	lt
 80096b6:	4249      	neglt	r1, r1
 80096b8:	f803 2b02 	strb.w	r2, [r3], #2
 80096bc:	bfb4      	ite	lt
 80096be:	222d      	movlt	r2, #45	; 0x2d
 80096c0:	222b      	movge	r2, #43	; 0x2b
 80096c2:	2909      	cmp	r1, #9
 80096c4:	7042      	strb	r2, [r0, #1]
 80096c6:	dd2a      	ble.n	800971e <__exponent+0x70>
 80096c8:	f10d 0207 	add.w	r2, sp, #7
 80096cc:	4617      	mov	r7, r2
 80096ce:	260a      	movs	r6, #10
 80096d0:	4694      	mov	ip, r2
 80096d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80096d6:	fb06 1415 	mls	r4, r6, r5, r1
 80096da:	3430      	adds	r4, #48	; 0x30
 80096dc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80096e0:	460c      	mov	r4, r1
 80096e2:	2c63      	cmp	r4, #99	; 0x63
 80096e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80096e8:	4629      	mov	r1, r5
 80096ea:	dcf1      	bgt.n	80096d0 <__exponent+0x22>
 80096ec:	3130      	adds	r1, #48	; 0x30
 80096ee:	f1ac 0402 	sub.w	r4, ip, #2
 80096f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80096f6:	1c41      	adds	r1, r0, #1
 80096f8:	4622      	mov	r2, r4
 80096fa:	42ba      	cmp	r2, r7
 80096fc:	d30a      	bcc.n	8009714 <__exponent+0x66>
 80096fe:	f10d 0209 	add.w	r2, sp, #9
 8009702:	eba2 020c 	sub.w	r2, r2, ip
 8009706:	42bc      	cmp	r4, r7
 8009708:	bf88      	it	hi
 800970a:	2200      	movhi	r2, #0
 800970c:	4413      	add	r3, r2
 800970e:	1a18      	subs	r0, r3, r0
 8009710:	b003      	add	sp, #12
 8009712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009714:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009718:	f801 5f01 	strb.w	r5, [r1, #1]!
 800971c:	e7ed      	b.n	80096fa <__exponent+0x4c>
 800971e:	2330      	movs	r3, #48	; 0x30
 8009720:	3130      	adds	r1, #48	; 0x30
 8009722:	7083      	strb	r3, [r0, #2]
 8009724:	70c1      	strb	r1, [r0, #3]
 8009726:	1d03      	adds	r3, r0, #4
 8009728:	e7f1      	b.n	800970e <__exponent+0x60>
	...

0800972c <_printf_float>:
 800972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	ed2d 8b02 	vpush	{d8}
 8009734:	b08d      	sub	sp, #52	; 0x34
 8009736:	460c      	mov	r4, r1
 8009738:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800973c:	4616      	mov	r6, r2
 800973e:	461f      	mov	r7, r3
 8009740:	4605      	mov	r5, r0
 8009742:	f000 fdd1 	bl	800a2e8 <_localeconv_r>
 8009746:	f8d0 a000 	ldr.w	sl, [r0]
 800974a:	4650      	mov	r0, sl
 800974c:	f7f6 fd90 	bl	8000270 <strlen>
 8009750:	2300      	movs	r3, #0
 8009752:	930a      	str	r3, [sp, #40]	; 0x28
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	f8d8 3000 	ldr.w	r3, [r8]
 800975c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009760:	3307      	adds	r3, #7
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	f103 0208 	add.w	r2, r3, #8
 800976a:	f8c8 2000 	str.w	r2, [r8]
 800976e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f8cd 8018 	str.w	r8, [sp, #24]
 800977c:	ee08 0a10 	vmov	s16, r0
 8009780:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009788:	4b9e      	ldr	r3, [pc, #632]	; (8009a04 <_printf_float+0x2d8>)
 800978a:	f04f 32ff 	mov.w	r2, #4294967295
 800978e:	f7f7 f9cd 	bl	8000b2c <__aeabi_dcmpun>
 8009792:	bb88      	cbnz	r0, 80097f8 <_printf_float+0xcc>
 8009794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009798:	4b9a      	ldr	r3, [pc, #616]	; (8009a04 <_printf_float+0x2d8>)
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	f7f7 f9a7 	bl	8000af0 <__aeabi_dcmple>
 80097a2:	bb48      	cbnz	r0, 80097f8 <_printf_float+0xcc>
 80097a4:	2200      	movs	r2, #0
 80097a6:	2300      	movs	r3, #0
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f7 f996 	bl	8000adc <__aeabi_dcmplt>
 80097b0:	b110      	cbz	r0, 80097b8 <_printf_float+0x8c>
 80097b2:	232d      	movs	r3, #45	; 0x2d
 80097b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b8:	4a93      	ldr	r2, [pc, #588]	; (8009a08 <_printf_float+0x2dc>)
 80097ba:	4b94      	ldr	r3, [pc, #592]	; (8009a0c <_printf_float+0x2e0>)
 80097bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80097c0:	bf94      	ite	ls
 80097c2:	4690      	movls	r8, r2
 80097c4:	4698      	movhi	r8, r3
 80097c6:	2303      	movs	r3, #3
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	f023 0304 	bic.w	r3, r3, #4
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	f04f 0900 	mov.w	r9, #0
 80097d6:	9700      	str	r7, [sp, #0]
 80097d8:	4633      	mov	r3, r6
 80097da:	aa0b      	add	r2, sp, #44	; 0x2c
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f9da 	bl	8009b98 <_printf_common>
 80097e4:	3001      	adds	r0, #1
 80097e6:	f040 8090 	bne.w	800990a <_printf_float+0x1de>
 80097ea:	f04f 30ff 	mov.w	r0, #4294967295
 80097ee:	b00d      	add	sp, #52	; 0x34
 80097f0:	ecbd 8b02 	vpop	{d8}
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	4640      	mov	r0, r8
 80097fe:	4649      	mov	r1, r9
 8009800:	f7f7 f994 	bl	8000b2c <__aeabi_dcmpun>
 8009804:	b140      	cbz	r0, 8009818 <_printf_float+0xec>
 8009806:	464b      	mov	r3, r9
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfbc      	itt	lt
 800980c:	232d      	movlt	r3, #45	; 0x2d
 800980e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009812:	4a7f      	ldr	r2, [pc, #508]	; (8009a10 <_printf_float+0x2e4>)
 8009814:	4b7f      	ldr	r3, [pc, #508]	; (8009a14 <_printf_float+0x2e8>)
 8009816:	e7d1      	b.n	80097bc <_printf_float+0x90>
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800981e:	9206      	str	r2, [sp, #24]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	d13f      	bne.n	80098a4 <_printf_float+0x178>
 8009824:	2306      	movs	r3, #6
 8009826:	6063      	str	r3, [r4, #4]
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	6861      	ldr	r1, [r4, #4]
 800982c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009830:	2300      	movs	r3, #0
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	ab0a      	add	r3, sp, #40	; 0x28
 8009836:	e9cd b301 	strd	fp, r3, [sp, #4]
 800983a:	ab09      	add	r3, sp, #36	; 0x24
 800983c:	ec49 8b10 	vmov	d0, r8, r9
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009848:	4628      	mov	r0, r5
 800984a:	f7ff fece 	bl	80095ea <__cvt>
 800984e:	9b06      	ldr	r3, [sp, #24]
 8009850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009852:	2b47      	cmp	r3, #71	; 0x47
 8009854:	4680      	mov	r8, r0
 8009856:	d108      	bne.n	800986a <_printf_float+0x13e>
 8009858:	1cc8      	adds	r0, r1, #3
 800985a:	db02      	blt.n	8009862 <_printf_float+0x136>
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	4299      	cmp	r1, r3
 8009860:	dd41      	ble.n	80098e6 <_printf_float+0x1ba>
 8009862:	f1ab 0302 	sub.w	r3, fp, #2
 8009866:	fa5f fb83 	uxtb.w	fp, r3
 800986a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800986e:	d820      	bhi.n	80098b2 <_printf_float+0x186>
 8009870:	3901      	subs	r1, #1
 8009872:	465a      	mov	r2, fp
 8009874:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009878:	9109      	str	r1, [sp, #36]	; 0x24
 800987a:	f7ff ff18 	bl	80096ae <__exponent>
 800987e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009880:	1813      	adds	r3, r2, r0
 8009882:	2a01      	cmp	r2, #1
 8009884:	4681      	mov	r9, r0
 8009886:	6123      	str	r3, [r4, #16]
 8009888:	dc02      	bgt.n	8009890 <_printf_float+0x164>
 800988a:	6822      	ldr	r2, [r4, #0]
 800988c:	07d2      	lsls	r2, r2, #31
 800988e:	d501      	bpl.n	8009894 <_printf_float+0x168>
 8009890:	3301      	adds	r3, #1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009898:	2b00      	cmp	r3, #0
 800989a:	d09c      	beq.n	80097d6 <_printf_float+0xaa>
 800989c:	232d      	movs	r3, #45	; 0x2d
 800989e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a2:	e798      	b.n	80097d6 <_printf_float+0xaa>
 80098a4:	9a06      	ldr	r2, [sp, #24]
 80098a6:	2a47      	cmp	r2, #71	; 0x47
 80098a8:	d1be      	bne.n	8009828 <_printf_float+0xfc>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1bc      	bne.n	8009828 <_printf_float+0xfc>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e7b9      	b.n	8009826 <_printf_float+0xfa>
 80098b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80098b6:	d118      	bne.n	80098ea <_printf_float+0x1be>
 80098b8:	2900      	cmp	r1, #0
 80098ba:	6863      	ldr	r3, [r4, #4]
 80098bc:	dd0b      	ble.n	80098d6 <_printf_float+0x1aa>
 80098be:	6121      	str	r1, [r4, #16]
 80098c0:	b913      	cbnz	r3, 80098c8 <_printf_float+0x19c>
 80098c2:	6822      	ldr	r2, [r4, #0]
 80098c4:	07d0      	lsls	r0, r2, #31
 80098c6:	d502      	bpl.n	80098ce <_printf_float+0x1a2>
 80098c8:	3301      	adds	r3, #1
 80098ca:	440b      	add	r3, r1
 80098cc:	6123      	str	r3, [r4, #16]
 80098ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80098d0:	f04f 0900 	mov.w	r9, #0
 80098d4:	e7de      	b.n	8009894 <_printf_float+0x168>
 80098d6:	b913      	cbnz	r3, 80098de <_printf_float+0x1b2>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	07d2      	lsls	r2, r2, #31
 80098dc:	d501      	bpl.n	80098e2 <_printf_float+0x1b6>
 80098de:	3302      	adds	r3, #2
 80098e0:	e7f4      	b.n	80098cc <_printf_float+0x1a0>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7f2      	b.n	80098cc <_printf_float+0x1a0>
 80098e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	4299      	cmp	r1, r3
 80098ee:	db05      	blt.n	80098fc <_printf_float+0x1d0>
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	6121      	str	r1, [r4, #16]
 80098f4:	07d8      	lsls	r0, r3, #31
 80098f6:	d5ea      	bpl.n	80098ce <_printf_float+0x1a2>
 80098f8:	1c4b      	adds	r3, r1, #1
 80098fa:	e7e7      	b.n	80098cc <_printf_float+0x1a0>
 80098fc:	2900      	cmp	r1, #0
 80098fe:	bfd4      	ite	le
 8009900:	f1c1 0202 	rsble	r2, r1, #2
 8009904:	2201      	movgt	r2, #1
 8009906:	4413      	add	r3, r2
 8009908:	e7e0      	b.n	80098cc <_printf_float+0x1a0>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	055a      	lsls	r2, r3, #21
 800990e:	d407      	bmi.n	8009920 <_printf_float+0x1f4>
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	4642      	mov	r2, r8
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	d12c      	bne.n	8009978 <_printf_float+0x24c>
 800991e:	e764      	b.n	80097ea <_printf_float+0xbe>
 8009920:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009924:	f240 80e0 	bls.w	8009ae8 <_printf_float+0x3bc>
 8009928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800992c:	2200      	movs	r2, #0
 800992e:	2300      	movs	r3, #0
 8009930:	f7f7 f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009934:	2800      	cmp	r0, #0
 8009936:	d034      	beq.n	80099a2 <_printf_float+0x276>
 8009938:	4a37      	ldr	r2, [pc, #220]	; (8009a18 <_printf_float+0x2ec>)
 800993a:	2301      	movs	r3, #1
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	f43f af51 	beq.w	80097ea <_printf_float+0xbe>
 8009948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800994c:	429a      	cmp	r2, r3
 800994e:	db02      	blt.n	8009956 <_printf_float+0x22a>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	07d8      	lsls	r0, r3, #31
 8009954:	d510      	bpl.n	8009978 <_printf_float+0x24c>
 8009956:	ee18 3a10 	vmov	r3, s16
 800995a:	4652      	mov	r2, sl
 800995c:	4631      	mov	r1, r6
 800995e:	4628      	mov	r0, r5
 8009960:	47b8      	blx	r7
 8009962:	3001      	adds	r0, #1
 8009964:	f43f af41 	beq.w	80097ea <_printf_float+0xbe>
 8009968:	f04f 0800 	mov.w	r8, #0
 800996c:	f104 091a 	add.w	r9, r4, #26
 8009970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009972:	3b01      	subs	r3, #1
 8009974:	4543      	cmp	r3, r8
 8009976:	dc09      	bgt.n	800998c <_printf_float+0x260>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	079b      	lsls	r3, r3, #30
 800997c:	f100 8107 	bmi.w	8009b8e <_printf_float+0x462>
 8009980:	68e0      	ldr	r0, [r4, #12]
 8009982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009984:	4298      	cmp	r0, r3
 8009986:	bfb8      	it	lt
 8009988:	4618      	movlt	r0, r3
 800998a:	e730      	b.n	80097ee <_printf_float+0xc2>
 800998c:	2301      	movs	r3, #1
 800998e:	464a      	mov	r2, r9
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f af27 	beq.w	80097ea <_printf_float+0xbe>
 800999c:	f108 0801 	add.w	r8, r8, #1
 80099a0:	e7e6      	b.n	8009970 <_printf_float+0x244>
 80099a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dc39      	bgt.n	8009a1c <_printf_float+0x2f0>
 80099a8:	4a1b      	ldr	r2, [pc, #108]	; (8009a18 <_printf_float+0x2ec>)
 80099aa:	2301      	movs	r3, #1
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af19 	beq.w	80097ea <_printf_float+0xbe>
 80099b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80099bc:	4313      	orrs	r3, r2
 80099be:	d102      	bne.n	80099c6 <_printf_float+0x29a>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07d9      	lsls	r1, r3, #31
 80099c4:	d5d8      	bpl.n	8009978 <_printf_float+0x24c>
 80099c6:	ee18 3a10 	vmov	r3, s16
 80099ca:	4652      	mov	r2, sl
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f af09 	beq.w	80097ea <_printf_float+0xbe>
 80099d8:	f04f 0900 	mov.w	r9, #0
 80099dc:	f104 0a1a 	add.w	sl, r4, #26
 80099e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e2:	425b      	negs	r3, r3
 80099e4:	454b      	cmp	r3, r9
 80099e6:	dc01      	bgt.n	80099ec <_printf_float+0x2c0>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	e792      	b.n	8009912 <_printf_float+0x1e6>
 80099ec:	2301      	movs	r3, #1
 80099ee:	4652      	mov	r2, sl
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f aef7 	beq.w	80097ea <_printf_float+0xbe>
 80099fc:	f109 0901 	add.w	r9, r9, #1
 8009a00:	e7ee      	b.n	80099e0 <_printf_float+0x2b4>
 8009a02:	bf00      	nop
 8009a04:	7fefffff 	.word	0x7fefffff
 8009a08:	0800c33f 	.word	0x0800c33f
 8009a0c:	0800c343 	.word	0x0800c343
 8009a10:	0800c347 	.word	0x0800c347
 8009a14:	0800c34b 	.word	0x0800c34b
 8009a18:	0800c34f 	.word	0x0800c34f
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bfa8      	it	ge
 8009a24:	461a      	movge	r2, r3
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	4691      	mov	r9, r2
 8009a2a:	dc37      	bgt.n	8009a9c <_printf_float+0x370>
 8009a2c:	f04f 0b00 	mov.w	fp, #0
 8009a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a34:	f104 021a 	add.w	r2, r4, #26
 8009a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a3a:	9305      	str	r3, [sp, #20]
 8009a3c:	eba3 0309 	sub.w	r3, r3, r9
 8009a40:	455b      	cmp	r3, fp
 8009a42:	dc33      	bgt.n	8009aac <_printf_float+0x380>
 8009a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	db3b      	blt.n	8009ac4 <_printf_float+0x398>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	07da      	lsls	r2, r3, #31
 8009a50:	d438      	bmi.n	8009ac4 <_printf_float+0x398>
 8009a52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a56:	eba2 0903 	sub.w	r9, r2, r3
 8009a5a:	9b05      	ldr	r3, [sp, #20]
 8009a5c:	1ad2      	subs	r2, r2, r3
 8009a5e:	4591      	cmp	r9, r2
 8009a60:	bfa8      	it	ge
 8009a62:	4691      	movge	r9, r2
 8009a64:	f1b9 0f00 	cmp.w	r9, #0
 8009a68:	dc35      	bgt.n	8009ad6 <_printf_float+0x3aa>
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a72:	f104 0a1a 	add.w	sl, r4, #26
 8009a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	eba3 0309 	sub.w	r3, r3, r9
 8009a80:	4543      	cmp	r3, r8
 8009a82:	f77f af79 	ble.w	8009978 <_printf_float+0x24c>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	f43f aeaa 	beq.w	80097ea <_printf_float+0xbe>
 8009a96:	f108 0801 	add.w	r8, r8, #1
 8009a9a:	e7ec      	b.n	8009a76 <_printf_float+0x34a>
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	47b8      	blx	r7
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	d1c0      	bne.n	8009a2c <_printf_float+0x300>
 8009aaa:	e69e      	b.n	80097ea <_printf_float+0xbe>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	9205      	str	r2, [sp, #20]
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f ae97 	beq.w	80097ea <_printf_float+0xbe>
 8009abc:	9a05      	ldr	r2, [sp, #20]
 8009abe:	f10b 0b01 	add.w	fp, fp, #1
 8009ac2:	e7b9      	b.n	8009a38 <_printf_float+0x30c>
 8009ac4:	ee18 3a10 	vmov	r3, s16
 8009ac8:	4652      	mov	r2, sl
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d1be      	bne.n	8009a52 <_printf_float+0x326>
 8009ad4:	e689      	b.n	80097ea <_printf_float+0xbe>
 8009ad6:	9a05      	ldr	r2, [sp, #20]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	4442      	add	r2, r8
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d1c1      	bne.n	8009a6a <_printf_float+0x33e>
 8009ae6:	e680      	b.n	80097ea <_printf_float+0xbe>
 8009ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aea:	2a01      	cmp	r2, #1
 8009aec:	dc01      	bgt.n	8009af2 <_printf_float+0x3c6>
 8009aee:	07db      	lsls	r3, r3, #31
 8009af0:	d53a      	bpl.n	8009b68 <_printf_float+0x43c>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4642      	mov	r2, r8
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f ae74 	beq.w	80097ea <_printf_float+0xbe>
 8009b02:	ee18 3a10 	vmov	r3, s16
 8009b06:	4652      	mov	r2, sl
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b8      	blx	r7
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f43f ae6b 	beq.w	80097ea <_printf_float+0xbe>
 8009b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009b20:	f7f6 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b24:	b9d8      	cbnz	r0, 8009b5e <_printf_float+0x432>
 8009b26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b2a:	f108 0201 	add.w	r2, r8, #1
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	d10e      	bne.n	8009b56 <_printf_float+0x42a>
 8009b38:	e657      	b.n	80097ea <_printf_float+0xbe>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f ae50 	beq.w	80097ea <_printf_float+0xbe>
 8009b4a:	f108 0801 	add.w	r8, r8, #1
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	3b01      	subs	r3, #1
 8009b52:	4543      	cmp	r3, r8
 8009b54:	dcf1      	bgt.n	8009b3a <_printf_float+0x40e>
 8009b56:	464b      	mov	r3, r9
 8009b58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b5c:	e6da      	b.n	8009914 <_printf_float+0x1e8>
 8009b5e:	f04f 0800 	mov.w	r8, #0
 8009b62:	f104 0a1a 	add.w	sl, r4, #26
 8009b66:	e7f2      	b.n	8009b4e <_printf_float+0x422>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4642      	mov	r2, r8
 8009b6c:	e7df      	b.n	8009b2e <_printf_float+0x402>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	464a      	mov	r2, r9
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f43f ae36 	beq.w	80097ea <_printf_float+0xbe>
 8009b7e:	f108 0801 	add.w	r8, r8, #1
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b86:	1a5b      	subs	r3, r3, r1
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	dcf0      	bgt.n	8009b6e <_printf_float+0x442>
 8009b8c:	e6f8      	b.n	8009980 <_printf_float+0x254>
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	f104 0919 	add.w	r9, r4, #25
 8009b96:	e7f4      	b.n	8009b82 <_printf_float+0x456>

08009b98 <_printf_common>:
 8009b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	4699      	mov	r9, r3
 8009ba0:	688a      	ldr	r2, [r1, #8]
 8009ba2:	690b      	ldr	r3, [r1, #16]
 8009ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bfb8      	it	lt
 8009bac:	4613      	movlt	r3, r2
 8009bae:	6033      	str	r3, [r6, #0]
 8009bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	b10a      	cbz	r2, 8009bbe <_printf_common+0x26>
 8009bba:	3301      	adds	r3, #1
 8009bbc:	6033      	str	r3, [r6, #0]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	0699      	lsls	r1, r3, #26
 8009bc2:	bf42      	ittt	mi
 8009bc4:	6833      	ldrmi	r3, [r6, #0]
 8009bc6:	3302      	addmi	r3, #2
 8009bc8:	6033      	strmi	r3, [r6, #0]
 8009bca:	6825      	ldr	r5, [r4, #0]
 8009bcc:	f015 0506 	ands.w	r5, r5, #6
 8009bd0:	d106      	bne.n	8009be0 <_printf_common+0x48>
 8009bd2:	f104 0a19 	add.w	sl, r4, #25
 8009bd6:	68e3      	ldr	r3, [r4, #12]
 8009bd8:	6832      	ldr	r2, [r6, #0]
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	42ab      	cmp	r3, r5
 8009bde:	dc26      	bgt.n	8009c2e <_printf_common+0x96>
 8009be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009be4:	1e13      	subs	r3, r2, #0
 8009be6:	6822      	ldr	r2, [r4, #0]
 8009be8:	bf18      	it	ne
 8009bea:	2301      	movne	r3, #1
 8009bec:	0692      	lsls	r2, r2, #26
 8009bee:	d42b      	bmi.n	8009c48 <_printf_common+0xb0>
 8009bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	47c0      	blx	r8
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d01e      	beq.n	8009c3c <_printf_common+0xa4>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	6922      	ldr	r2, [r4, #16]
 8009c02:	f003 0306 	and.w	r3, r3, #6
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	bf02      	ittt	eq
 8009c0a:	68e5      	ldreq	r5, [r4, #12]
 8009c0c:	6833      	ldreq	r3, [r6, #0]
 8009c0e:	1aed      	subeq	r5, r5, r3
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	bf0c      	ite	eq
 8009c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c18:	2500      	movne	r5, #0
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	bfc4      	itt	gt
 8009c1e:	1a9b      	subgt	r3, r3, r2
 8009c20:	18ed      	addgt	r5, r5, r3
 8009c22:	2600      	movs	r6, #0
 8009c24:	341a      	adds	r4, #26
 8009c26:	42b5      	cmp	r5, r6
 8009c28:	d11a      	bne.n	8009c60 <_printf_common+0xc8>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e008      	b.n	8009c40 <_printf_common+0xa8>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	4652      	mov	r2, sl
 8009c32:	4649      	mov	r1, r9
 8009c34:	4638      	mov	r0, r7
 8009c36:	47c0      	blx	r8
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d103      	bne.n	8009c44 <_printf_common+0xac>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	3501      	adds	r5, #1
 8009c46:	e7c6      	b.n	8009bd6 <_printf_common+0x3e>
 8009c48:	18e1      	adds	r1, r4, r3
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	2030      	movs	r0, #48	; 0x30
 8009c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c52:	4422      	add	r2, r4
 8009c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	e7c7      	b.n	8009bf0 <_printf_common+0x58>
 8009c60:	2301      	movs	r3, #1
 8009c62:	4622      	mov	r2, r4
 8009c64:	4649      	mov	r1, r9
 8009c66:	4638      	mov	r0, r7
 8009c68:	47c0      	blx	r8
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d0e6      	beq.n	8009c3c <_printf_common+0xa4>
 8009c6e:	3601      	adds	r6, #1
 8009c70:	e7d9      	b.n	8009c26 <_printf_common+0x8e>
	...

08009c74 <_printf_i>:
 8009c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	7e0f      	ldrb	r7, [r1, #24]
 8009c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c7c:	2f78      	cmp	r7, #120	; 0x78
 8009c7e:	4691      	mov	r9, r2
 8009c80:	4680      	mov	r8, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	469a      	mov	sl, r3
 8009c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c8a:	d807      	bhi.n	8009c9c <_printf_i+0x28>
 8009c8c:	2f62      	cmp	r7, #98	; 0x62
 8009c8e:	d80a      	bhi.n	8009ca6 <_printf_i+0x32>
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	f000 80d4 	beq.w	8009e3e <_printf_i+0x1ca>
 8009c96:	2f58      	cmp	r7, #88	; 0x58
 8009c98:	f000 80c0 	beq.w	8009e1c <_printf_i+0x1a8>
 8009c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ca4:	e03a      	b.n	8009d1c <_printf_i+0xa8>
 8009ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009caa:	2b15      	cmp	r3, #21
 8009cac:	d8f6      	bhi.n	8009c9c <_printf_i+0x28>
 8009cae:	a101      	add	r1, pc, #4	; (adr r1, 8009cb4 <_printf_i+0x40>)
 8009cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cb4:	08009d0d 	.word	0x08009d0d
 8009cb8:	08009d21 	.word	0x08009d21
 8009cbc:	08009c9d 	.word	0x08009c9d
 8009cc0:	08009c9d 	.word	0x08009c9d
 8009cc4:	08009c9d 	.word	0x08009c9d
 8009cc8:	08009c9d 	.word	0x08009c9d
 8009ccc:	08009d21 	.word	0x08009d21
 8009cd0:	08009c9d 	.word	0x08009c9d
 8009cd4:	08009c9d 	.word	0x08009c9d
 8009cd8:	08009c9d 	.word	0x08009c9d
 8009cdc:	08009c9d 	.word	0x08009c9d
 8009ce0:	08009e25 	.word	0x08009e25
 8009ce4:	08009d4d 	.word	0x08009d4d
 8009ce8:	08009ddf 	.word	0x08009ddf
 8009cec:	08009c9d 	.word	0x08009c9d
 8009cf0:	08009c9d 	.word	0x08009c9d
 8009cf4:	08009e47 	.word	0x08009e47
 8009cf8:	08009c9d 	.word	0x08009c9d
 8009cfc:	08009d4d 	.word	0x08009d4d
 8009d00:	08009c9d 	.word	0x08009c9d
 8009d04:	08009c9d 	.word	0x08009c9d
 8009d08:	08009de7 	.word	0x08009de7
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	602a      	str	r2, [r5, #0]
 8009d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e09f      	b.n	8009e60 <_printf_i+0x1ec>
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	0607      	lsls	r7, r0, #24
 8009d26:	f103 0104 	add.w	r1, r3, #4
 8009d2a:	6029      	str	r1, [r5, #0]
 8009d2c:	d501      	bpl.n	8009d32 <_printf_i+0xbe>
 8009d2e:	681e      	ldr	r6, [r3, #0]
 8009d30:	e003      	b.n	8009d3a <_printf_i+0xc6>
 8009d32:	0646      	lsls	r6, r0, #25
 8009d34:	d5fb      	bpl.n	8009d2e <_printf_i+0xba>
 8009d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	da03      	bge.n	8009d46 <_printf_i+0xd2>
 8009d3e:	232d      	movs	r3, #45	; 0x2d
 8009d40:	4276      	negs	r6, r6
 8009d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d46:	485a      	ldr	r0, [pc, #360]	; (8009eb0 <_printf_i+0x23c>)
 8009d48:	230a      	movs	r3, #10
 8009d4a:	e012      	b.n	8009d72 <_printf_i+0xfe>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	1d19      	adds	r1, r3, #4
 8009d52:	6029      	str	r1, [r5, #0]
 8009d54:	0605      	lsls	r5, r0, #24
 8009d56:	d501      	bpl.n	8009d5c <_printf_i+0xe8>
 8009d58:	681e      	ldr	r6, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <_printf_i+0xee>
 8009d5c:	0641      	lsls	r1, r0, #25
 8009d5e:	d5fb      	bpl.n	8009d58 <_printf_i+0xe4>
 8009d60:	881e      	ldrh	r6, [r3, #0]
 8009d62:	4853      	ldr	r0, [pc, #332]	; (8009eb0 <_printf_i+0x23c>)
 8009d64:	2f6f      	cmp	r7, #111	; 0x6f
 8009d66:	bf0c      	ite	eq
 8009d68:	2308      	moveq	r3, #8
 8009d6a:	230a      	movne	r3, #10
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d72:	6865      	ldr	r5, [r4, #4]
 8009d74:	60a5      	str	r5, [r4, #8]
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	bfa2      	ittt	ge
 8009d7a:	6821      	ldrge	r1, [r4, #0]
 8009d7c:	f021 0104 	bicge.w	r1, r1, #4
 8009d80:	6021      	strge	r1, [r4, #0]
 8009d82:	b90e      	cbnz	r6, 8009d88 <_printf_i+0x114>
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	d04b      	beq.n	8009e20 <_printf_i+0x1ac>
 8009d88:	4615      	mov	r5, r2
 8009d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d92:	5dc7      	ldrb	r7, [r0, r7]
 8009d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d98:	4637      	mov	r7, r6
 8009d9a:	42bb      	cmp	r3, r7
 8009d9c:	460e      	mov	r6, r1
 8009d9e:	d9f4      	bls.n	8009d8a <_printf_i+0x116>
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	d10b      	bne.n	8009dbc <_printf_i+0x148>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	07de      	lsls	r6, r3, #31
 8009da8:	d508      	bpl.n	8009dbc <_printf_i+0x148>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6861      	ldr	r1, [r4, #4]
 8009dae:	4299      	cmp	r1, r3
 8009db0:	bfde      	ittt	le
 8009db2:	2330      	movle	r3, #48	; 0x30
 8009db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dbc:	1b52      	subs	r2, r2, r5
 8009dbe:	6122      	str	r2, [r4, #16]
 8009dc0:	f8cd a000 	str.w	sl, [sp]
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	aa03      	add	r2, sp, #12
 8009dc8:	4621      	mov	r1, r4
 8009dca:	4640      	mov	r0, r8
 8009dcc:	f7ff fee4 	bl	8009b98 <_printf_common>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d14a      	bne.n	8009e6a <_printf_i+0x1f6>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b004      	add	sp, #16
 8009dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	f043 0320 	orr.w	r3, r3, #32
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	4833      	ldr	r0, [pc, #204]	; (8009eb4 <_printf_i+0x240>)
 8009de8:	2778      	movs	r7, #120	; 0x78
 8009dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	6829      	ldr	r1, [r5, #0]
 8009df2:	061f      	lsls	r7, r3, #24
 8009df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009df8:	d402      	bmi.n	8009e00 <_printf_i+0x18c>
 8009dfa:	065f      	lsls	r7, r3, #25
 8009dfc:	bf48      	it	mi
 8009dfe:	b2b6      	uxthmi	r6, r6
 8009e00:	07df      	lsls	r7, r3, #31
 8009e02:	bf48      	it	mi
 8009e04:	f043 0320 	orrmi.w	r3, r3, #32
 8009e08:	6029      	str	r1, [r5, #0]
 8009e0a:	bf48      	it	mi
 8009e0c:	6023      	strmi	r3, [r4, #0]
 8009e0e:	b91e      	cbnz	r6, 8009e18 <_printf_i+0x1a4>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	f023 0320 	bic.w	r3, r3, #32
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	2310      	movs	r3, #16
 8009e1a:	e7a7      	b.n	8009d6c <_printf_i+0xf8>
 8009e1c:	4824      	ldr	r0, [pc, #144]	; (8009eb0 <_printf_i+0x23c>)
 8009e1e:	e7e4      	b.n	8009dea <_printf_i+0x176>
 8009e20:	4615      	mov	r5, r2
 8009e22:	e7bd      	b.n	8009da0 <_printf_i+0x12c>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	6826      	ldr	r6, [r4, #0]
 8009e28:	6961      	ldr	r1, [r4, #20]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6028      	str	r0, [r5, #0]
 8009e2e:	0635      	lsls	r5, r6, #24
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x1c4>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1ca>
 8009e38:	0670      	lsls	r0, r6, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x1c0>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	4615      	mov	r5, r2
 8009e44:	e7bc      	b.n	8009dc0 <_printf_i+0x14c>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	681d      	ldr	r5, [r3, #0]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 f9bc 	bl	80001d0 <memchr>
 8009e58:	b108      	cbz	r0, 8009e5e <_printf_i+0x1ea>
 8009e5a:	1b40      	subs	r0, r0, r5
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	2300      	movs	r3, #0
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	e7aa      	b.n	8009dc0 <_printf_i+0x14c>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	47d0      	blx	sl
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ad      	beq.n	8009dd4 <_printf_i+0x160>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d413      	bmi.n	8009ea6 <_printf_i+0x232>
 8009e7e:	68e0      	ldr	r0, [r4, #12]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bfb8      	it	lt
 8009e86:	4618      	movlt	r0, r3
 8009e88:	e7a6      	b.n	8009dd8 <_printf_i+0x164>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	47d0      	blx	sl
 8009e94:	3001      	adds	r0, #1
 8009e96:	d09d      	beq.n	8009dd4 <_printf_i+0x160>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dcf2      	bgt.n	8009e8a <_printf_i+0x216>
 8009ea4:	e7eb      	b.n	8009e7e <_printf_i+0x20a>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	f104 0619 	add.w	r6, r4, #25
 8009eac:	e7f5      	b.n	8009e9a <_printf_i+0x226>
 8009eae:	bf00      	nop
 8009eb0:	0800c351 	.word	0x0800c351
 8009eb4:	0800c362 	.word	0x0800c362

08009eb8 <std>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8009ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ec6:	6083      	str	r3, [r0, #8]
 8009ec8:	8181      	strh	r1, [r0, #12]
 8009eca:	6643      	str	r3, [r0, #100]	; 0x64
 8009ecc:	81c2      	strh	r2, [r0, #14]
 8009ece:	6183      	str	r3, [r0, #24]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	2208      	movs	r2, #8
 8009ed4:	305c      	adds	r0, #92	; 0x5c
 8009ed6:	f000 f9ff 	bl	800a2d8 <memset>
 8009eda:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <std+0x58>)
 8009edc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ede:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <std+0x5c>)
 8009ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <std+0x60>)
 8009ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ee6:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <std+0x64>)
 8009ee8:	6323      	str	r3, [r4, #48]	; 0x30
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <std+0x68>)
 8009eec:	6224      	str	r4, [r4, #32]
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d006      	beq.n	8009f00 <std+0x48>
 8009ef2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009ef6:	4294      	cmp	r4, r2
 8009ef8:	d002      	beq.n	8009f00 <std+0x48>
 8009efa:	33d0      	adds	r3, #208	; 0xd0
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d105      	bne.n	8009f0c <std+0x54>
 8009f00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f08:	f000 ba62 	b.w	800a3d0 <__retarget_lock_init_recursive>
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	bf00      	nop
 8009f10:	0800a129 	.word	0x0800a129
 8009f14:	0800a14b 	.word	0x0800a14b
 8009f18:	0800a183 	.word	0x0800a183
 8009f1c:	0800a1a7 	.word	0x0800a1a7
 8009f20:	20000760 	.word	0x20000760

08009f24 <stdio_exit_handler>:
 8009f24:	4a02      	ldr	r2, [pc, #8]	; (8009f30 <stdio_exit_handler+0xc>)
 8009f26:	4903      	ldr	r1, [pc, #12]	; (8009f34 <stdio_exit_handler+0x10>)
 8009f28:	4803      	ldr	r0, [pc, #12]	; (8009f38 <stdio_exit_handler+0x14>)
 8009f2a:	f000 b869 	b.w	800a000 <_fwalk_sglue>
 8009f2e:	bf00      	nop
 8009f30:	20000030 	.word	0x20000030
 8009f34:	0800bd59 	.word	0x0800bd59
 8009f38:	2000003c 	.word	0x2000003c

08009f3c <cleanup_stdio>:
 8009f3c:	6841      	ldr	r1, [r0, #4]
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <cleanup_stdio+0x34>)
 8009f40:	4299      	cmp	r1, r3
 8009f42:	b510      	push	{r4, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	d001      	beq.n	8009f4c <cleanup_stdio+0x10>
 8009f48:	f001 ff06 	bl	800bd58 <_fflush_r>
 8009f4c:	68a1      	ldr	r1, [r4, #8]
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <cleanup_stdio+0x38>)
 8009f50:	4299      	cmp	r1, r3
 8009f52:	d002      	beq.n	8009f5a <cleanup_stdio+0x1e>
 8009f54:	4620      	mov	r0, r4
 8009f56:	f001 feff 	bl	800bd58 <_fflush_r>
 8009f5a:	68e1      	ldr	r1, [r4, #12]
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <cleanup_stdio+0x3c>)
 8009f5e:	4299      	cmp	r1, r3
 8009f60:	d004      	beq.n	8009f6c <cleanup_stdio+0x30>
 8009f62:	4620      	mov	r0, r4
 8009f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f68:	f001 bef6 	b.w	800bd58 <_fflush_r>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000760 	.word	0x20000760
 8009f74:	200007c8 	.word	0x200007c8
 8009f78:	20000830 	.word	0x20000830

08009f7c <global_stdio_init.part.0>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <global_stdio_init.part.0+0x30>)
 8009f80:	4c0b      	ldr	r4, [pc, #44]	; (8009fb0 <global_stdio_init.part.0+0x34>)
 8009f82:	4a0c      	ldr	r2, [pc, #48]	; (8009fb4 <global_stdio_init.part.0+0x38>)
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	4620      	mov	r0, r4
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2104      	movs	r1, #4
 8009f8c:	f7ff ff94 	bl	8009eb8 <std>
 8009f90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f94:	2201      	movs	r2, #1
 8009f96:	2109      	movs	r1, #9
 8009f98:	f7ff ff8e 	bl	8009eb8 <std>
 8009f9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa6:	2112      	movs	r1, #18
 8009fa8:	f7ff bf86 	b.w	8009eb8 <std>
 8009fac:	20000898 	.word	0x20000898
 8009fb0:	20000760 	.word	0x20000760
 8009fb4:	08009f25 	.word	0x08009f25

08009fb8 <__sfp_lock_acquire>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__sfp_lock_acquire+0x8>)
 8009fba:	f000 ba0a 	b.w	800a3d2 <__retarget_lock_acquire_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	200008a1 	.word	0x200008a1

08009fc4 <__sfp_lock_release>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sfp_lock_release+0x8>)
 8009fc6:	f000 ba05 	b.w	800a3d4 <__retarget_lock_release_recursive>
 8009fca:	bf00      	nop
 8009fcc:	200008a1 	.word	0x200008a1

08009fd0 <__sinit>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	f7ff fff0 	bl	8009fb8 <__sfp_lock_acquire>
 8009fd8:	6a23      	ldr	r3, [r4, #32]
 8009fda:	b11b      	cbz	r3, 8009fe4 <__sinit+0x14>
 8009fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe0:	f7ff bff0 	b.w	8009fc4 <__sfp_lock_release>
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <__sinit+0x28>)
 8009fe6:	6223      	str	r3, [r4, #32]
 8009fe8:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <__sinit+0x2c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1f5      	bne.n	8009fdc <__sinit+0xc>
 8009ff0:	f7ff ffc4 	bl	8009f7c <global_stdio_init.part.0>
 8009ff4:	e7f2      	b.n	8009fdc <__sinit+0xc>
 8009ff6:	bf00      	nop
 8009ff8:	08009f3d 	.word	0x08009f3d
 8009ffc:	20000898 	.word	0x20000898

0800a000 <_fwalk_sglue>:
 800a000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a004:	4607      	mov	r7, r0
 800a006:	4688      	mov	r8, r1
 800a008:	4614      	mov	r4, r2
 800a00a:	2600      	movs	r6, #0
 800a00c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a010:	f1b9 0901 	subs.w	r9, r9, #1
 800a014:	d505      	bpl.n	800a022 <_fwalk_sglue+0x22>
 800a016:	6824      	ldr	r4, [r4, #0]
 800a018:	2c00      	cmp	r4, #0
 800a01a:	d1f7      	bne.n	800a00c <_fwalk_sglue+0xc>
 800a01c:	4630      	mov	r0, r6
 800a01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d907      	bls.n	800a038 <_fwalk_sglue+0x38>
 800a028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a02c:	3301      	adds	r3, #1
 800a02e:	d003      	beq.n	800a038 <_fwalk_sglue+0x38>
 800a030:	4629      	mov	r1, r5
 800a032:	4638      	mov	r0, r7
 800a034:	47c0      	blx	r8
 800a036:	4306      	orrs	r6, r0
 800a038:	3568      	adds	r5, #104	; 0x68
 800a03a:	e7e9      	b.n	800a010 <_fwalk_sglue+0x10>

0800a03c <iprintf>:
 800a03c:	b40f      	push	{r0, r1, r2, r3}
 800a03e:	b507      	push	{r0, r1, r2, lr}
 800a040:	4906      	ldr	r1, [pc, #24]	; (800a05c <iprintf+0x20>)
 800a042:	ab04      	add	r3, sp, #16
 800a044:	6808      	ldr	r0, [r1, #0]
 800a046:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04a:	6881      	ldr	r1, [r0, #8]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f001 fce3 	bl	800ba18 <_vfiprintf_r>
 800a052:	b003      	add	sp, #12
 800a054:	f85d eb04 	ldr.w	lr, [sp], #4
 800a058:	b004      	add	sp, #16
 800a05a:	4770      	bx	lr
 800a05c:	20000088 	.word	0x20000088

0800a060 <putchar>:
 800a060:	4b02      	ldr	r3, [pc, #8]	; (800a06c <putchar+0xc>)
 800a062:	4601      	mov	r1, r0
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	6882      	ldr	r2, [r0, #8]
 800a068:	f001 bf00 	b.w	800be6c <_putc_r>
 800a06c:	20000088 	.word	0x20000088

0800a070 <_puts_r>:
 800a070:	6a03      	ldr	r3, [r0, #32]
 800a072:	b570      	push	{r4, r5, r6, lr}
 800a074:	6884      	ldr	r4, [r0, #8]
 800a076:	4605      	mov	r5, r0
 800a078:	460e      	mov	r6, r1
 800a07a:	b90b      	cbnz	r3, 800a080 <_puts_r+0x10>
 800a07c:	f7ff ffa8 	bl	8009fd0 <__sinit>
 800a080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a082:	07db      	lsls	r3, r3, #31
 800a084:	d405      	bmi.n	800a092 <_puts_r+0x22>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	0598      	lsls	r0, r3, #22
 800a08a:	d402      	bmi.n	800a092 <_puts_r+0x22>
 800a08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a08e:	f000 f9a0 	bl	800a3d2 <__retarget_lock_acquire_recursive>
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	0719      	lsls	r1, r3, #28
 800a096:	d513      	bpl.n	800a0c0 <_puts_r+0x50>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	b18b      	cbz	r3, 800a0c0 <_puts_r+0x50>
 800a09c:	3e01      	subs	r6, #1
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	60a3      	str	r3, [r4, #8]
 800a0a8:	b9e9      	cbnz	r1, 800a0e6 <_puts_r+0x76>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da2e      	bge.n	800a10c <_puts_r+0x9c>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	210a      	movs	r1, #10
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f000 f87b 	bl	800a1ae <__swbuf_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d007      	beq.n	800a0cc <_puts_r+0x5c>
 800a0bc:	250a      	movs	r5, #10
 800a0be:	e007      	b.n	800a0d0 <_puts_r+0x60>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f000 f8b0 	bl	800a228 <__swsetup_r>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0e7      	beq.n	800a09c <_puts_r+0x2c>
 800a0cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0d2:	07da      	lsls	r2, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_puts_r+0x72>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	059b      	lsls	r3, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_puts_r+0x72>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0de:	f000 f979 	bl	800a3d4 <__retarget_lock_release_recursive>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da04      	bge.n	800a0f4 <_puts_r+0x84>
 800a0ea:	69a2      	ldr	r2, [r4, #24]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	dc06      	bgt.n	800a0fe <_puts_r+0x8e>
 800a0f0:	290a      	cmp	r1, #10
 800a0f2:	d004      	beq.n	800a0fe <_puts_r+0x8e>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	6022      	str	r2, [r4, #0]
 800a0fa:	7019      	strb	r1, [r3, #0]
 800a0fc:	e7cf      	b.n	800a09e <_puts_r+0x2e>
 800a0fe:	4622      	mov	r2, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f854 	bl	800a1ae <__swbuf_r>
 800a106:	3001      	adds	r0, #1
 800a108:	d1c9      	bne.n	800a09e <_puts_r+0x2e>
 800a10a:	e7df      	b.n	800a0cc <_puts_r+0x5c>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	250a      	movs	r5, #10
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	6022      	str	r2, [r4, #0]
 800a114:	701d      	strb	r5, [r3, #0]
 800a116:	e7db      	b.n	800a0d0 <_puts_r+0x60>

0800a118 <puts>:
 800a118:	4b02      	ldr	r3, [pc, #8]	; (800a124 <puts+0xc>)
 800a11a:	4601      	mov	r1, r0
 800a11c:	6818      	ldr	r0, [r3, #0]
 800a11e:	f7ff bfa7 	b.w	800a070 <_puts_r>
 800a122:	bf00      	nop
 800a124:	20000088 	.word	0x20000088

0800a128 <__sread>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	f000 f900 	bl	800a334 <_read_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	bfab      	itete	ge
 800a138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a13a:	89a3      	ldrhlt	r3, [r4, #12]
 800a13c:	181b      	addge	r3, r3, r0
 800a13e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a142:	bfac      	ite	ge
 800a144:	6563      	strge	r3, [r4, #84]	; 0x54
 800a146:	81a3      	strhlt	r3, [r4, #12]
 800a148:	bd10      	pop	{r4, pc}

0800a14a <__swrite>:
 800a14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14e:	461f      	mov	r7, r3
 800a150:	898b      	ldrh	r3, [r1, #12]
 800a152:	05db      	lsls	r3, r3, #23
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	4616      	mov	r6, r2
 800a15a:	d505      	bpl.n	800a168 <__swrite+0x1e>
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	2302      	movs	r3, #2
 800a162:	2200      	movs	r2, #0
 800a164:	f000 f8d4 	bl	800a310 <_lseek_r>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	4632      	mov	r2, r6
 800a176:	463b      	mov	r3, r7
 800a178:	4628      	mov	r0, r5
 800a17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	f000 b8eb 	b.w	800a358 <_write_r>

0800a182 <__sseek>:
 800a182:	b510      	push	{r4, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18a:	f000 f8c1 	bl	800a310 <_lseek_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	bf15      	itete	ne
 800a194:	6560      	strne	r0, [r4, #84]	; 0x54
 800a196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a19e:	81a3      	strheq	r3, [r4, #12]
 800a1a0:	bf18      	it	ne
 800a1a2:	81a3      	strhne	r3, [r4, #12]
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <__sclose>:
 800a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1aa:	f000 b8a1 	b.w	800a2f0 <_close_r>

0800a1ae <__swbuf_r>:
 800a1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b0:	460e      	mov	r6, r1
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	b118      	cbz	r0, 800a1c0 <__swbuf_r+0x12>
 800a1b8:	6a03      	ldr	r3, [r0, #32]
 800a1ba:	b90b      	cbnz	r3, 800a1c0 <__swbuf_r+0x12>
 800a1bc:	f7ff ff08 	bl	8009fd0 <__sinit>
 800a1c0:	69a3      	ldr	r3, [r4, #24]
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	071a      	lsls	r2, r3, #28
 800a1c8:	d525      	bpl.n	800a216 <__swbuf_r+0x68>
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	b31b      	cbz	r3, 800a216 <__swbuf_r+0x68>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	6922      	ldr	r2, [r4, #16]
 800a1d2:	1a98      	subs	r0, r3, r2
 800a1d4:	6963      	ldr	r3, [r4, #20]
 800a1d6:	b2f6      	uxtb	r6, r6
 800a1d8:	4283      	cmp	r3, r0
 800a1da:	4637      	mov	r7, r6
 800a1dc:	dc04      	bgt.n	800a1e8 <__swbuf_r+0x3a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f001 fdb9 	bl	800bd58 <_fflush_r>
 800a1e6:	b9e0      	cbnz	r0, 800a222 <__swbuf_r+0x74>
 800a1e8:	68a3      	ldr	r3, [r4, #8]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	6022      	str	r2, [r4, #0]
 800a1f4:	701e      	strb	r6, [r3, #0]
 800a1f6:	6962      	ldr	r2, [r4, #20]
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d004      	beq.n	800a208 <__swbuf_r+0x5a>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	07db      	lsls	r3, r3, #31
 800a202:	d506      	bpl.n	800a212 <__swbuf_r+0x64>
 800a204:	2e0a      	cmp	r6, #10
 800a206:	d104      	bne.n	800a212 <__swbuf_r+0x64>
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f001 fda4 	bl	800bd58 <_fflush_r>
 800a210:	b938      	cbnz	r0, 800a222 <__swbuf_r+0x74>
 800a212:	4638      	mov	r0, r7
 800a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a216:	4621      	mov	r1, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	f000 f805 	bl	800a228 <__swsetup_r>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0d5      	beq.n	800a1ce <__swbuf_r+0x20>
 800a222:	f04f 37ff 	mov.w	r7, #4294967295
 800a226:	e7f4      	b.n	800a212 <__swbuf_r+0x64>

0800a228 <__swsetup_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4b2a      	ldr	r3, [pc, #168]	; (800a2d4 <__swsetup_r+0xac>)
 800a22c:	4605      	mov	r5, r0
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	460c      	mov	r4, r1
 800a232:	b118      	cbz	r0, 800a23c <__swsetup_r+0x14>
 800a234:	6a03      	ldr	r3, [r0, #32]
 800a236:	b90b      	cbnz	r3, 800a23c <__swsetup_r+0x14>
 800a238:	f7ff feca 	bl	8009fd0 <__sinit>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a242:	0718      	lsls	r0, r3, #28
 800a244:	d422      	bmi.n	800a28c <__swsetup_r+0x64>
 800a246:	06d9      	lsls	r1, r3, #27
 800a248:	d407      	bmi.n	800a25a <__swsetup_r+0x32>
 800a24a:	2309      	movs	r3, #9
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e034      	b.n	800a2c4 <__swsetup_r+0x9c>
 800a25a:	0758      	lsls	r0, r3, #29
 800a25c:	d512      	bpl.n	800a284 <__swsetup_r+0x5c>
 800a25e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a260:	b141      	cbz	r1, 800a274 <__swsetup_r+0x4c>
 800a262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a266:	4299      	cmp	r1, r3
 800a268:	d002      	beq.n	800a270 <__swsetup_r+0x48>
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 ff2e 	bl	800b0cc <_free_r>
 800a270:	2300      	movs	r3, #0
 800a272:	6363      	str	r3, [r4, #52]	; 0x34
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	2300      	movs	r3, #0
 800a27e:	6063      	str	r3, [r4, #4]
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f043 0308 	orr.w	r3, r3, #8
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	b94b      	cbnz	r3, 800a2a4 <__swsetup_r+0x7c>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a29a:	d003      	beq.n	800a2a4 <__swsetup_r+0x7c>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f001 fda8 	bl	800bdf4 <__smakebuf_r>
 800a2a4:	89a0      	ldrh	r0, [r4, #12]
 800a2a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2aa:	f010 0301 	ands.w	r3, r0, #1
 800a2ae:	d00a      	beq.n	800a2c6 <__swsetup_r+0x9e>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	425b      	negs	r3, r3
 800a2b8:	61a3      	str	r3, [r4, #24]
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	b943      	cbnz	r3, 800a2d0 <__swsetup_r+0xa8>
 800a2be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c2:	d1c4      	bne.n	800a24e <__swsetup_r+0x26>
 800a2c4:	bd38      	pop	{r3, r4, r5, pc}
 800a2c6:	0781      	lsls	r1, r0, #30
 800a2c8:	bf58      	it	pl
 800a2ca:	6963      	ldrpl	r3, [r4, #20]
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	e7f4      	b.n	800a2ba <__swsetup_r+0x92>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e7f7      	b.n	800a2c4 <__swsetup_r+0x9c>
 800a2d4:	20000088 	.word	0x20000088

0800a2d8 <memset>:
 800a2d8:	4402      	add	r2, r0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d100      	bne.n	800a2e2 <memset+0xa>
 800a2e0:	4770      	bx	lr
 800a2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e6:	e7f9      	b.n	800a2dc <memset+0x4>

0800a2e8 <_localeconv_r>:
 800a2e8:	4800      	ldr	r0, [pc, #0]	; (800a2ec <_localeconv_r+0x4>)
 800a2ea:	4770      	bx	lr
 800a2ec:	2000017c 	.word	0x2000017c

0800a2f0 <_close_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d06      	ldr	r5, [pc, #24]	; (800a30c <_close_r+0x1c>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f7f8 fd31 	bl	8002d62 <_close>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_close_r+0x1a>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_close_r+0x1a>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	2000089c 	.word	0x2000089c

0800a310 <_lseek_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_lseek_r+0x20>)
 800a314:	4604      	mov	r4, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f8 fd46 	bl	8002db0 <_lseek>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_lseek_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_lseek_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	2000089c 	.word	0x2000089c

0800a334 <_read_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d07      	ldr	r5, [pc, #28]	; (800a354 <_read_r+0x20>)
 800a338:	4604      	mov	r4, r0
 800a33a:	4608      	mov	r0, r1
 800a33c:	4611      	mov	r1, r2
 800a33e:	2200      	movs	r2, #0
 800a340:	602a      	str	r2, [r5, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f7f8 fcd4 	bl	8002cf0 <_read>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_read_r+0x1e>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_read_r+0x1e>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	2000089c 	.word	0x2000089c

0800a358 <_write_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d07      	ldr	r5, [pc, #28]	; (800a378 <_write_r+0x20>)
 800a35c:	4604      	mov	r4, r0
 800a35e:	4608      	mov	r0, r1
 800a360:	4611      	mov	r1, r2
 800a362:	2200      	movs	r2, #0
 800a364:	602a      	str	r2, [r5, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f7f8 fcdf 	bl	8002d2a <_write>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_write_r+0x1e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_write_r+0x1e>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	2000089c 	.word	0x2000089c

0800a37c <__errno>:
 800a37c:	4b01      	ldr	r3, [pc, #4]	; (800a384 <__errno+0x8>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20000088 	.word	0x20000088

0800a388 <__libc_init_array>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4d0d      	ldr	r5, [pc, #52]	; (800a3c0 <__libc_init_array+0x38>)
 800a38c:	4c0d      	ldr	r4, [pc, #52]	; (800a3c4 <__libc_init_array+0x3c>)
 800a38e:	1b64      	subs	r4, r4, r5
 800a390:	10a4      	asrs	r4, r4, #2
 800a392:	2600      	movs	r6, #0
 800a394:	42a6      	cmp	r6, r4
 800a396:	d109      	bne.n	800a3ac <__libc_init_array+0x24>
 800a398:	4d0b      	ldr	r5, [pc, #44]	; (800a3c8 <__libc_init_array+0x40>)
 800a39a:	4c0c      	ldr	r4, [pc, #48]	; (800a3cc <__libc_init_array+0x44>)
 800a39c:	f001 fe8c 	bl	800c0b8 <_init>
 800a3a0:	1b64      	subs	r4, r4, r5
 800a3a2:	10a4      	asrs	r4, r4, #2
 800a3a4:	2600      	movs	r6, #0
 800a3a6:	42a6      	cmp	r6, r4
 800a3a8:	d105      	bne.n	800a3b6 <__libc_init_array+0x2e>
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b0:	4798      	blx	r3
 800a3b2:	3601      	adds	r6, #1
 800a3b4:	e7ee      	b.n	800a394 <__libc_init_array+0xc>
 800a3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ba:	4798      	blx	r3
 800a3bc:	3601      	adds	r6, #1
 800a3be:	e7f2      	b.n	800a3a6 <__libc_init_array+0x1e>
 800a3c0:	0800c6bc 	.word	0x0800c6bc
 800a3c4:	0800c6bc 	.word	0x0800c6bc
 800a3c8:	0800c6bc 	.word	0x0800c6bc
 800a3cc:	0800c6c0 	.word	0x0800c6c0

0800a3d0 <__retarget_lock_init_recursive>:
 800a3d0:	4770      	bx	lr

0800a3d2 <__retarget_lock_acquire_recursive>:
 800a3d2:	4770      	bx	lr

0800a3d4 <__retarget_lock_release_recursive>:
 800a3d4:	4770      	bx	lr

0800a3d6 <quorem>:
 800a3d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	6903      	ldr	r3, [r0, #16]
 800a3dc:	690c      	ldr	r4, [r1, #16]
 800a3de:	42a3      	cmp	r3, r4
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	db7e      	blt.n	800a4e2 <quorem+0x10c>
 800a3e4:	3c01      	subs	r4, #1
 800a3e6:	f101 0814 	add.w	r8, r1, #20
 800a3ea:	f100 0514 	add.w	r5, r0, #20
 800a3ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	429a      	cmp	r2, r3
 800a400:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a404:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a408:	fbb2 f6f3 	udiv	r6, r2, r3
 800a40c:	d331      	bcc.n	800a472 <quorem+0x9c>
 800a40e:	f04f 0e00 	mov.w	lr, #0
 800a412:	4640      	mov	r0, r8
 800a414:	46ac      	mov	ip, r5
 800a416:	46f2      	mov	sl, lr
 800a418:	f850 2b04 	ldr.w	r2, [r0], #4
 800a41c:	b293      	uxth	r3, r2
 800a41e:	fb06 e303 	mla	r3, r6, r3, lr
 800a422:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a426:	0c1a      	lsrs	r2, r3, #16
 800a428:	b29b      	uxth	r3, r3
 800a42a:	ebaa 0303 	sub.w	r3, sl, r3
 800a42e:	f8dc a000 	ldr.w	sl, [ip]
 800a432:	fa13 f38a 	uxtah	r3, r3, sl
 800a436:	fb06 220e 	mla	r2, r6, lr, r2
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a442:	b292      	uxth	r2, r2
 800a444:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a44c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a450:	4581      	cmp	r9, r0
 800a452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a456:	f84c 3b04 	str.w	r3, [ip], #4
 800a45a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a45e:	d2db      	bcs.n	800a418 <quorem+0x42>
 800a460:	f855 300b 	ldr.w	r3, [r5, fp]
 800a464:	b92b      	cbnz	r3, 800a472 <quorem+0x9c>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	3b04      	subs	r3, #4
 800a46a:	429d      	cmp	r5, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	d32c      	bcc.n	800a4ca <quorem+0xf4>
 800a470:	613c      	str	r4, [r7, #16]
 800a472:	4638      	mov	r0, r7
 800a474:	f001 f9a6 	bl	800b7c4 <__mcmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	db22      	blt.n	800a4c2 <quorem+0xec>
 800a47c:	3601      	adds	r6, #1
 800a47e:	4629      	mov	r1, r5
 800a480:	2000      	movs	r0, #0
 800a482:	f858 2b04 	ldr.w	r2, [r8], #4
 800a486:	f8d1 c000 	ldr.w	ip, [r1]
 800a48a:	b293      	uxth	r3, r2
 800a48c:	1ac3      	subs	r3, r0, r3
 800a48e:	0c12      	lsrs	r2, r2, #16
 800a490:	fa13 f38c 	uxtah	r3, r3, ip
 800a494:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a2:	45c1      	cmp	r9, r8
 800a4a4:	f841 3b04 	str.w	r3, [r1], #4
 800a4a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4ac:	d2e9      	bcs.n	800a482 <quorem+0xac>
 800a4ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4b6:	b922      	cbnz	r2, 800a4c2 <quorem+0xec>
 800a4b8:	3b04      	subs	r3, #4
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	d30a      	bcc.n	800a4d6 <quorem+0x100>
 800a4c0:	613c      	str	r4, [r7, #16]
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ca:	6812      	ldr	r2, [r2, #0]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	d1ce      	bne.n	800a470 <quorem+0x9a>
 800a4d2:	3c01      	subs	r4, #1
 800a4d4:	e7c9      	b.n	800a46a <quorem+0x94>
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	3b04      	subs	r3, #4
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d1f0      	bne.n	800a4c0 <quorem+0xea>
 800a4de:	3c01      	subs	r4, #1
 800a4e0:	e7eb      	b.n	800a4ba <quorem+0xe4>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e7ee      	b.n	800a4c4 <quorem+0xee>
	...

0800a4e8 <_dtoa_r>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ed2d 8b04 	vpush	{d8-d9}
 800a4f0:	69c5      	ldr	r5, [r0, #28]
 800a4f2:	b093      	sub	sp, #76	; 0x4c
 800a4f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4f8:	ec57 6b10 	vmov	r6, r7, d0
 800a4fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a500:	9107      	str	r1, [sp, #28]
 800a502:	4604      	mov	r4, r0
 800a504:	920a      	str	r2, [sp, #40]	; 0x28
 800a506:	930d      	str	r3, [sp, #52]	; 0x34
 800a508:	b975      	cbnz	r5, 800a528 <_dtoa_r+0x40>
 800a50a:	2010      	movs	r0, #16
 800a50c:	f000 fe2a 	bl	800b164 <malloc>
 800a510:	4602      	mov	r2, r0
 800a512:	61e0      	str	r0, [r4, #28]
 800a514:	b920      	cbnz	r0, 800a520 <_dtoa_r+0x38>
 800a516:	4bae      	ldr	r3, [pc, #696]	; (800a7d0 <_dtoa_r+0x2e8>)
 800a518:	21ef      	movs	r1, #239	; 0xef
 800a51a:	48ae      	ldr	r0, [pc, #696]	; (800a7d4 <_dtoa_r+0x2ec>)
 800a51c:	f001 fd1a 	bl	800bf54 <__assert_func>
 800a520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a524:	6005      	str	r5, [r0, #0]
 800a526:	60c5      	str	r5, [r0, #12]
 800a528:	69e3      	ldr	r3, [r4, #28]
 800a52a:	6819      	ldr	r1, [r3, #0]
 800a52c:	b151      	cbz	r1, 800a544 <_dtoa_r+0x5c>
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	604a      	str	r2, [r1, #4]
 800a532:	2301      	movs	r3, #1
 800a534:	4093      	lsls	r3, r2
 800a536:	608b      	str	r3, [r1, #8]
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 ff07 	bl	800b34c <_Bfree>
 800a53e:	69e3      	ldr	r3, [r4, #28]
 800a540:	2200      	movs	r2, #0
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	1e3b      	subs	r3, r7, #0
 800a546:	bfbb      	ittet	lt
 800a548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a54c:	9303      	strlt	r3, [sp, #12]
 800a54e:	2300      	movge	r3, #0
 800a550:	2201      	movlt	r2, #1
 800a552:	bfac      	ite	ge
 800a554:	f8c8 3000 	strge.w	r3, [r8]
 800a558:	f8c8 2000 	strlt.w	r2, [r8]
 800a55c:	4b9e      	ldr	r3, [pc, #632]	; (800a7d8 <_dtoa_r+0x2f0>)
 800a55e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a562:	ea33 0308 	bics.w	r3, r3, r8
 800a566:	d11b      	bne.n	800a5a0 <_dtoa_r+0xb8>
 800a568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a56a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a574:	4333      	orrs	r3, r6
 800a576:	f000 8593 	beq.w	800b0a0 <_dtoa_r+0xbb8>
 800a57a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a57c:	b963      	cbnz	r3, 800a598 <_dtoa_r+0xb0>
 800a57e:	4b97      	ldr	r3, [pc, #604]	; (800a7dc <_dtoa_r+0x2f4>)
 800a580:	e027      	b.n	800a5d2 <_dtoa_r+0xea>
 800a582:	4b97      	ldr	r3, [pc, #604]	; (800a7e0 <_dtoa_r+0x2f8>)
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	3308      	adds	r3, #8
 800a588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	9800      	ldr	r0, [sp, #0]
 800a58e:	b013      	add	sp, #76	; 0x4c
 800a590:	ecbd 8b04 	vpop	{d8-d9}
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	4b90      	ldr	r3, [pc, #576]	; (800a7dc <_dtoa_r+0x2f4>)
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	3303      	adds	r3, #3
 800a59e:	e7f3      	b.n	800a588 <_dtoa_r+0xa0>
 800a5a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	ec51 0b17 	vmov	r0, r1, d7
 800a5aa:	eeb0 8a47 	vmov.f32	s16, s14
 800a5ae:	eef0 8a67 	vmov.f32	s17, s15
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f7f6 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	b160      	cbz	r0, 800a5d6 <_dtoa_r+0xee>
 800a5bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5be:	2301      	movs	r3, #1
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 8568 	beq.w	800b09a <_dtoa_r+0xbb2>
 800a5ca:	4b86      	ldr	r3, [pc, #536]	; (800a7e4 <_dtoa_r+0x2fc>)
 800a5cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	e7da      	b.n	800a58c <_dtoa_r+0xa4>
 800a5d6:	aa10      	add	r2, sp, #64	; 0x40
 800a5d8:	a911      	add	r1, sp, #68	; 0x44
 800a5da:	4620      	mov	r0, r4
 800a5dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a5e0:	eef0 0a68 	vmov.f32	s1, s17
 800a5e4:	f001 f994 	bl	800b910 <__d2b>
 800a5e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a5ec:	4682      	mov	sl, r0
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	d07f      	beq.n	800a6f2 <_dtoa_r+0x20a>
 800a5f2:	ee18 3a90 	vmov	r3, s17
 800a5f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a5fe:	ec51 0b18 	vmov	r0, r1, d8
 800a602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a60a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a60e:	4619      	mov	r1, r3
 800a610:	2200      	movs	r2, #0
 800a612:	4b75      	ldr	r3, [pc, #468]	; (800a7e8 <_dtoa_r+0x300>)
 800a614:	f7f5 fe38 	bl	8000288 <__aeabi_dsub>
 800a618:	a367      	add	r3, pc, #412	; (adr r3, 800a7b8 <_dtoa_r+0x2d0>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f7f5 ffeb 	bl	80005f8 <__aeabi_dmul>
 800a622:	a367      	add	r3, pc, #412	; (adr r3, 800a7c0 <_dtoa_r+0x2d8>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 fe30 	bl	800028c <__adddf3>
 800a62c:	4606      	mov	r6, r0
 800a62e:	4628      	mov	r0, r5
 800a630:	460f      	mov	r7, r1
 800a632:	f7f5 ff77 	bl	8000524 <__aeabi_i2d>
 800a636:	a364      	add	r3, pc, #400	; (adr r3, 800a7c8 <_dtoa_r+0x2e0>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f7f5 fe20 	bl	800028c <__adddf3>
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	f7f6 fa82 	bl	8000b58 <__aeabi_d2iz>
 800a654:	2200      	movs	r2, #0
 800a656:	4683      	mov	fp, r0
 800a658:	2300      	movs	r3, #0
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	f7f6 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800a662:	b148      	cbz	r0, 800a678 <_dtoa_r+0x190>
 800a664:	4658      	mov	r0, fp
 800a666:	f7f5 ff5d 	bl	8000524 <__aeabi_i2d>
 800a66a:	4632      	mov	r2, r6
 800a66c:	463b      	mov	r3, r7
 800a66e:	f7f6 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a672:	b908      	cbnz	r0, 800a678 <_dtoa_r+0x190>
 800a674:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a678:	f1bb 0f16 	cmp.w	fp, #22
 800a67c:	d857      	bhi.n	800a72e <_dtoa_r+0x246>
 800a67e:	4b5b      	ldr	r3, [pc, #364]	; (800a7ec <_dtoa_r+0x304>)
 800a680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	ec51 0b18 	vmov	r0, r1, d8
 800a68c:	f7f6 fa26 	bl	8000adc <__aeabi_dcmplt>
 800a690:	2800      	cmp	r0, #0
 800a692:	d04e      	beq.n	800a732 <_dtoa_r+0x24a>
 800a694:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a698:	2300      	movs	r3, #0
 800a69a:	930c      	str	r3, [sp, #48]	; 0x30
 800a69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a69e:	1b5b      	subs	r3, r3, r5
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	bf45      	ittet	mi
 800a6a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6a8:	9305      	strmi	r3, [sp, #20]
 800a6aa:	2300      	movpl	r3, #0
 800a6ac:	2300      	movmi	r3, #0
 800a6ae:	9206      	str	r2, [sp, #24]
 800a6b0:	bf54      	ite	pl
 800a6b2:	9305      	strpl	r3, [sp, #20]
 800a6b4:	9306      	strmi	r3, [sp, #24]
 800a6b6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ba:	db3c      	blt.n	800a736 <_dtoa_r+0x24e>
 800a6bc:	9b06      	ldr	r3, [sp, #24]
 800a6be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a6c2:	445b      	add	r3, fp
 800a6c4:	9306      	str	r3, [sp, #24]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	9b07      	ldr	r3, [sp, #28]
 800a6cc:	2b09      	cmp	r3, #9
 800a6ce:	d868      	bhi.n	800a7a2 <_dtoa_r+0x2ba>
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	bfc4      	itt	gt
 800a6d4:	3b04      	subgt	r3, #4
 800a6d6:	9307      	strgt	r3, [sp, #28]
 800a6d8:	9b07      	ldr	r3, [sp, #28]
 800a6da:	f1a3 0302 	sub.w	r3, r3, #2
 800a6de:	bfcc      	ite	gt
 800a6e0:	2500      	movgt	r5, #0
 800a6e2:	2501      	movle	r5, #1
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	f200 8085 	bhi.w	800a7f4 <_dtoa_r+0x30c>
 800a6ea:	e8df f003 	tbb	[pc, r3]
 800a6ee:	3b2e      	.short	0x3b2e
 800a6f0:	5839      	.short	0x5839
 800a6f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a6f6:	441d      	add	r5, r3
 800a6f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a6fc:	2b20      	cmp	r3, #32
 800a6fe:	bfc1      	itttt	gt
 800a700:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a704:	fa08 f803 	lslgt.w	r8, r8, r3
 800a708:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a70c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a710:	bfd6      	itet	le
 800a712:	f1c3 0320 	rsble	r3, r3, #32
 800a716:	ea48 0003 	orrgt.w	r0, r8, r3
 800a71a:	fa06 f003 	lslle.w	r0, r6, r3
 800a71e:	f7f5 fef1 	bl	8000504 <__aeabi_ui2d>
 800a722:	2201      	movs	r2, #1
 800a724:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a728:	3d01      	subs	r5, #1
 800a72a:	920e      	str	r2, [sp, #56]	; 0x38
 800a72c:	e76f      	b.n	800a60e <_dtoa_r+0x126>
 800a72e:	2301      	movs	r3, #1
 800a730:	e7b3      	b.n	800a69a <_dtoa_r+0x1b2>
 800a732:	900c      	str	r0, [sp, #48]	; 0x30
 800a734:	e7b2      	b.n	800a69c <_dtoa_r+0x1b4>
 800a736:	9b05      	ldr	r3, [sp, #20]
 800a738:	eba3 030b 	sub.w	r3, r3, fp
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	f1cb 0300 	rsb	r3, fp, #0
 800a742:	9308      	str	r3, [sp, #32]
 800a744:	2300      	movs	r3, #0
 800a746:	930b      	str	r3, [sp, #44]	; 0x2c
 800a748:	e7bf      	b.n	800a6ca <_dtoa_r+0x1e2>
 800a74a:	2300      	movs	r3, #0
 800a74c:	9309      	str	r3, [sp, #36]	; 0x24
 800a74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a750:	2b00      	cmp	r3, #0
 800a752:	dc52      	bgt.n	800a7fa <_dtoa_r+0x312>
 800a754:	2301      	movs	r3, #1
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	461a      	mov	r2, r3
 800a75c:	920a      	str	r2, [sp, #40]	; 0x28
 800a75e:	e00b      	b.n	800a778 <_dtoa_r+0x290>
 800a760:	2301      	movs	r3, #1
 800a762:	e7f3      	b.n	800a74c <_dtoa_r+0x264>
 800a764:	2300      	movs	r3, #0
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a76a:	445b      	add	r3, fp
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	3301      	adds	r3, #1
 800a770:	2b01      	cmp	r3, #1
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	bfb8      	it	lt
 800a776:	2301      	movlt	r3, #1
 800a778:	69e0      	ldr	r0, [r4, #28]
 800a77a:	2100      	movs	r1, #0
 800a77c:	2204      	movs	r2, #4
 800a77e:	f102 0614 	add.w	r6, r2, #20
 800a782:	429e      	cmp	r6, r3
 800a784:	d93d      	bls.n	800a802 <_dtoa_r+0x31a>
 800a786:	6041      	str	r1, [r0, #4]
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fd9f 	bl	800b2cc <_Balloc>
 800a78e:	9000      	str	r0, [sp, #0]
 800a790:	2800      	cmp	r0, #0
 800a792:	d139      	bne.n	800a808 <_dtoa_r+0x320>
 800a794:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <_dtoa_r+0x308>)
 800a796:	4602      	mov	r2, r0
 800a798:	f240 11af 	movw	r1, #431	; 0x1af
 800a79c:	e6bd      	b.n	800a51a <_dtoa_r+0x32>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e7e1      	b.n	800a766 <_dtoa_r+0x27e>
 800a7a2:	2501      	movs	r5, #1
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	9509      	str	r5, [sp, #36]	; 0x24
 800a7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2312      	movs	r3, #18
 800a7b6:	e7d1      	b.n	800a75c <_dtoa_r+0x274>
 800a7b8:	636f4361 	.word	0x636f4361
 800a7bc:	3fd287a7 	.word	0x3fd287a7
 800a7c0:	8b60c8b3 	.word	0x8b60c8b3
 800a7c4:	3fc68a28 	.word	0x3fc68a28
 800a7c8:	509f79fb 	.word	0x509f79fb
 800a7cc:	3fd34413 	.word	0x3fd34413
 800a7d0:	0800c380 	.word	0x0800c380
 800a7d4:	0800c397 	.word	0x0800c397
 800a7d8:	7ff00000 	.word	0x7ff00000
 800a7dc:	0800c37c 	.word	0x0800c37c
 800a7e0:	0800c373 	.word	0x0800c373
 800a7e4:	0800c350 	.word	0x0800c350
 800a7e8:	3ff80000 	.word	0x3ff80000
 800a7ec:	0800c488 	.word	0x0800c488
 800a7f0:	0800c3ef 	.word	0x0800c3ef
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f8:	e7d7      	b.n	800a7aa <_dtoa_r+0x2c2>
 800a7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	9304      	str	r3, [sp, #16]
 800a800:	e7ba      	b.n	800a778 <_dtoa_r+0x290>
 800a802:	3101      	adds	r1, #1
 800a804:	0052      	lsls	r2, r2, #1
 800a806:	e7ba      	b.n	800a77e <_dtoa_r+0x296>
 800a808:	69e3      	ldr	r3, [r4, #28]
 800a80a:	9a00      	ldr	r2, [sp, #0]
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	2b0e      	cmp	r3, #14
 800a812:	f200 80a8 	bhi.w	800a966 <_dtoa_r+0x47e>
 800a816:	2d00      	cmp	r5, #0
 800a818:	f000 80a5 	beq.w	800a966 <_dtoa_r+0x47e>
 800a81c:	f1bb 0f00 	cmp.w	fp, #0
 800a820:	dd38      	ble.n	800a894 <_dtoa_r+0x3ac>
 800a822:	4bc0      	ldr	r3, [pc, #768]	; (800ab24 <_dtoa_r+0x63c>)
 800a824:	f00b 020f 	and.w	r2, fp, #15
 800a828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a82c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a830:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a834:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a838:	d019      	beq.n	800a86e <_dtoa_r+0x386>
 800a83a:	4bbb      	ldr	r3, [pc, #748]	; (800ab28 <_dtoa_r+0x640>)
 800a83c:	ec51 0b18 	vmov	r0, r1, d8
 800a840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a844:	f7f6 f802 	bl	800084c <__aeabi_ddiv>
 800a848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a84c:	f008 080f 	and.w	r8, r8, #15
 800a850:	2503      	movs	r5, #3
 800a852:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ab28 <_dtoa_r+0x640>
 800a856:	f1b8 0f00 	cmp.w	r8, #0
 800a85a:	d10a      	bne.n	800a872 <_dtoa_r+0x38a>
 800a85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a860:	4632      	mov	r2, r6
 800a862:	463b      	mov	r3, r7
 800a864:	f7f5 fff2 	bl	800084c <__aeabi_ddiv>
 800a868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a86c:	e02b      	b.n	800a8c6 <_dtoa_r+0x3de>
 800a86e:	2502      	movs	r5, #2
 800a870:	e7ef      	b.n	800a852 <_dtoa_r+0x36a>
 800a872:	f018 0f01 	tst.w	r8, #1
 800a876:	d008      	beq.n	800a88a <_dtoa_r+0x3a2>
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a880:	f7f5 feba 	bl	80005f8 <__aeabi_dmul>
 800a884:	3501      	adds	r5, #1
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a88e:	f109 0908 	add.w	r9, r9, #8
 800a892:	e7e0      	b.n	800a856 <_dtoa_r+0x36e>
 800a894:	f000 809f 	beq.w	800a9d6 <_dtoa_r+0x4ee>
 800a898:	f1cb 0600 	rsb	r6, fp, #0
 800a89c:	4ba1      	ldr	r3, [pc, #644]	; (800ab24 <_dtoa_r+0x63c>)
 800a89e:	4fa2      	ldr	r7, [pc, #648]	; (800ab28 <_dtoa_r+0x640>)
 800a8a0:	f006 020f 	and.w	r2, r6, #15
 800a8a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	ec51 0b18 	vmov	r0, r1, d8
 800a8b0:	f7f5 fea2 	bl	80005f8 <__aeabi_dmul>
 800a8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b8:	1136      	asrs	r6, r6, #4
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	2502      	movs	r5, #2
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	d17e      	bne.n	800a9c0 <_dtoa_r+0x4d8>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1d0      	bne.n	800a868 <_dtoa_r+0x380>
 800a8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8084 	beq.w	800a9da <_dtoa_r+0x4f2>
 800a8d2:	4b96      	ldr	r3, [pc, #600]	; (800ab2c <_dtoa_r+0x644>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	4649      	mov	r1, r9
 800a8da:	f7f6 f8ff 	bl	8000adc <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d07b      	beq.n	800a9da <_dtoa_r+0x4f2>
 800a8e2:	9b04      	ldr	r3, [sp, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d078      	beq.n	800a9da <_dtoa_r+0x4f2>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dd39      	ble.n	800a962 <_dtoa_r+0x47a>
 800a8ee:	4b90      	ldr	r3, [pc, #576]	; (800ab30 <_dtoa_r+0x648>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	f7f5 fe7f 	bl	80005f8 <__aeabi_dmul>
 800a8fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8fe:	9e01      	ldr	r6, [sp, #4]
 800a900:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a904:	3501      	adds	r5, #1
 800a906:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a90a:	4628      	mov	r0, r5
 800a90c:	f7f5 fe0a 	bl	8000524 <__aeabi_i2d>
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	4b86      	ldr	r3, [pc, #536]	; (800ab34 <_dtoa_r+0x64c>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	f7f5 fcb6 	bl	800028c <__adddf3>
 800a920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	d158      	bne.n	800a9e0 <_dtoa_r+0x4f8>
 800a92e:	4b82      	ldr	r3, [pc, #520]	; (800ab38 <_dtoa_r+0x650>)
 800a930:	2200      	movs	r2, #0
 800a932:	4640      	mov	r0, r8
 800a934:	4649      	mov	r1, r9
 800a936:	f7f5 fca7 	bl	8000288 <__aeabi_dsub>
 800a93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	f7f6 f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 800a946:	2800      	cmp	r0, #0
 800a948:	f040 8296 	bne.w	800ae78 <_dtoa_r+0x990>
 800a94c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a950:	4640      	mov	r0, r8
 800a952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a956:	4649      	mov	r1, r9
 800a958:	f7f6 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f040 8289 	bne.w	800ae74 <_dtoa_r+0x98c>
 800a962:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f2c0 814e 	blt.w	800ac0a <_dtoa_r+0x722>
 800a96e:	f1bb 0f0e 	cmp.w	fp, #14
 800a972:	f300 814a 	bgt.w	800ac0a <_dtoa_r+0x722>
 800a976:	4b6b      	ldr	r3, [pc, #428]	; (800ab24 <_dtoa_r+0x63c>)
 800a978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a97c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	f280 80dc 	bge.w	800ab40 <_dtoa_r+0x658>
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f300 80d8 	bgt.w	800ab40 <_dtoa_r+0x658>
 800a990:	f040 826f 	bne.w	800ae72 <_dtoa_r+0x98a>
 800a994:	4b68      	ldr	r3, [pc, #416]	; (800ab38 <_dtoa_r+0x650>)
 800a996:	2200      	movs	r2, #0
 800a998:	4640      	mov	r0, r8
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7f5 fe2c 	bl	80005f8 <__aeabi_dmul>
 800a9a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9a4:	f7f6 f8ae 	bl	8000b04 <__aeabi_dcmpge>
 800a9a8:	9e04      	ldr	r6, [sp, #16]
 800a9aa:	4637      	mov	r7, r6
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	f040 8245 	bne.w	800ae3c <_dtoa_r+0x954>
 800a9b2:	9d00      	ldr	r5, [sp, #0]
 800a9b4:	2331      	movs	r3, #49	; 0x31
 800a9b6:	f805 3b01 	strb.w	r3, [r5], #1
 800a9ba:	f10b 0b01 	add.w	fp, fp, #1
 800a9be:	e241      	b.n	800ae44 <_dtoa_r+0x95c>
 800a9c0:	07f2      	lsls	r2, r6, #31
 800a9c2:	d505      	bpl.n	800a9d0 <_dtoa_r+0x4e8>
 800a9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c8:	f7f5 fe16 	bl	80005f8 <__aeabi_dmul>
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	1076      	asrs	r6, r6, #1
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	e773      	b.n	800a8be <_dtoa_r+0x3d6>
 800a9d6:	2502      	movs	r5, #2
 800a9d8:	e775      	b.n	800a8c6 <_dtoa_r+0x3de>
 800a9da:	9e04      	ldr	r6, [sp, #16]
 800a9dc:	465f      	mov	r7, fp
 800a9de:	e792      	b.n	800a906 <_dtoa_r+0x41e>
 800a9e0:	9900      	ldr	r1, [sp, #0]
 800a9e2:	4b50      	ldr	r3, [pc, #320]	; (800ab24 <_dtoa_r+0x63c>)
 800a9e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9e8:	4431      	add	r1, r6
 800a9ea:	9102      	str	r1, [sp, #8]
 800a9ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ee:	eeb0 9a47 	vmov.f32	s18, s14
 800a9f2:	eef0 9a67 	vmov.f32	s19, s15
 800a9f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a9fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d044      	beq.n	800aa8c <_dtoa_r+0x5a4>
 800aa02:	494e      	ldr	r1, [pc, #312]	; (800ab3c <_dtoa_r+0x654>)
 800aa04:	2000      	movs	r0, #0
 800aa06:	f7f5 ff21 	bl	800084c <__aeabi_ddiv>
 800aa0a:	ec53 2b19 	vmov	r2, r3, d9
 800aa0e:	f7f5 fc3b 	bl	8000288 <__aeabi_dsub>
 800aa12:	9d00      	ldr	r5, [sp, #0]
 800aa14:	ec41 0b19 	vmov	d9, r0, r1
 800aa18:	4649      	mov	r1, r9
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	f7f6 f89c 	bl	8000b58 <__aeabi_d2iz>
 800aa20:	4606      	mov	r6, r0
 800aa22:	f7f5 fd7f 	bl	8000524 <__aeabi_i2d>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	f7f5 fc2b 	bl	8000288 <__aeabi_dsub>
 800aa32:	3630      	adds	r6, #48	; 0x30
 800aa34:	f805 6b01 	strb.w	r6, [r5], #1
 800aa38:	ec53 2b19 	vmov	r2, r3, d9
 800aa3c:	4680      	mov	r8, r0
 800aa3e:	4689      	mov	r9, r1
 800aa40:	f7f6 f84c 	bl	8000adc <__aeabi_dcmplt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d164      	bne.n	800ab12 <_dtoa_r+0x62a>
 800aa48:	4642      	mov	r2, r8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	4937      	ldr	r1, [pc, #220]	; (800ab2c <_dtoa_r+0x644>)
 800aa4e:	2000      	movs	r0, #0
 800aa50:	f7f5 fc1a 	bl	8000288 <__aeabi_dsub>
 800aa54:	ec53 2b19 	vmov	r2, r3, d9
 800aa58:	f7f6 f840 	bl	8000adc <__aeabi_dcmplt>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f040 80b6 	bne.w	800abce <_dtoa_r+0x6e6>
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	429d      	cmp	r5, r3
 800aa66:	f43f af7c 	beq.w	800a962 <_dtoa_r+0x47a>
 800aa6a:	4b31      	ldr	r3, [pc, #196]	; (800ab30 <_dtoa_r+0x648>)
 800aa6c:	ec51 0b19 	vmov	r0, r1, d9
 800aa70:	2200      	movs	r2, #0
 800aa72:	f7f5 fdc1 	bl	80005f8 <__aeabi_dmul>
 800aa76:	4b2e      	ldr	r3, [pc, #184]	; (800ab30 <_dtoa_r+0x648>)
 800aa78:	ec41 0b19 	vmov	d9, r0, r1
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f5 fdb9 	bl	80005f8 <__aeabi_dmul>
 800aa86:	4680      	mov	r8, r0
 800aa88:	4689      	mov	r9, r1
 800aa8a:	e7c5      	b.n	800aa18 <_dtoa_r+0x530>
 800aa8c:	ec51 0b17 	vmov	r0, r1, d7
 800aa90:	f7f5 fdb2 	bl	80005f8 <__aeabi_dmul>
 800aa94:	9b02      	ldr	r3, [sp, #8]
 800aa96:	9d00      	ldr	r5, [sp, #0]
 800aa98:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa9a:	ec41 0b19 	vmov	d9, r0, r1
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	f7f6 f859 	bl	8000b58 <__aeabi_d2iz>
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	f7f5 fd3c 	bl	8000524 <__aeabi_i2d>
 800aaac:	3630      	adds	r6, #48	; 0x30
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4640      	mov	r0, r8
 800aab4:	4649      	mov	r1, r9
 800aab6:	f7f5 fbe7 	bl	8000288 <__aeabi_dsub>
 800aaba:	f805 6b01 	strb.w	r6, [r5], #1
 800aabe:	9b02      	ldr	r3, [sp, #8]
 800aac0:	429d      	cmp	r5, r3
 800aac2:	4680      	mov	r8, r0
 800aac4:	4689      	mov	r9, r1
 800aac6:	f04f 0200 	mov.w	r2, #0
 800aaca:	d124      	bne.n	800ab16 <_dtoa_r+0x62e>
 800aacc:	4b1b      	ldr	r3, [pc, #108]	; (800ab3c <_dtoa_r+0x654>)
 800aace:	ec51 0b19 	vmov	r0, r1, d9
 800aad2:	f7f5 fbdb 	bl	800028c <__adddf3>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f6 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d173      	bne.n	800abce <_dtoa_r+0x6e6>
 800aae6:	ec53 2b19 	vmov	r2, r3, d9
 800aaea:	4914      	ldr	r1, [pc, #80]	; (800ab3c <_dtoa_r+0x654>)
 800aaec:	2000      	movs	r0, #0
 800aaee:	f7f5 fbcb 	bl	8000288 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	f7f5 ffef 	bl	8000adc <__aeabi_dcmplt>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	f43f af2f 	beq.w	800a962 <_dtoa_r+0x47a>
 800ab04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab06:	1e6b      	subs	r3, r5, #1
 800ab08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab0e:	2b30      	cmp	r3, #48	; 0x30
 800ab10:	d0f8      	beq.n	800ab04 <_dtoa_r+0x61c>
 800ab12:	46bb      	mov	fp, r7
 800ab14:	e04a      	b.n	800abac <_dtoa_r+0x6c4>
 800ab16:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <_dtoa_r+0x648>)
 800ab18:	f7f5 fd6e 	bl	80005f8 <__aeabi_dmul>
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	4689      	mov	r9, r1
 800ab20:	e7bd      	b.n	800aa9e <_dtoa_r+0x5b6>
 800ab22:	bf00      	nop
 800ab24:	0800c488 	.word	0x0800c488
 800ab28:	0800c460 	.word	0x0800c460
 800ab2c:	3ff00000 	.word	0x3ff00000
 800ab30:	40240000 	.word	0x40240000
 800ab34:	401c0000 	.word	0x401c0000
 800ab38:	40140000 	.word	0x40140000
 800ab3c:	3fe00000 	.word	0x3fe00000
 800ab40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab44:	9d00      	ldr	r5, [sp, #0]
 800ab46:	4642      	mov	r2, r8
 800ab48:	464b      	mov	r3, r9
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 fe7d 	bl	800084c <__aeabi_ddiv>
 800ab52:	f7f6 f801 	bl	8000b58 <__aeabi_d2iz>
 800ab56:	9001      	str	r0, [sp, #4]
 800ab58:	f7f5 fce4 	bl	8000524 <__aeabi_i2d>
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	464b      	mov	r3, r9
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 fb8c 	bl	8000288 <__aeabi_dsub>
 800ab70:	9e01      	ldr	r6, [sp, #4]
 800ab72:	9f04      	ldr	r7, [sp, #16]
 800ab74:	3630      	adds	r6, #48	; 0x30
 800ab76:	f805 6b01 	strb.w	r6, [r5], #1
 800ab7a:	9e00      	ldr	r6, [sp, #0]
 800ab7c:	1bae      	subs	r6, r5, r6
 800ab7e:	42b7      	cmp	r7, r6
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	d134      	bne.n	800abf0 <_dtoa_r+0x708>
 800ab86:	f7f5 fb81 	bl	800028c <__adddf3>
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	464b      	mov	r3, r9
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460f      	mov	r7, r1
 800ab92:	f7f5 ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 800ab96:	b9c8      	cbnz	r0, 800abcc <_dtoa_r+0x6e4>
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	f7f5 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 800aba4:	b110      	cbz	r0, 800abac <_dtoa_r+0x6c4>
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	07db      	lsls	r3, r3, #31
 800abaa:	d40f      	bmi.n	800abcc <_dtoa_r+0x6e4>
 800abac:	4651      	mov	r1, sl
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 fbcc 	bl	800b34c <_Bfree>
 800abb4:	2300      	movs	r3, #0
 800abb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abb8:	702b      	strb	r3, [r5, #0]
 800abba:	f10b 0301 	add.w	r3, fp, #1
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f43f ace2 	beq.w	800a58c <_dtoa_r+0xa4>
 800abc8:	601d      	str	r5, [r3, #0]
 800abca:	e4df      	b.n	800a58c <_dtoa_r+0xa4>
 800abcc:	465f      	mov	r7, fp
 800abce:	462b      	mov	r3, r5
 800abd0:	461d      	mov	r5, r3
 800abd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abd6:	2a39      	cmp	r2, #57	; 0x39
 800abd8:	d106      	bne.n	800abe8 <_dtoa_r+0x700>
 800abda:	9a00      	ldr	r2, [sp, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d1f7      	bne.n	800abd0 <_dtoa_r+0x6e8>
 800abe0:	9900      	ldr	r1, [sp, #0]
 800abe2:	2230      	movs	r2, #48	; 0x30
 800abe4:	3701      	adds	r7, #1
 800abe6:	700a      	strb	r2, [r1, #0]
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	3201      	adds	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e790      	b.n	800ab12 <_dtoa_r+0x62a>
 800abf0:	4ba3      	ldr	r3, [pc, #652]	; (800ae80 <_dtoa_r+0x998>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	f7f5 fd00 	bl	80005f8 <__aeabi_dmul>
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	f7f5 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d09e      	beq.n	800ab46 <_dtoa_r+0x65e>
 800ac08:	e7d0      	b.n	800abac <_dtoa_r+0x6c4>
 800ac0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	f000 80ca 	beq.w	800ada6 <_dtoa_r+0x8be>
 800ac12:	9a07      	ldr	r2, [sp, #28]
 800ac14:	2a01      	cmp	r2, #1
 800ac16:	f300 80ad 	bgt.w	800ad74 <_dtoa_r+0x88c>
 800ac1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	f000 80a5 	beq.w	800ad6c <_dtoa_r+0x884>
 800ac22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac26:	9e08      	ldr	r6, [sp, #32]
 800ac28:	9d05      	ldr	r5, [sp, #20]
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	441a      	add	r2, r3
 800ac2e:	9205      	str	r2, [sp, #20]
 800ac30:	9a06      	ldr	r2, [sp, #24]
 800ac32:	2101      	movs	r1, #1
 800ac34:	441a      	add	r2, r3
 800ac36:	4620      	mov	r0, r4
 800ac38:	9206      	str	r2, [sp, #24]
 800ac3a:	f000 fc3d 	bl	800b4b8 <__i2b>
 800ac3e:	4607      	mov	r7, r0
 800ac40:	b165      	cbz	r5, 800ac5c <_dtoa_r+0x774>
 800ac42:	9b06      	ldr	r3, [sp, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dd09      	ble.n	800ac5c <_dtoa_r+0x774>
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	9a05      	ldr	r2, [sp, #20]
 800ac4c:	bfa8      	it	ge
 800ac4e:	462b      	movge	r3, r5
 800ac50:	1ad2      	subs	r2, r2, r3
 800ac52:	9205      	str	r2, [sp, #20]
 800ac54:	9a06      	ldr	r2, [sp, #24]
 800ac56:	1aed      	subs	r5, r5, r3
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	9306      	str	r3, [sp, #24]
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	b1f3      	cbz	r3, 800ac9e <_dtoa_r+0x7b6>
 800ac60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 80a3 	beq.w	800adae <_dtoa_r+0x8c6>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	dd10      	ble.n	800ac8e <_dtoa_r+0x7a6>
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	4632      	mov	r2, r6
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 fce1 	bl	800b638 <__pow5mult>
 800ac76:	4652      	mov	r2, sl
 800ac78:	4601      	mov	r1, r0
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fc31 	bl	800b4e4 <__multiply>
 800ac82:	4651      	mov	r1, sl
 800ac84:	4680      	mov	r8, r0
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 fb60 	bl	800b34c <_Bfree>
 800ac8c:	46c2      	mov	sl, r8
 800ac8e:	9b08      	ldr	r3, [sp, #32]
 800ac90:	1b9a      	subs	r2, r3, r6
 800ac92:	d004      	beq.n	800ac9e <_dtoa_r+0x7b6>
 800ac94:	4651      	mov	r1, sl
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fcce 	bl	800b638 <__pow5mult>
 800ac9c:	4682      	mov	sl, r0
 800ac9e:	2101      	movs	r1, #1
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fc09 	bl	800b4b8 <__i2b>
 800aca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	4606      	mov	r6, r0
 800acac:	f340 8081 	ble.w	800adb2 <_dtoa_r+0x8ca>
 800acb0:	461a      	mov	r2, r3
 800acb2:	4601      	mov	r1, r0
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fcbf 	bl	800b638 <__pow5mult>
 800acba:	9b07      	ldr	r3, [sp, #28]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	4606      	mov	r6, r0
 800acc0:	dd7a      	ble.n	800adb8 <_dtoa_r+0x8d0>
 800acc2:	f04f 0800 	mov.w	r8, #0
 800acc6:	6933      	ldr	r3, [r6, #16]
 800acc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800accc:	6918      	ldr	r0, [r3, #16]
 800acce:	f000 fba5 	bl	800b41c <__hi0bits>
 800acd2:	f1c0 0020 	rsb	r0, r0, #32
 800acd6:	9b06      	ldr	r3, [sp, #24]
 800acd8:	4418      	add	r0, r3
 800acda:	f010 001f 	ands.w	r0, r0, #31
 800acde:	f000 8094 	beq.w	800ae0a <_dtoa_r+0x922>
 800ace2:	f1c0 0320 	rsb	r3, r0, #32
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	f340 8085 	ble.w	800adf6 <_dtoa_r+0x90e>
 800acec:	9b05      	ldr	r3, [sp, #20]
 800acee:	f1c0 001c 	rsb	r0, r0, #28
 800acf2:	4403      	add	r3, r0
 800acf4:	9305      	str	r3, [sp, #20]
 800acf6:	9b06      	ldr	r3, [sp, #24]
 800acf8:	4403      	add	r3, r0
 800acfa:	4405      	add	r5, r0
 800acfc:	9306      	str	r3, [sp, #24]
 800acfe:	9b05      	ldr	r3, [sp, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dd05      	ble.n	800ad10 <_dtoa_r+0x828>
 800ad04:	4651      	mov	r1, sl
 800ad06:	461a      	mov	r2, r3
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fcef 	bl	800b6ec <__lshift>
 800ad0e:	4682      	mov	sl, r0
 800ad10:	9b06      	ldr	r3, [sp, #24]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dd05      	ble.n	800ad22 <_dtoa_r+0x83a>
 800ad16:	4631      	mov	r1, r6
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fce6 	bl	800b6ec <__lshift>
 800ad20:	4606      	mov	r6, r0
 800ad22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d072      	beq.n	800ae0e <_dtoa_r+0x926>
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f000 fd4a 	bl	800b7c4 <__mcmp>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	da6c      	bge.n	800ae0e <_dtoa_r+0x926>
 800ad34:	2300      	movs	r3, #0
 800ad36:	4651      	mov	r1, sl
 800ad38:	220a      	movs	r2, #10
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fb28 	bl	800b390 <__multadd>
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad46:	4682      	mov	sl, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 81b0 	beq.w	800b0ae <_dtoa_r+0xbc6>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4639      	mov	r1, r7
 800ad52:	220a      	movs	r2, #10
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fb1b 	bl	800b390 <__multadd>
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	4607      	mov	r7, r0
 800ad60:	f300 8096 	bgt.w	800ae90 <_dtoa_r+0x9a8>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	dc59      	bgt.n	800ae1e <_dtoa_r+0x936>
 800ad6a:	e091      	b.n	800ae90 <_dtoa_r+0x9a8>
 800ad6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad72:	e758      	b.n	800ac26 <_dtoa_r+0x73e>
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	1e5e      	subs	r6, r3, #1
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	42b3      	cmp	r3, r6
 800ad7c:	bfbf      	itttt	lt
 800ad7e:	9b08      	ldrlt	r3, [sp, #32]
 800ad80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ad82:	9608      	strlt	r6, [sp, #32]
 800ad84:	1af3      	sublt	r3, r6, r3
 800ad86:	bfb4      	ite	lt
 800ad88:	18d2      	addlt	r2, r2, r3
 800ad8a:	1b9e      	subge	r6, r3, r6
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	bfbc      	itt	lt
 800ad90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ad92:	2600      	movlt	r6, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bfb7      	itett	lt
 800ad98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ad9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ada0:	1a9d      	sublt	r5, r3, r2
 800ada2:	2300      	movlt	r3, #0
 800ada4:	e741      	b.n	800ac2a <_dtoa_r+0x742>
 800ada6:	9e08      	ldr	r6, [sp, #32]
 800ada8:	9d05      	ldr	r5, [sp, #20]
 800adaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800adac:	e748      	b.n	800ac40 <_dtoa_r+0x758>
 800adae:	9a08      	ldr	r2, [sp, #32]
 800adb0:	e770      	b.n	800ac94 <_dtoa_r+0x7ac>
 800adb2:	9b07      	ldr	r3, [sp, #28]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	dc19      	bgt.n	800adec <_dtoa_r+0x904>
 800adb8:	9b02      	ldr	r3, [sp, #8]
 800adba:	b9bb      	cbnz	r3, 800adec <_dtoa_r+0x904>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc2:	b99b      	cbnz	r3, 800adec <_dtoa_r+0x904>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adca:	0d1b      	lsrs	r3, r3, #20
 800adcc:	051b      	lsls	r3, r3, #20
 800adce:	b183      	cbz	r3, 800adf2 <_dtoa_r+0x90a>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	3301      	adds	r3, #1
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	9b06      	ldr	r3, [sp, #24]
 800add8:	3301      	adds	r3, #1
 800adda:	9306      	str	r3, [sp, #24]
 800addc:	f04f 0801 	mov.w	r8, #1
 800ade0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f47f af6f 	bne.w	800acc6 <_dtoa_r+0x7de>
 800ade8:	2001      	movs	r0, #1
 800adea:	e774      	b.n	800acd6 <_dtoa_r+0x7ee>
 800adec:	f04f 0800 	mov.w	r8, #0
 800adf0:	e7f6      	b.n	800ade0 <_dtoa_r+0x8f8>
 800adf2:	4698      	mov	r8, r3
 800adf4:	e7f4      	b.n	800ade0 <_dtoa_r+0x8f8>
 800adf6:	d082      	beq.n	800acfe <_dtoa_r+0x816>
 800adf8:	9a05      	ldr	r2, [sp, #20]
 800adfa:	331c      	adds	r3, #28
 800adfc:	441a      	add	r2, r3
 800adfe:	9205      	str	r2, [sp, #20]
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	441a      	add	r2, r3
 800ae04:	441d      	add	r5, r3
 800ae06:	9206      	str	r2, [sp, #24]
 800ae08:	e779      	b.n	800acfe <_dtoa_r+0x816>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	e7f4      	b.n	800adf8 <_dtoa_r+0x910>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dc37      	bgt.n	800ae84 <_dtoa_r+0x99c>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	dd34      	ble.n	800ae84 <_dtoa_r+0x99c>
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	b963      	cbnz	r3, 800ae3c <_dtoa_r+0x954>
 800ae22:	4631      	mov	r1, r6
 800ae24:	2205      	movs	r2, #5
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fab2 	bl	800b390 <__multadd>
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4606      	mov	r6, r0
 800ae30:	4650      	mov	r0, sl
 800ae32:	f000 fcc7 	bl	800b7c4 <__mcmp>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f73f adbb 	bgt.w	800a9b2 <_dtoa_r+0x4ca>
 800ae3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae3e:	9d00      	ldr	r5, [sp, #0]
 800ae40:	ea6f 0b03 	mvn.w	fp, r3
 800ae44:	f04f 0800 	mov.w	r8, #0
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 fa7e 	bl	800b34c <_Bfree>
 800ae50:	2f00      	cmp	r7, #0
 800ae52:	f43f aeab 	beq.w	800abac <_dtoa_r+0x6c4>
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	d005      	beq.n	800ae68 <_dtoa_r+0x980>
 800ae5c:	45b8      	cmp	r8, r7
 800ae5e:	d003      	beq.n	800ae68 <_dtoa_r+0x980>
 800ae60:	4641      	mov	r1, r8
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fa72 	bl	800b34c <_Bfree>
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 fa6e 	bl	800b34c <_Bfree>
 800ae70:	e69c      	b.n	800abac <_dtoa_r+0x6c4>
 800ae72:	2600      	movs	r6, #0
 800ae74:	4637      	mov	r7, r6
 800ae76:	e7e1      	b.n	800ae3c <_dtoa_r+0x954>
 800ae78:	46bb      	mov	fp, r7
 800ae7a:	4637      	mov	r7, r6
 800ae7c:	e599      	b.n	800a9b2 <_dtoa_r+0x4ca>
 800ae7e:	bf00      	nop
 800ae80:	40240000 	.word	0x40240000
 800ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 80c8 	beq.w	800b01c <_dtoa_r+0xb34>
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	2d00      	cmp	r5, #0
 800ae92:	dd05      	ble.n	800aea0 <_dtoa_r+0x9b8>
 800ae94:	4639      	mov	r1, r7
 800ae96:	462a      	mov	r2, r5
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fc27 	bl	800b6ec <__lshift>
 800ae9e:	4607      	mov	r7, r0
 800aea0:	f1b8 0f00 	cmp.w	r8, #0
 800aea4:	d05b      	beq.n	800af5e <_dtoa_r+0xa76>
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fa0f 	bl	800b2cc <_Balloc>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <_dtoa_r+0x9d6>
 800aeb2:	4b83      	ldr	r3, [pc, #524]	; (800b0c0 <_dtoa_r+0xbd8>)
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aeba:	f7ff bb2e 	b.w	800a51a <_dtoa_r+0x32>
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	3202      	adds	r2, #2
 800aec2:	0092      	lsls	r2, r2, #2
 800aec4:	f107 010c 	add.w	r1, r7, #12
 800aec8:	300c      	adds	r0, #12
 800aeca:	f001 f835 	bl	800bf38 <memcpy>
 800aece:	2201      	movs	r2, #1
 800aed0:	4629      	mov	r1, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 fc0a 	bl	800b6ec <__lshift>
 800aed8:	9b00      	ldr	r3, [sp, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aee2:	4413      	add	r3, r2
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	9b02      	ldr	r3, [sp, #8]
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	46b8      	mov	r8, r7
 800aeee:	9306      	str	r3, [sp, #24]
 800aef0:	4607      	mov	r7, r0
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	4631      	mov	r1, r6
 800aef6:	3b01      	subs	r3, #1
 800aef8:	4650      	mov	r0, sl
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	f7ff fa6b 	bl	800a3d6 <quorem>
 800af00:	4641      	mov	r1, r8
 800af02:	9002      	str	r0, [sp, #8]
 800af04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af08:	4650      	mov	r0, sl
 800af0a:	f000 fc5b 	bl	800b7c4 <__mcmp>
 800af0e:	463a      	mov	r2, r7
 800af10:	9005      	str	r0, [sp, #20]
 800af12:	4631      	mov	r1, r6
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fc71 	bl	800b7fc <__mdiff>
 800af1a:	68c2      	ldr	r2, [r0, #12]
 800af1c:	4605      	mov	r5, r0
 800af1e:	bb02      	cbnz	r2, 800af62 <_dtoa_r+0xa7a>
 800af20:	4601      	mov	r1, r0
 800af22:	4650      	mov	r0, sl
 800af24:	f000 fc4e 	bl	800b7c4 <__mcmp>
 800af28:	4602      	mov	r2, r0
 800af2a:	4629      	mov	r1, r5
 800af2c:	4620      	mov	r0, r4
 800af2e:	9209      	str	r2, [sp, #36]	; 0x24
 800af30:	f000 fa0c 	bl	800b34c <_Bfree>
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af38:	9d04      	ldr	r5, [sp, #16]
 800af3a:	ea43 0102 	orr.w	r1, r3, r2
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	4319      	orrs	r1, r3
 800af42:	d110      	bne.n	800af66 <_dtoa_r+0xa7e>
 800af44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af48:	d029      	beq.n	800af9e <_dtoa_r+0xab6>
 800af4a:	9b05      	ldr	r3, [sp, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd02      	ble.n	800af56 <_dtoa_r+0xa6e>
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af56:	9b01      	ldr	r3, [sp, #4]
 800af58:	f883 9000 	strb.w	r9, [r3]
 800af5c:	e774      	b.n	800ae48 <_dtoa_r+0x960>
 800af5e:	4638      	mov	r0, r7
 800af60:	e7ba      	b.n	800aed8 <_dtoa_r+0x9f0>
 800af62:	2201      	movs	r2, #1
 800af64:	e7e1      	b.n	800af2a <_dtoa_r+0xa42>
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	db04      	blt.n	800af76 <_dtoa_r+0xa8e>
 800af6c:	9907      	ldr	r1, [sp, #28]
 800af6e:	430b      	orrs	r3, r1
 800af70:	9906      	ldr	r1, [sp, #24]
 800af72:	430b      	orrs	r3, r1
 800af74:	d120      	bne.n	800afb8 <_dtoa_r+0xad0>
 800af76:	2a00      	cmp	r2, #0
 800af78:	dded      	ble.n	800af56 <_dtoa_r+0xa6e>
 800af7a:	4651      	mov	r1, sl
 800af7c:	2201      	movs	r2, #1
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fbb4 	bl	800b6ec <__lshift>
 800af84:	4631      	mov	r1, r6
 800af86:	4682      	mov	sl, r0
 800af88:	f000 fc1c 	bl	800b7c4 <__mcmp>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	dc03      	bgt.n	800af98 <_dtoa_r+0xab0>
 800af90:	d1e1      	bne.n	800af56 <_dtoa_r+0xa6e>
 800af92:	f019 0f01 	tst.w	r9, #1
 800af96:	d0de      	beq.n	800af56 <_dtoa_r+0xa6e>
 800af98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af9c:	d1d8      	bne.n	800af50 <_dtoa_r+0xa68>
 800af9e:	9a01      	ldr	r2, [sp, #4]
 800afa0:	2339      	movs	r3, #57	; 0x39
 800afa2:	7013      	strb	r3, [r2, #0]
 800afa4:	462b      	mov	r3, r5
 800afa6:	461d      	mov	r5, r3
 800afa8:	3b01      	subs	r3, #1
 800afaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afae:	2a39      	cmp	r2, #57	; 0x39
 800afb0:	d06c      	beq.n	800b08c <_dtoa_r+0xba4>
 800afb2:	3201      	adds	r2, #1
 800afb4:	701a      	strb	r2, [r3, #0]
 800afb6:	e747      	b.n	800ae48 <_dtoa_r+0x960>
 800afb8:	2a00      	cmp	r2, #0
 800afba:	dd07      	ble.n	800afcc <_dtoa_r+0xae4>
 800afbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afc0:	d0ed      	beq.n	800af9e <_dtoa_r+0xab6>
 800afc2:	9a01      	ldr	r2, [sp, #4]
 800afc4:	f109 0301 	add.w	r3, r9, #1
 800afc8:	7013      	strb	r3, [r2, #0]
 800afca:	e73d      	b.n	800ae48 <_dtoa_r+0x960>
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	9a08      	ldr	r2, [sp, #32]
 800afd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d043      	beq.n	800b060 <_dtoa_r+0xb78>
 800afd8:	4651      	mov	r1, sl
 800afda:	2300      	movs	r3, #0
 800afdc:	220a      	movs	r2, #10
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f9d6 	bl	800b390 <__multadd>
 800afe4:	45b8      	cmp	r8, r7
 800afe6:	4682      	mov	sl, r0
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	f04f 020a 	mov.w	r2, #10
 800aff0:	4641      	mov	r1, r8
 800aff2:	4620      	mov	r0, r4
 800aff4:	d107      	bne.n	800b006 <_dtoa_r+0xb1e>
 800aff6:	f000 f9cb 	bl	800b390 <__multadd>
 800affa:	4680      	mov	r8, r0
 800affc:	4607      	mov	r7, r0
 800affe:	9b04      	ldr	r3, [sp, #16]
 800b000:	3301      	adds	r3, #1
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	e775      	b.n	800aef2 <_dtoa_r+0xa0a>
 800b006:	f000 f9c3 	bl	800b390 <__multadd>
 800b00a:	4639      	mov	r1, r7
 800b00c:	4680      	mov	r8, r0
 800b00e:	2300      	movs	r3, #0
 800b010:	220a      	movs	r2, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f000 f9bc 	bl	800b390 <__multadd>
 800b018:	4607      	mov	r7, r0
 800b01a:	e7f0      	b.n	800affe <_dtoa_r+0xb16>
 800b01c:	9b04      	ldr	r3, [sp, #16]
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	9d00      	ldr	r5, [sp, #0]
 800b022:	4631      	mov	r1, r6
 800b024:	4650      	mov	r0, sl
 800b026:	f7ff f9d6 	bl	800a3d6 <quorem>
 800b02a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b02e:	9b00      	ldr	r3, [sp, #0]
 800b030:	f805 9b01 	strb.w	r9, [r5], #1
 800b034:	1aea      	subs	r2, r5, r3
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	4293      	cmp	r3, r2
 800b03a:	dd07      	ble.n	800b04c <_dtoa_r+0xb64>
 800b03c:	4651      	mov	r1, sl
 800b03e:	2300      	movs	r3, #0
 800b040:	220a      	movs	r2, #10
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f9a4 	bl	800b390 <__multadd>
 800b048:	4682      	mov	sl, r0
 800b04a:	e7ea      	b.n	800b022 <_dtoa_r+0xb3a>
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfc8      	it	gt
 800b052:	461d      	movgt	r5, r3
 800b054:	9b00      	ldr	r3, [sp, #0]
 800b056:	bfd8      	it	le
 800b058:	2501      	movle	r5, #1
 800b05a:	441d      	add	r5, r3
 800b05c:	f04f 0800 	mov.w	r8, #0
 800b060:	4651      	mov	r1, sl
 800b062:	2201      	movs	r2, #1
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fb41 	bl	800b6ec <__lshift>
 800b06a:	4631      	mov	r1, r6
 800b06c:	4682      	mov	sl, r0
 800b06e:	f000 fba9 	bl	800b7c4 <__mcmp>
 800b072:	2800      	cmp	r0, #0
 800b074:	dc96      	bgt.n	800afa4 <_dtoa_r+0xabc>
 800b076:	d102      	bne.n	800b07e <_dtoa_r+0xb96>
 800b078:	f019 0f01 	tst.w	r9, #1
 800b07c:	d192      	bne.n	800afa4 <_dtoa_r+0xabc>
 800b07e:	462b      	mov	r3, r5
 800b080:	461d      	mov	r5, r3
 800b082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b086:	2a30      	cmp	r2, #48	; 0x30
 800b088:	d0fa      	beq.n	800b080 <_dtoa_r+0xb98>
 800b08a:	e6dd      	b.n	800ae48 <_dtoa_r+0x960>
 800b08c:	9a00      	ldr	r2, [sp, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d189      	bne.n	800afa6 <_dtoa_r+0xabe>
 800b092:	f10b 0b01 	add.w	fp, fp, #1
 800b096:	2331      	movs	r3, #49	; 0x31
 800b098:	e796      	b.n	800afc8 <_dtoa_r+0xae0>
 800b09a:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <_dtoa_r+0xbdc>)
 800b09c:	f7ff ba99 	b.w	800a5d2 <_dtoa_r+0xea>
 800b0a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f47f aa6d 	bne.w	800a582 <_dtoa_r+0x9a>
 800b0a8:	4b07      	ldr	r3, [pc, #28]	; (800b0c8 <_dtoa_r+0xbe0>)
 800b0aa:	f7ff ba92 	b.w	800a5d2 <_dtoa_r+0xea>
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dcb5      	bgt.n	800b020 <_dtoa_r+0xb38>
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	f73f aeb1 	bgt.w	800ae1e <_dtoa_r+0x936>
 800b0bc:	e7b0      	b.n	800b020 <_dtoa_r+0xb38>
 800b0be:	bf00      	nop
 800b0c0:	0800c3ef 	.word	0x0800c3ef
 800b0c4:	0800c34f 	.word	0x0800c34f
 800b0c8:	0800c373 	.word	0x0800c373

0800b0cc <_free_r>:
 800b0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0ce:	2900      	cmp	r1, #0
 800b0d0:	d044      	beq.n	800b15c <_free_r+0x90>
 800b0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d6:	9001      	str	r0, [sp, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f1a1 0404 	sub.w	r4, r1, #4
 800b0de:	bfb8      	it	lt
 800b0e0:	18e4      	addlt	r4, r4, r3
 800b0e2:	f000 f8e7 	bl	800b2b4 <__malloc_lock>
 800b0e6:	4a1e      	ldr	r2, [pc, #120]	; (800b160 <_free_r+0x94>)
 800b0e8:	9801      	ldr	r0, [sp, #4]
 800b0ea:	6813      	ldr	r3, [r2, #0]
 800b0ec:	b933      	cbnz	r3, 800b0fc <_free_r+0x30>
 800b0ee:	6063      	str	r3, [r4, #4]
 800b0f0:	6014      	str	r4, [r2, #0]
 800b0f2:	b003      	add	sp, #12
 800b0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f8:	f000 b8e2 	b.w	800b2c0 <__malloc_unlock>
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	d908      	bls.n	800b112 <_free_r+0x46>
 800b100:	6825      	ldr	r5, [r4, #0]
 800b102:	1961      	adds	r1, r4, r5
 800b104:	428b      	cmp	r3, r1
 800b106:	bf01      	itttt	eq
 800b108:	6819      	ldreq	r1, [r3, #0]
 800b10a:	685b      	ldreq	r3, [r3, #4]
 800b10c:	1949      	addeq	r1, r1, r5
 800b10e:	6021      	streq	r1, [r4, #0]
 800b110:	e7ed      	b.n	800b0ee <_free_r+0x22>
 800b112:	461a      	mov	r2, r3
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	b10b      	cbz	r3, 800b11c <_free_r+0x50>
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d9fa      	bls.n	800b112 <_free_r+0x46>
 800b11c:	6811      	ldr	r1, [r2, #0]
 800b11e:	1855      	adds	r5, r2, r1
 800b120:	42a5      	cmp	r5, r4
 800b122:	d10b      	bne.n	800b13c <_free_r+0x70>
 800b124:	6824      	ldr	r4, [r4, #0]
 800b126:	4421      	add	r1, r4
 800b128:	1854      	adds	r4, r2, r1
 800b12a:	42a3      	cmp	r3, r4
 800b12c:	6011      	str	r1, [r2, #0]
 800b12e:	d1e0      	bne.n	800b0f2 <_free_r+0x26>
 800b130:	681c      	ldr	r4, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	6053      	str	r3, [r2, #4]
 800b136:	440c      	add	r4, r1
 800b138:	6014      	str	r4, [r2, #0]
 800b13a:	e7da      	b.n	800b0f2 <_free_r+0x26>
 800b13c:	d902      	bls.n	800b144 <_free_r+0x78>
 800b13e:	230c      	movs	r3, #12
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	e7d6      	b.n	800b0f2 <_free_r+0x26>
 800b144:	6825      	ldr	r5, [r4, #0]
 800b146:	1961      	adds	r1, r4, r5
 800b148:	428b      	cmp	r3, r1
 800b14a:	bf04      	itt	eq
 800b14c:	6819      	ldreq	r1, [r3, #0]
 800b14e:	685b      	ldreq	r3, [r3, #4]
 800b150:	6063      	str	r3, [r4, #4]
 800b152:	bf04      	itt	eq
 800b154:	1949      	addeq	r1, r1, r5
 800b156:	6021      	streq	r1, [r4, #0]
 800b158:	6054      	str	r4, [r2, #4]
 800b15a:	e7ca      	b.n	800b0f2 <_free_r+0x26>
 800b15c:	b003      	add	sp, #12
 800b15e:	bd30      	pop	{r4, r5, pc}
 800b160:	200008a4 	.word	0x200008a4

0800b164 <malloc>:
 800b164:	4b02      	ldr	r3, [pc, #8]	; (800b170 <malloc+0xc>)
 800b166:	4601      	mov	r1, r0
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	f000 b823 	b.w	800b1b4 <_malloc_r>
 800b16e:	bf00      	nop
 800b170:	20000088 	.word	0x20000088

0800b174 <sbrk_aligned>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	4e0e      	ldr	r6, [pc, #56]	; (800b1b0 <sbrk_aligned+0x3c>)
 800b178:	460c      	mov	r4, r1
 800b17a:	6831      	ldr	r1, [r6, #0]
 800b17c:	4605      	mov	r5, r0
 800b17e:	b911      	cbnz	r1, 800b186 <sbrk_aligned+0x12>
 800b180:	f000 feca 	bl	800bf18 <_sbrk_r>
 800b184:	6030      	str	r0, [r6, #0]
 800b186:	4621      	mov	r1, r4
 800b188:	4628      	mov	r0, r5
 800b18a:	f000 fec5 	bl	800bf18 <_sbrk_r>
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d00a      	beq.n	800b1a8 <sbrk_aligned+0x34>
 800b192:	1cc4      	adds	r4, r0, #3
 800b194:	f024 0403 	bic.w	r4, r4, #3
 800b198:	42a0      	cmp	r0, r4
 800b19a:	d007      	beq.n	800b1ac <sbrk_aligned+0x38>
 800b19c:	1a21      	subs	r1, r4, r0
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 feba 	bl	800bf18 <_sbrk_r>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d101      	bne.n	800b1ac <sbrk_aligned+0x38>
 800b1a8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	200008a8 	.word	0x200008a8

0800b1b4 <_malloc_r>:
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	1ccd      	adds	r5, r1, #3
 800b1ba:	f025 0503 	bic.w	r5, r5, #3
 800b1be:	3508      	adds	r5, #8
 800b1c0:	2d0c      	cmp	r5, #12
 800b1c2:	bf38      	it	cc
 800b1c4:	250c      	movcc	r5, #12
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	db01      	blt.n	800b1d0 <_malloc_r+0x1c>
 800b1cc:	42a9      	cmp	r1, r5
 800b1ce:	d905      	bls.n	800b1dc <_malloc_r+0x28>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	2600      	movs	r6, #0
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2b0 <_malloc_r+0xfc>
 800b1e0:	f000 f868 	bl	800b2b4 <__malloc_lock>
 800b1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e8:	461c      	mov	r4, r3
 800b1ea:	bb5c      	cbnz	r4, 800b244 <_malloc_r+0x90>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7ff ffc0 	bl	800b174 <sbrk_aligned>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	d155      	bne.n	800b2a6 <_malloc_r+0xf2>
 800b1fa:	f8d8 4000 	ldr.w	r4, [r8]
 800b1fe:	4626      	mov	r6, r4
 800b200:	2e00      	cmp	r6, #0
 800b202:	d145      	bne.n	800b290 <_malloc_r+0xdc>
 800b204:	2c00      	cmp	r4, #0
 800b206:	d048      	beq.n	800b29a <_malloc_r+0xe6>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	4631      	mov	r1, r6
 800b20c:	4638      	mov	r0, r7
 800b20e:	eb04 0903 	add.w	r9, r4, r3
 800b212:	f000 fe81 	bl	800bf18 <_sbrk_r>
 800b216:	4581      	cmp	r9, r0
 800b218:	d13f      	bne.n	800b29a <_malloc_r+0xe6>
 800b21a:	6821      	ldr	r1, [r4, #0]
 800b21c:	1a6d      	subs	r5, r5, r1
 800b21e:	4629      	mov	r1, r5
 800b220:	4638      	mov	r0, r7
 800b222:	f7ff ffa7 	bl	800b174 <sbrk_aligned>
 800b226:	3001      	adds	r0, #1
 800b228:	d037      	beq.n	800b29a <_malloc_r+0xe6>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	442b      	add	r3, r5
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	f8d8 3000 	ldr.w	r3, [r8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d038      	beq.n	800b2aa <_malloc_r+0xf6>
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	42a2      	cmp	r2, r4
 800b23c:	d12b      	bne.n	800b296 <_malloc_r+0xe2>
 800b23e:	2200      	movs	r2, #0
 800b240:	605a      	str	r2, [r3, #4]
 800b242:	e00f      	b.n	800b264 <_malloc_r+0xb0>
 800b244:	6822      	ldr	r2, [r4, #0]
 800b246:	1b52      	subs	r2, r2, r5
 800b248:	d41f      	bmi.n	800b28a <_malloc_r+0xd6>
 800b24a:	2a0b      	cmp	r2, #11
 800b24c:	d917      	bls.n	800b27e <_malloc_r+0xca>
 800b24e:	1961      	adds	r1, r4, r5
 800b250:	42a3      	cmp	r3, r4
 800b252:	6025      	str	r5, [r4, #0]
 800b254:	bf18      	it	ne
 800b256:	6059      	strne	r1, [r3, #4]
 800b258:	6863      	ldr	r3, [r4, #4]
 800b25a:	bf08      	it	eq
 800b25c:	f8c8 1000 	streq.w	r1, [r8]
 800b260:	5162      	str	r2, [r4, r5]
 800b262:	604b      	str	r3, [r1, #4]
 800b264:	4638      	mov	r0, r7
 800b266:	f104 060b 	add.w	r6, r4, #11
 800b26a:	f000 f829 	bl	800b2c0 <__malloc_unlock>
 800b26e:	f026 0607 	bic.w	r6, r6, #7
 800b272:	1d23      	adds	r3, r4, #4
 800b274:	1af2      	subs	r2, r6, r3
 800b276:	d0ae      	beq.n	800b1d6 <_malloc_r+0x22>
 800b278:	1b9b      	subs	r3, r3, r6
 800b27a:	50a3      	str	r3, [r4, r2]
 800b27c:	e7ab      	b.n	800b1d6 <_malloc_r+0x22>
 800b27e:	42a3      	cmp	r3, r4
 800b280:	6862      	ldr	r2, [r4, #4]
 800b282:	d1dd      	bne.n	800b240 <_malloc_r+0x8c>
 800b284:	f8c8 2000 	str.w	r2, [r8]
 800b288:	e7ec      	b.n	800b264 <_malloc_r+0xb0>
 800b28a:	4623      	mov	r3, r4
 800b28c:	6864      	ldr	r4, [r4, #4]
 800b28e:	e7ac      	b.n	800b1ea <_malloc_r+0x36>
 800b290:	4634      	mov	r4, r6
 800b292:	6876      	ldr	r6, [r6, #4]
 800b294:	e7b4      	b.n	800b200 <_malloc_r+0x4c>
 800b296:	4613      	mov	r3, r2
 800b298:	e7cc      	b.n	800b234 <_malloc_r+0x80>
 800b29a:	230c      	movs	r3, #12
 800b29c:	603b      	str	r3, [r7, #0]
 800b29e:	4638      	mov	r0, r7
 800b2a0:	f000 f80e 	bl	800b2c0 <__malloc_unlock>
 800b2a4:	e797      	b.n	800b1d6 <_malloc_r+0x22>
 800b2a6:	6025      	str	r5, [r4, #0]
 800b2a8:	e7dc      	b.n	800b264 <_malloc_r+0xb0>
 800b2aa:	605b      	str	r3, [r3, #4]
 800b2ac:	deff      	udf	#255	; 0xff
 800b2ae:	bf00      	nop
 800b2b0:	200008a4 	.word	0x200008a4

0800b2b4 <__malloc_lock>:
 800b2b4:	4801      	ldr	r0, [pc, #4]	; (800b2bc <__malloc_lock+0x8>)
 800b2b6:	f7ff b88c 	b.w	800a3d2 <__retarget_lock_acquire_recursive>
 800b2ba:	bf00      	nop
 800b2bc:	200008a0 	.word	0x200008a0

0800b2c0 <__malloc_unlock>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	; (800b2c8 <__malloc_unlock+0x8>)
 800b2c2:	f7ff b887 	b.w	800a3d4 <__retarget_lock_release_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	200008a0 	.word	0x200008a0

0800b2cc <_Balloc>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	69c6      	ldr	r6, [r0, #28]
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	b976      	cbnz	r6, 800b2f4 <_Balloc+0x28>
 800b2d6:	2010      	movs	r0, #16
 800b2d8:	f7ff ff44 	bl	800b164 <malloc>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	61e0      	str	r0, [r4, #28]
 800b2e0:	b920      	cbnz	r0, 800b2ec <_Balloc+0x20>
 800b2e2:	4b18      	ldr	r3, [pc, #96]	; (800b344 <_Balloc+0x78>)
 800b2e4:	4818      	ldr	r0, [pc, #96]	; (800b348 <_Balloc+0x7c>)
 800b2e6:	216b      	movs	r1, #107	; 0x6b
 800b2e8:	f000 fe34 	bl	800bf54 <__assert_func>
 800b2ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2f0:	6006      	str	r6, [r0, #0]
 800b2f2:	60c6      	str	r6, [r0, #12]
 800b2f4:	69e6      	ldr	r6, [r4, #28]
 800b2f6:	68f3      	ldr	r3, [r6, #12]
 800b2f8:	b183      	cbz	r3, 800b31c <_Balloc+0x50>
 800b2fa:	69e3      	ldr	r3, [r4, #28]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b302:	b9b8      	cbnz	r0, 800b334 <_Balloc+0x68>
 800b304:	2101      	movs	r1, #1
 800b306:	fa01 f605 	lsl.w	r6, r1, r5
 800b30a:	1d72      	adds	r2, r6, #5
 800b30c:	0092      	lsls	r2, r2, #2
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 fe3e 	bl	800bf90 <_calloc_r>
 800b314:	b160      	cbz	r0, 800b330 <_Balloc+0x64>
 800b316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b31a:	e00e      	b.n	800b33a <_Balloc+0x6e>
 800b31c:	2221      	movs	r2, #33	; 0x21
 800b31e:	2104      	movs	r1, #4
 800b320:	4620      	mov	r0, r4
 800b322:	f000 fe35 	bl	800bf90 <_calloc_r>
 800b326:	69e3      	ldr	r3, [r4, #28]
 800b328:	60f0      	str	r0, [r6, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e4      	bne.n	800b2fa <_Balloc+0x2e>
 800b330:	2000      	movs	r0, #0
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	6802      	ldr	r2, [r0, #0]
 800b336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b33a:	2300      	movs	r3, #0
 800b33c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b340:	e7f7      	b.n	800b332 <_Balloc+0x66>
 800b342:	bf00      	nop
 800b344:	0800c380 	.word	0x0800c380
 800b348:	0800c400 	.word	0x0800c400

0800b34c <_Bfree>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	69c6      	ldr	r6, [r0, #28]
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	b976      	cbnz	r6, 800b374 <_Bfree+0x28>
 800b356:	2010      	movs	r0, #16
 800b358:	f7ff ff04 	bl	800b164 <malloc>
 800b35c:	4602      	mov	r2, r0
 800b35e:	61e8      	str	r0, [r5, #28]
 800b360:	b920      	cbnz	r0, 800b36c <_Bfree+0x20>
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <_Bfree+0x3c>)
 800b364:	4809      	ldr	r0, [pc, #36]	; (800b38c <_Bfree+0x40>)
 800b366:	218f      	movs	r1, #143	; 0x8f
 800b368:	f000 fdf4 	bl	800bf54 <__assert_func>
 800b36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b370:	6006      	str	r6, [r0, #0]
 800b372:	60c6      	str	r6, [r0, #12]
 800b374:	b13c      	cbz	r4, 800b386 <_Bfree+0x3a>
 800b376:	69eb      	ldr	r3, [r5, #28]
 800b378:	6862      	ldr	r2, [r4, #4]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b380:	6021      	str	r1, [r4, #0]
 800b382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b386:	bd70      	pop	{r4, r5, r6, pc}
 800b388:	0800c380 	.word	0x0800c380
 800b38c:	0800c400 	.word	0x0800c400

0800b390 <__multadd>:
 800b390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b394:	690d      	ldr	r5, [r1, #16]
 800b396:	4607      	mov	r7, r0
 800b398:	460c      	mov	r4, r1
 800b39a:	461e      	mov	r6, r3
 800b39c:	f101 0c14 	add.w	ip, r1, #20
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	f8dc 3000 	ldr.w	r3, [ip]
 800b3a6:	b299      	uxth	r1, r3
 800b3a8:	fb02 6101 	mla	r1, r2, r1, r6
 800b3ac:	0c1e      	lsrs	r6, r3, #16
 800b3ae:	0c0b      	lsrs	r3, r1, #16
 800b3b0:	fb02 3306 	mla	r3, r2, r6, r3
 800b3b4:	b289      	uxth	r1, r1
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3bc:	4285      	cmp	r5, r0
 800b3be:	f84c 1b04 	str.w	r1, [ip], #4
 800b3c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3c6:	dcec      	bgt.n	800b3a2 <__multadd+0x12>
 800b3c8:	b30e      	cbz	r6, 800b40e <__multadd+0x7e>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	42ab      	cmp	r3, r5
 800b3ce:	dc19      	bgt.n	800b404 <__multadd+0x74>
 800b3d0:	6861      	ldr	r1, [r4, #4]
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	3101      	adds	r1, #1
 800b3d6:	f7ff ff79 	bl	800b2cc <_Balloc>
 800b3da:	4680      	mov	r8, r0
 800b3dc:	b928      	cbnz	r0, 800b3ea <__multadd+0x5a>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <__multadd+0x84>)
 800b3e2:	480d      	ldr	r0, [pc, #52]	; (800b418 <__multadd+0x88>)
 800b3e4:	21ba      	movs	r1, #186	; 0xba
 800b3e6:	f000 fdb5 	bl	800bf54 <__assert_func>
 800b3ea:	6922      	ldr	r2, [r4, #16]
 800b3ec:	3202      	adds	r2, #2
 800b3ee:	f104 010c 	add.w	r1, r4, #12
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	300c      	adds	r0, #12
 800b3f6:	f000 fd9f 	bl	800bf38 <memcpy>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff ffa5 	bl	800b34c <_Bfree>
 800b402:	4644      	mov	r4, r8
 800b404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b408:	3501      	adds	r5, #1
 800b40a:	615e      	str	r6, [r3, #20]
 800b40c:	6125      	str	r5, [r4, #16]
 800b40e:	4620      	mov	r0, r4
 800b410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b414:	0800c3ef 	.word	0x0800c3ef
 800b418:	0800c400 	.word	0x0800c400

0800b41c <__hi0bits>:
 800b41c:	0c03      	lsrs	r3, r0, #16
 800b41e:	041b      	lsls	r3, r3, #16
 800b420:	b9d3      	cbnz	r3, 800b458 <__hi0bits+0x3c>
 800b422:	0400      	lsls	r0, r0, #16
 800b424:	2310      	movs	r3, #16
 800b426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b42a:	bf04      	itt	eq
 800b42c:	0200      	lsleq	r0, r0, #8
 800b42e:	3308      	addeq	r3, #8
 800b430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b434:	bf04      	itt	eq
 800b436:	0100      	lsleq	r0, r0, #4
 800b438:	3304      	addeq	r3, #4
 800b43a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b43e:	bf04      	itt	eq
 800b440:	0080      	lsleq	r0, r0, #2
 800b442:	3302      	addeq	r3, #2
 800b444:	2800      	cmp	r0, #0
 800b446:	db05      	blt.n	800b454 <__hi0bits+0x38>
 800b448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b44c:	f103 0301 	add.w	r3, r3, #1
 800b450:	bf08      	it	eq
 800b452:	2320      	moveq	r3, #32
 800b454:	4618      	mov	r0, r3
 800b456:	4770      	bx	lr
 800b458:	2300      	movs	r3, #0
 800b45a:	e7e4      	b.n	800b426 <__hi0bits+0xa>

0800b45c <__lo0bits>:
 800b45c:	6803      	ldr	r3, [r0, #0]
 800b45e:	f013 0207 	ands.w	r2, r3, #7
 800b462:	d00c      	beq.n	800b47e <__lo0bits+0x22>
 800b464:	07d9      	lsls	r1, r3, #31
 800b466:	d422      	bmi.n	800b4ae <__lo0bits+0x52>
 800b468:	079a      	lsls	r2, r3, #30
 800b46a:	bf49      	itett	mi
 800b46c:	085b      	lsrmi	r3, r3, #1
 800b46e:	089b      	lsrpl	r3, r3, #2
 800b470:	6003      	strmi	r3, [r0, #0]
 800b472:	2201      	movmi	r2, #1
 800b474:	bf5c      	itt	pl
 800b476:	6003      	strpl	r3, [r0, #0]
 800b478:	2202      	movpl	r2, #2
 800b47a:	4610      	mov	r0, r2
 800b47c:	4770      	bx	lr
 800b47e:	b299      	uxth	r1, r3
 800b480:	b909      	cbnz	r1, 800b486 <__lo0bits+0x2a>
 800b482:	0c1b      	lsrs	r3, r3, #16
 800b484:	2210      	movs	r2, #16
 800b486:	b2d9      	uxtb	r1, r3
 800b488:	b909      	cbnz	r1, 800b48e <__lo0bits+0x32>
 800b48a:	3208      	adds	r2, #8
 800b48c:	0a1b      	lsrs	r3, r3, #8
 800b48e:	0719      	lsls	r1, r3, #28
 800b490:	bf04      	itt	eq
 800b492:	091b      	lsreq	r3, r3, #4
 800b494:	3204      	addeq	r2, #4
 800b496:	0799      	lsls	r1, r3, #30
 800b498:	bf04      	itt	eq
 800b49a:	089b      	lsreq	r3, r3, #2
 800b49c:	3202      	addeq	r2, #2
 800b49e:	07d9      	lsls	r1, r3, #31
 800b4a0:	d403      	bmi.n	800b4aa <__lo0bits+0x4e>
 800b4a2:	085b      	lsrs	r3, r3, #1
 800b4a4:	f102 0201 	add.w	r2, r2, #1
 800b4a8:	d003      	beq.n	800b4b2 <__lo0bits+0x56>
 800b4aa:	6003      	str	r3, [r0, #0]
 800b4ac:	e7e5      	b.n	800b47a <__lo0bits+0x1e>
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	e7e3      	b.n	800b47a <__lo0bits+0x1e>
 800b4b2:	2220      	movs	r2, #32
 800b4b4:	e7e1      	b.n	800b47a <__lo0bits+0x1e>
	...

0800b4b8 <__i2b>:
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	2101      	movs	r1, #1
 800b4be:	f7ff ff05 	bl	800b2cc <_Balloc>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	b928      	cbnz	r0, 800b4d2 <__i2b+0x1a>
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <__i2b+0x24>)
 800b4c8:	4805      	ldr	r0, [pc, #20]	; (800b4e0 <__i2b+0x28>)
 800b4ca:	f240 1145 	movw	r1, #325	; 0x145
 800b4ce:	f000 fd41 	bl	800bf54 <__assert_func>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	6144      	str	r4, [r0, #20]
 800b4d6:	6103      	str	r3, [r0, #16]
 800b4d8:	bd10      	pop	{r4, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800c3ef 	.word	0x0800c3ef
 800b4e0:	0800c400 	.word	0x0800c400

0800b4e4 <__multiply>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	4691      	mov	r9, r2
 800b4ea:	690a      	ldr	r2, [r1, #16]
 800b4ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	bfb8      	it	lt
 800b4f4:	460b      	movlt	r3, r1
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	bfbc      	itt	lt
 800b4fa:	464c      	movlt	r4, r9
 800b4fc:	4699      	movlt	r9, r3
 800b4fe:	6927      	ldr	r7, [r4, #16]
 800b500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	6861      	ldr	r1, [r4, #4]
 800b508:	eb07 060a 	add.w	r6, r7, sl
 800b50c:	42b3      	cmp	r3, r6
 800b50e:	b085      	sub	sp, #20
 800b510:	bfb8      	it	lt
 800b512:	3101      	addlt	r1, #1
 800b514:	f7ff feda 	bl	800b2cc <_Balloc>
 800b518:	b930      	cbnz	r0, 800b528 <__multiply+0x44>
 800b51a:	4602      	mov	r2, r0
 800b51c:	4b44      	ldr	r3, [pc, #272]	; (800b630 <__multiply+0x14c>)
 800b51e:	4845      	ldr	r0, [pc, #276]	; (800b634 <__multiply+0x150>)
 800b520:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b524:	f000 fd16 	bl	800bf54 <__assert_func>
 800b528:	f100 0514 	add.w	r5, r0, #20
 800b52c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b530:	462b      	mov	r3, r5
 800b532:	2200      	movs	r2, #0
 800b534:	4543      	cmp	r3, r8
 800b536:	d321      	bcc.n	800b57c <__multiply+0x98>
 800b538:	f104 0314 	add.w	r3, r4, #20
 800b53c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b540:	f109 0314 	add.w	r3, r9, #20
 800b544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	1b3a      	subs	r2, r7, r4
 800b54c:	3a15      	subs	r2, #21
 800b54e:	f022 0203 	bic.w	r2, r2, #3
 800b552:	3204      	adds	r2, #4
 800b554:	f104 0115 	add.w	r1, r4, #21
 800b558:	428f      	cmp	r7, r1
 800b55a:	bf38      	it	cc
 800b55c:	2204      	movcc	r2, #4
 800b55e:	9201      	str	r2, [sp, #4]
 800b560:	9a02      	ldr	r2, [sp, #8]
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	429a      	cmp	r2, r3
 800b566:	d80c      	bhi.n	800b582 <__multiply+0x9e>
 800b568:	2e00      	cmp	r6, #0
 800b56a:	dd03      	ble.n	800b574 <__multiply+0x90>
 800b56c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b570:	2b00      	cmp	r3, #0
 800b572:	d05b      	beq.n	800b62c <__multiply+0x148>
 800b574:	6106      	str	r6, [r0, #16]
 800b576:	b005      	add	sp, #20
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	f843 2b04 	str.w	r2, [r3], #4
 800b580:	e7d8      	b.n	800b534 <__multiply+0x50>
 800b582:	f8b3 a000 	ldrh.w	sl, [r3]
 800b586:	f1ba 0f00 	cmp.w	sl, #0
 800b58a:	d024      	beq.n	800b5d6 <__multiply+0xf2>
 800b58c:	f104 0e14 	add.w	lr, r4, #20
 800b590:	46a9      	mov	r9, r5
 800b592:	f04f 0c00 	mov.w	ip, #0
 800b596:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b59a:	f8d9 1000 	ldr.w	r1, [r9]
 800b59e:	fa1f fb82 	uxth.w	fp, r2
 800b5a2:	b289      	uxth	r1, r1
 800b5a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b5b0:	4461      	add	r1, ip
 800b5b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5be:	b289      	uxth	r1, r1
 800b5c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5c4:	4577      	cmp	r7, lr
 800b5c6:	f849 1b04 	str.w	r1, [r9], #4
 800b5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ce:	d8e2      	bhi.n	800b596 <__multiply+0xb2>
 800b5d0:	9a01      	ldr	r2, [sp, #4]
 800b5d2:	f845 c002 	str.w	ip, [r5, r2]
 800b5d6:	9a03      	ldr	r2, [sp, #12]
 800b5d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	f1b9 0f00 	cmp.w	r9, #0
 800b5e2:	d021      	beq.n	800b628 <__multiply+0x144>
 800b5e4:	6829      	ldr	r1, [r5, #0]
 800b5e6:	f104 0c14 	add.w	ip, r4, #20
 800b5ea:	46ae      	mov	lr, r5
 800b5ec:	f04f 0a00 	mov.w	sl, #0
 800b5f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b5f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5f8:	fb09 220b 	mla	r2, r9, fp, r2
 800b5fc:	4452      	add	r2, sl
 800b5fe:	b289      	uxth	r1, r1
 800b600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b604:	f84e 1b04 	str.w	r1, [lr], #4
 800b608:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b60c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b610:	f8be 1000 	ldrh.w	r1, [lr]
 800b614:	fb09 110a 	mla	r1, r9, sl, r1
 800b618:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b61c:	4567      	cmp	r7, ip
 800b61e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b622:	d8e5      	bhi.n	800b5f0 <__multiply+0x10c>
 800b624:	9a01      	ldr	r2, [sp, #4]
 800b626:	50a9      	str	r1, [r5, r2]
 800b628:	3504      	adds	r5, #4
 800b62a:	e799      	b.n	800b560 <__multiply+0x7c>
 800b62c:	3e01      	subs	r6, #1
 800b62e:	e79b      	b.n	800b568 <__multiply+0x84>
 800b630:	0800c3ef 	.word	0x0800c3ef
 800b634:	0800c400 	.word	0x0800c400

0800b638 <__pow5mult>:
 800b638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b63c:	4615      	mov	r5, r2
 800b63e:	f012 0203 	ands.w	r2, r2, #3
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	d007      	beq.n	800b658 <__pow5mult+0x20>
 800b648:	4c25      	ldr	r4, [pc, #148]	; (800b6e0 <__pow5mult+0xa8>)
 800b64a:	3a01      	subs	r2, #1
 800b64c:	2300      	movs	r3, #0
 800b64e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b652:	f7ff fe9d 	bl	800b390 <__multadd>
 800b656:	4607      	mov	r7, r0
 800b658:	10ad      	asrs	r5, r5, #2
 800b65a:	d03d      	beq.n	800b6d8 <__pow5mult+0xa0>
 800b65c:	69f4      	ldr	r4, [r6, #28]
 800b65e:	b97c      	cbnz	r4, 800b680 <__pow5mult+0x48>
 800b660:	2010      	movs	r0, #16
 800b662:	f7ff fd7f 	bl	800b164 <malloc>
 800b666:	4602      	mov	r2, r0
 800b668:	61f0      	str	r0, [r6, #28]
 800b66a:	b928      	cbnz	r0, 800b678 <__pow5mult+0x40>
 800b66c:	4b1d      	ldr	r3, [pc, #116]	; (800b6e4 <__pow5mult+0xac>)
 800b66e:	481e      	ldr	r0, [pc, #120]	; (800b6e8 <__pow5mult+0xb0>)
 800b670:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b674:	f000 fc6e 	bl	800bf54 <__assert_func>
 800b678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b67c:	6004      	str	r4, [r0, #0]
 800b67e:	60c4      	str	r4, [r0, #12]
 800b680:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b688:	b94c      	cbnz	r4, 800b69e <__pow5mult+0x66>
 800b68a:	f240 2171 	movw	r1, #625	; 0x271
 800b68e:	4630      	mov	r0, r6
 800b690:	f7ff ff12 	bl	800b4b8 <__i2b>
 800b694:	2300      	movs	r3, #0
 800b696:	f8c8 0008 	str.w	r0, [r8, #8]
 800b69a:	4604      	mov	r4, r0
 800b69c:	6003      	str	r3, [r0, #0]
 800b69e:	f04f 0900 	mov.w	r9, #0
 800b6a2:	07eb      	lsls	r3, r5, #31
 800b6a4:	d50a      	bpl.n	800b6bc <__pow5mult+0x84>
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff ff1a 	bl	800b4e4 <__multiply>
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f7ff fe49 	bl	800b34c <_Bfree>
 800b6ba:	4647      	mov	r7, r8
 800b6bc:	106d      	asrs	r5, r5, #1
 800b6be:	d00b      	beq.n	800b6d8 <__pow5mult+0xa0>
 800b6c0:	6820      	ldr	r0, [r4, #0]
 800b6c2:	b938      	cbnz	r0, 800b6d4 <__pow5mult+0x9c>
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff ff0b 	bl	800b4e4 <__multiply>
 800b6ce:	6020      	str	r0, [r4, #0]
 800b6d0:	f8c0 9000 	str.w	r9, [r0]
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	e7e4      	b.n	800b6a2 <__pow5mult+0x6a>
 800b6d8:	4638      	mov	r0, r7
 800b6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6de:	bf00      	nop
 800b6e0:	0800c550 	.word	0x0800c550
 800b6e4:	0800c380 	.word	0x0800c380
 800b6e8:	0800c400 	.word	0x0800c400

0800b6ec <__lshift>:
 800b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	6849      	ldr	r1, [r1, #4]
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	4607      	mov	r7, r0
 800b6fe:	4691      	mov	r9, r2
 800b700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b704:	f108 0601 	add.w	r6, r8, #1
 800b708:	42b3      	cmp	r3, r6
 800b70a:	db0b      	blt.n	800b724 <__lshift+0x38>
 800b70c:	4638      	mov	r0, r7
 800b70e:	f7ff fddd 	bl	800b2cc <_Balloc>
 800b712:	4605      	mov	r5, r0
 800b714:	b948      	cbnz	r0, 800b72a <__lshift+0x3e>
 800b716:	4602      	mov	r2, r0
 800b718:	4b28      	ldr	r3, [pc, #160]	; (800b7bc <__lshift+0xd0>)
 800b71a:	4829      	ldr	r0, [pc, #164]	; (800b7c0 <__lshift+0xd4>)
 800b71c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b720:	f000 fc18 	bl	800bf54 <__assert_func>
 800b724:	3101      	adds	r1, #1
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	e7ee      	b.n	800b708 <__lshift+0x1c>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f100 0114 	add.w	r1, r0, #20
 800b730:	f100 0210 	add.w	r2, r0, #16
 800b734:	4618      	mov	r0, r3
 800b736:	4553      	cmp	r3, sl
 800b738:	db33      	blt.n	800b7a2 <__lshift+0xb6>
 800b73a:	6920      	ldr	r0, [r4, #16]
 800b73c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b740:	f104 0314 	add.w	r3, r4, #20
 800b744:	f019 091f 	ands.w	r9, r9, #31
 800b748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b74c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b750:	d02b      	beq.n	800b7aa <__lshift+0xbe>
 800b752:	f1c9 0e20 	rsb	lr, r9, #32
 800b756:	468a      	mov	sl, r1
 800b758:	2200      	movs	r2, #0
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	fa00 f009 	lsl.w	r0, r0, r9
 800b760:	4310      	orrs	r0, r2
 800b762:	f84a 0b04 	str.w	r0, [sl], #4
 800b766:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76a:	459c      	cmp	ip, r3
 800b76c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b770:	d8f3      	bhi.n	800b75a <__lshift+0x6e>
 800b772:	ebac 0304 	sub.w	r3, ip, r4
 800b776:	3b15      	subs	r3, #21
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	3304      	adds	r3, #4
 800b77e:	f104 0015 	add.w	r0, r4, #21
 800b782:	4584      	cmp	ip, r0
 800b784:	bf38      	it	cc
 800b786:	2304      	movcc	r3, #4
 800b788:	50ca      	str	r2, [r1, r3]
 800b78a:	b10a      	cbz	r2, 800b790 <__lshift+0xa4>
 800b78c:	f108 0602 	add.w	r6, r8, #2
 800b790:	3e01      	subs	r6, #1
 800b792:	4638      	mov	r0, r7
 800b794:	612e      	str	r6, [r5, #16]
 800b796:	4621      	mov	r1, r4
 800b798:	f7ff fdd8 	bl	800b34c <_Bfree>
 800b79c:	4628      	mov	r0, r5
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	e7c5      	b.n	800b736 <__lshift+0x4a>
 800b7aa:	3904      	subs	r1, #4
 800b7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7b4:	459c      	cmp	ip, r3
 800b7b6:	d8f9      	bhi.n	800b7ac <__lshift+0xc0>
 800b7b8:	e7ea      	b.n	800b790 <__lshift+0xa4>
 800b7ba:	bf00      	nop
 800b7bc:	0800c3ef 	.word	0x0800c3ef
 800b7c0:	0800c400 	.word	0x0800c400

0800b7c4 <__mcmp>:
 800b7c4:	b530      	push	{r4, r5, lr}
 800b7c6:	6902      	ldr	r2, [r0, #16]
 800b7c8:	690c      	ldr	r4, [r1, #16]
 800b7ca:	1b12      	subs	r2, r2, r4
 800b7cc:	d10e      	bne.n	800b7ec <__mcmp+0x28>
 800b7ce:	f100 0314 	add.w	r3, r0, #20
 800b7d2:	3114      	adds	r1, #20
 800b7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7e4:	42a5      	cmp	r5, r4
 800b7e6:	d003      	beq.n	800b7f0 <__mcmp+0x2c>
 800b7e8:	d305      	bcc.n	800b7f6 <__mcmp+0x32>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	bd30      	pop	{r4, r5, pc}
 800b7f0:	4283      	cmp	r3, r0
 800b7f2:	d3f3      	bcc.n	800b7dc <__mcmp+0x18>
 800b7f4:	e7fa      	b.n	800b7ec <__mcmp+0x28>
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fa:	e7f7      	b.n	800b7ec <__mcmp+0x28>

0800b7fc <__mdiff>:
 800b7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	4606      	mov	r6, r0
 800b804:	4611      	mov	r1, r2
 800b806:	4620      	mov	r0, r4
 800b808:	4690      	mov	r8, r2
 800b80a:	f7ff ffdb 	bl	800b7c4 <__mcmp>
 800b80e:	1e05      	subs	r5, r0, #0
 800b810:	d110      	bne.n	800b834 <__mdiff+0x38>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff fd59 	bl	800b2cc <_Balloc>
 800b81a:	b930      	cbnz	r0, 800b82a <__mdiff+0x2e>
 800b81c:	4b3a      	ldr	r3, [pc, #232]	; (800b908 <__mdiff+0x10c>)
 800b81e:	4602      	mov	r2, r0
 800b820:	f240 2137 	movw	r1, #567	; 0x237
 800b824:	4839      	ldr	r0, [pc, #228]	; (800b90c <__mdiff+0x110>)
 800b826:	f000 fb95 	bl	800bf54 <__assert_func>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	bfa4      	itt	ge
 800b836:	4643      	movge	r3, r8
 800b838:	46a0      	movge	r8, r4
 800b83a:	4630      	mov	r0, r6
 800b83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b840:	bfa6      	itte	ge
 800b842:	461c      	movge	r4, r3
 800b844:	2500      	movge	r5, #0
 800b846:	2501      	movlt	r5, #1
 800b848:	f7ff fd40 	bl	800b2cc <_Balloc>
 800b84c:	b920      	cbnz	r0, 800b858 <__mdiff+0x5c>
 800b84e:	4b2e      	ldr	r3, [pc, #184]	; (800b908 <__mdiff+0x10c>)
 800b850:	4602      	mov	r2, r0
 800b852:	f240 2145 	movw	r1, #581	; 0x245
 800b856:	e7e5      	b.n	800b824 <__mdiff+0x28>
 800b858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b85c:	6926      	ldr	r6, [r4, #16]
 800b85e:	60c5      	str	r5, [r0, #12]
 800b860:	f104 0914 	add.w	r9, r4, #20
 800b864:	f108 0514 	add.w	r5, r8, #20
 800b868:	f100 0e14 	add.w	lr, r0, #20
 800b86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b874:	f108 0210 	add.w	r2, r8, #16
 800b878:	46f2      	mov	sl, lr
 800b87a:	2100      	movs	r1, #0
 800b87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b884:	fa11 f88b 	uxtah	r8, r1, fp
 800b888:	b299      	uxth	r1, r3
 800b88a:	0c1b      	lsrs	r3, r3, #16
 800b88c:	eba8 0801 	sub.w	r8, r8, r1
 800b890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b894:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b898:	fa1f f888 	uxth.w	r8, r8
 800b89c:	1419      	asrs	r1, r3, #16
 800b89e:	454e      	cmp	r6, r9
 800b8a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8a4:	f84a 3b04 	str.w	r3, [sl], #4
 800b8a8:	d8e8      	bhi.n	800b87c <__mdiff+0x80>
 800b8aa:	1b33      	subs	r3, r6, r4
 800b8ac:	3b15      	subs	r3, #21
 800b8ae:	f023 0303 	bic.w	r3, r3, #3
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	3415      	adds	r4, #21
 800b8b6:	42a6      	cmp	r6, r4
 800b8b8:	bf38      	it	cc
 800b8ba:	2304      	movcc	r3, #4
 800b8bc:	441d      	add	r5, r3
 800b8be:	4473      	add	r3, lr
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	462e      	mov	r6, r5
 800b8c4:	4566      	cmp	r6, ip
 800b8c6:	d30e      	bcc.n	800b8e6 <__mdiff+0xea>
 800b8c8:	f10c 0203 	add.w	r2, ip, #3
 800b8cc:	1b52      	subs	r2, r2, r5
 800b8ce:	f022 0203 	bic.w	r2, r2, #3
 800b8d2:	3d03      	subs	r5, #3
 800b8d4:	45ac      	cmp	ip, r5
 800b8d6:	bf38      	it	cc
 800b8d8:	2200      	movcc	r2, #0
 800b8da:	4413      	add	r3, r2
 800b8dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8e0:	b17a      	cbz	r2, 800b902 <__mdiff+0x106>
 800b8e2:	6107      	str	r7, [r0, #16]
 800b8e4:	e7a4      	b.n	800b830 <__mdiff+0x34>
 800b8e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8ea:	fa11 f288 	uxtah	r2, r1, r8
 800b8ee:	1414      	asrs	r4, r2, #16
 800b8f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8fa:	f84e 2b04 	str.w	r2, [lr], #4
 800b8fe:	1421      	asrs	r1, r4, #16
 800b900:	e7e0      	b.n	800b8c4 <__mdiff+0xc8>
 800b902:	3f01      	subs	r7, #1
 800b904:	e7ea      	b.n	800b8dc <__mdiff+0xe0>
 800b906:	bf00      	nop
 800b908:	0800c3ef 	.word	0x0800c3ef
 800b90c:	0800c400 	.word	0x0800c400

0800b910 <__d2b>:
 800b910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b914:	460f      	mov	r7, r1
 800b916:	2101      	movs	r1, #1
 800b918:	ec59 8b10 	vmov	r8, r9, d0
 800b91c:	4616      	mov	r6, r2
 800b91e:	f7ff fcd5 	bl	800b2cc <_Balloc>
 800b922:	4604      	mov	r4, r0
 800b924:	b930      	cbnz	r0, 800b934 <__d2b+0x24>
 800b926:	4602      	mov	r2, r0
 800b928:	4b24      	ldr	r3, [pc, #144]	; (800b9bc <__d2b+0xac>)
 800b92a:	4825      	ldr	r0, [pc, #148]	; (800b9c0 <__d2b+0xb0>)
 800b92c:	f240 310f 	movw	r1, #783	; 0x30f
 800b930:	f000 fb10 	bl	800bf54 <__assert_func>
 800b934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b93c:	bb2d      	cbnz	r5, 800b98a <__d2b+0x7a>
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	f1b8 0300 	subs.w	r3, r8, #0
 800b944:	d026      	beq.n	800b994 <__d2b+0x84>
 800b946:	4668      	mov	r0, sp
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	f7ff fd87 	bl	800b45c <__lo0bits>
 800b94e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b952:	b1e8      	cbz	r0, 800b990 <__d2b+0x80>
 800b954:	f1c0 0320 	rsb	r3, r0, #32
 800b958:	fa02 f303 	lsl.w	r3, r2, r3
 800b95c:	430b      	orrs	r3, r1
 800b95e:	40c2      	lsrs	r2, r0
 800b960:	6163      	str	r3, [r4, #20]
 800b962:	9201      	str	r2, [sp, #4]
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	61a3      	str	r3, [r4, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bf14      	ite	ne
 800b96c:	2202      	movne	r2, #2
 800b96e:	2201      	moveq	r2, #1
 800b970:	6122      	str	r2, [r4, #16]
 800b972:	b1bd      	cbz	r5, 800b9a4 <__d2b+0x94>
 800b974:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b978:	4405      	add	r5, r0
 800b97a:	603d      	str	r5, [r7, #0]
 800b97c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b980:	6030      	str	r0, [r6, #0]
 800b982:	4620      	mov	r0, r4
 800b984:	b003      	add	sp, #12
 800b986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b98e:	e7d6      	b.n	800b93e <__d2b+0x2e>
 800b990:	6161      	str	r1, [r4, #20]
 800b992:	e7e7      	b.n	800b964 <__d2b+0x54>
 800b994:	a801      	add	r0, sp, #4
 800b996:	f7ff fd61 	bl	800b45c <__lo0bits>
 800b99a:	9b01      	ldr	r3, [sp, #4]
 800b99c:	6163      	str	r3, [r4, #20]
 800b99e:	3020      	adds	r0, #32
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	e7e5      	b.n	800b970 <__d2b+0x60>
 800b9a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9ac:	6038      	str	r0, [r7, #0]
 800b9ae:	6918      	ldr	r0, [r3, #16]
 800b9b0:	f7ff fd34 	bl	800b41c <__hi0bits>
 800b9b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9b8:	e7e2      	b.n	800b980 <__d2b+0x70>
 800b9ba:	bf00      	nop
 800b9bc:	0800c3ef 	.word	0x0800c3ef
 800b9c0:	0800c400 	.word	0x0800c400

0800b9c4 <__sfputc_r>:
 800b9c4:	6893      	ldr	r3, [r2, #8]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	b410      	push	{r4}
 800b9cc:	6093      	str	r3, [r2, #8]
 800b9ce:	da08      	bge.n	800b9e2 <__sfputc_r+0x1e>
 800b9d0:	6994      	ldr	r4, [r2, #24]
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	db01      	blt.n	800b9da <__sfputc_r+0x16>
 800b9d6:	290a      	cmp	r1, #10
 800b9d8:	d103      	bne.n	800b9e2 <__sfputc_r+0x1e>
 800b9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9de:	f7fe bbe6 	b.w	800a1ae <__swbuf_r>
 800b9e2:	6813      	ldr	r3, [r2, #0]
 800b9e4:	1c58      	adds	r0, r3, #1
 800b9e6:	6010      	str	r0, [r2, #0]
 800b9e8:	7019      	strb	r1, [r3, #0]
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <__sfputs_r>:
 800b9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f4:	4606      	mov	r6, r0
 800b9f6:	460f      	mov	r7, r1
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	18d5      	adds	r5, r2, r3
 800b9fc:	42ac      	cmp	r4, r5
 800b9fe:	d101      	bne.n	800ba04 <__sfputs_r+0x12>
 800ba00:	2000      	movs	r0, #0
 800ba02:	e007      	b.n	800ba14 <__sfputs_r+0x22>
 800ba04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba08:	463a      	mov	r2, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ffda 	bl	800b9c4 <__sfputc_r>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d1f3      	bne.n	800b9fc <__sfputs_r+0xa>
 800ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba18 <_vfiprintf_r>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	b09d      	sub	sp, #116	; 0x74
 800ba20:	4614      	mov	r4, r2
 800ba22:	4698      	mov	r8, r3
 800ba24:	4606      	mov	r6, r0
 800ba26:	b118      	cbz	r0, 800ba30 <_vfiprintf_r+0x18>
 800ba28:	6a03      	ldr	r3, [r0, #32]
 800ba2a:	b90b      	cbnz	r3, 800ba30 <_vfiprintf_r+0x18>
 800ba2c:	f7fe fad0 	bl	8009fd0 <__sinit>
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x2a>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x2a>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7fe fcc8 	bl	800a3d2 <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x34>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b99b      	cbnz	r3, 800ba74 <_vfiprintf_r+0x5c>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7fe fbea 	bl	800a228 <__swsetup_r>
 800ba54:	b170      	cbz	r0, 800ba74 <_vfiprintf_r+0x5c>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d504      	bpl.n	800ba66 <_vfiprintf_r+0x4e>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	0598      	lsls	r0, r3, #22
 800ba6a:	d4f7      	bmi.n	800ba5c <_vfiprintf_r+0x44>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba6e:	f7fe fcb1 	bl	800a3d4 <__retarget_lock_release_recursive>
 800ba72:	e7f3      	b.n	800ba5c <_vfiprintf_r+0x44>
 800ba74:	2300      	movs	r3, #0
 800ba76:	9309      	str	r3, [sp, #36]	; 0x24
 800ba78:	2320      	movs	r3, #32
 800ba7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba82:	2330      	movs	r3, #48	; 0x30
 800ba84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc38 <_vfiprintf_r+0x220>
 800ba88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba8c:	f04f 0901 	mov.w	r9, #1
 800ba90:	4623      	mov	r3, r4
 800ba92:	469a      	mov	sl, r3
 800ba94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba98:	b10a      	cbz	r2, 800ba9e <_vfiprintf_r+0x86>
 800ba9a:	2a25      	cmp	r2, #37	; 0x25
 800ba9c:	d1f9      	bne.n	800ba92 <_vfiprintf_r+0x7a>
 800ba9e:	ebba 0b04 	subs.w	fp, sl, r4
 800baa2:	d00b      	beq.n	800babc <_vfiprintf_r+0xa4>
 800baa4:	465b      	mov	r3, fp
 800baa6:	4622      	mov	r2, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff ffa1 	bl	800b9f2 <__sfputs_r>
 800bab0:	3001      	adds	r0, #1
 800bab2:	f000 80a9 	beq.w	800bc08 <_vfiprintf_r+0x1f0>
 800bab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab8:	445a      	add	r2, fp
 800baba:	9209      	str	r2, [sp, #36]	; 0x24
 800babc:	f89a 3000 	ldrb.w	r3, [sl]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 80a1 	beq.w	800bc08 <_vfiprintf_r+0x1f0>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f04f 32ff 	mov.w	r2, #4294967295
 800bacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad0:	f10a 0a01 	add.w	sl, sl, #1
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800badc:	931a      	str	r3, [sp, #104]	; 0x68
 800bade:	4654      	mov	r4, sl
 800bae0:	2205      	movs	r2, #5
 800bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae6:	4854      	ldr	r0, [pc, #336]	; (800bc38 <_vfiprintf_r+0x220>)
 800bae8:	f7f4 fb72 	bl	80001d0 <memchr>
 800baec:	9a04      	ldr	r2, [sp, #16]
 800baee:	b9d8      	cbnz	r0, 800bb28 <_vfiprintf_r+0x110>
 800baf0:	06d1      	lsls	r1, r2, #27
 800baf2:	bf44      	itt	mi
 800baf4:	2320      	movmi	r3, #32
 800baf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bafa:	0713      	lsls	r3, r2, #28
 800bafc:	bf44      	itt	mi
 800bafe:	232b      	movmi	r3, #43	; 0x2b
 800bb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb04:	f89a 3000 	ldrb.w	r3, [sl]
 800bb08:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0a:	d015      	beq.n	800bb38 <_vfiprintf_r+0x120>
 800bb0c:	9a07      	ldr	r2, [sp, #28]
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2000      	movs	r0, #0
 800bb12:	f04f 0c0a 	mov.w	ip, #10
 800bb16:	4621      	mov	r1, r4
 800bb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb1c:	3b30      	subs	r3, #48	; 0x30
 800bb1e:	2b09      	cmp	r3, #9
 800bb20:	d94d      	bls.n	800bbbe <_vfiprintf_r+0x1a6>
 800bb22:	b1b0      	cbz	r0, 800bb52 <_vfiprintf_r+0x13a>
 800bb24:	9207      	str	r2, [sp, #28]
 800bb26:	e014      	b.n	800bb52 <_vfiprintf_r+0x13a>
 800bb28:	eba0 0308 	sub.w	r3, r0, r8
 800bb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	46a2      	mov	sl, r4
 800bb36:	e7d2      	b.n	800bade <_vfiprintf_r+0xc6>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	1d19      	adds	r1, r3, #4
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bfbb      	ittet	lt
 800bb44:	425b      	neglt	r3, r3
 800bb46:	f042 0202 	orrlt.w	r2, r2, #2
 800bb4a:	9307      	strge	r3, [sp, #28]
 800bb4c:	9307      	strlt	r3, [sp, #28]
 800bb4e:	bfb8      	it	lt
 800bb50:	9204      	strlt	r2, [sp, #16]
 800bb52:	7823      	ldrb	r3, [r4, #0]
 800bb54:	2b2e      	cmp	r3, #46	; 0x2e
 800bb56:	d10c      	bne.n	800bb72 <_vfiprintf_r+0x15a>
 800bb58:	7863      	ldrb	r3, [r4, #1]
 800bb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb5c:	d134      	bne.n	800bbc8 <_vfiprintf_r+0x1b0>
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	1d1a      	adds	r2, r3, #4
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	9203      	str	r2, [sp, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bfb8      	it	lt
 800bb6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb6e:	3402      	adds	r4, #2
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc48 <_vfiprintf_r+0x230>
 800bb76:	7821      	ldrb	r1, [r4, #0]
 800bb78:	2203      	movs	r2, #3
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f7f4 fb28 	bl	80001d0 <memchr>
 800bb80:	b138      	cbz	r0, 800bb92 <_vfiprintf_r+0x17a>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	eba0 000a 	sub.w	r0, r0, sl
 800bb88:	2240      	movs	r2, #64	; 0x40
 800bb8a:	4082      	lsls	r2, r0
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4829      	ldr	r0, [pc, #164]	; (800bc3c <_vfiprintf_r+0x224>)
 800bb98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb9c:	2206      	movs	r2, #6
 800bb9e:	f7f4 fb17 	bl	80001d0 <memchr>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d03f      	beq.n	800bc26 <_vfiprintf_r+0x20e>
 800bba6:	4b26      	ldr	r3, [pc, #152]	; (800bc40 <_vfiprintf_r+0x228>)
 800bba8:	bb1b      	cbnz	r3, 800bbf2 <_vfiprintf_r+0x1da>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	3307      	adds	r3, #7
 800bbae:	f023 0307 	bic.w	r3, r3, #7
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	9303      	str	r3, [sp, #12]
 800bbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb8:	443b      	add	r3, r7
 800bbba:	9309      	str	r3, [sp, #36]	; 0x24
 800bbbc:	e768      	b.n	800ba90 <_vfiprintf_r+0x78>
 800bbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	e7a6      	b.n	800bb16 <_vfiprintf_r+0xfe>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f04f 0c0a 	mov.w	ip, #10
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbda:	3a30      	subs	r2, #48	; 0x30
 800bbdc:	2a09      	cmp	r2, #9
 800bbde:	d903      	bls.n	800bbe8 <_vfiprintf_r+0x1d0>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <_vfiprintf_r+0x15a>
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	e7c4      	b.n	800bb72 <_vfiprintf_r+0x15a>
 800bbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbec:	4604      	mov	r4, r0
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e7f0      	b.n	800bbd4 <_vfiprintf_r+0x1bc>
 800bbf2:	ab03      	add	r3, sp, #12
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	4b12      	ldr	r3, [pc, #72]	; (800bc44 <_vfiprintf_r+0x22c>)
 800bbfa:	a904      	add	r1, sp, #16
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fd fd95 	bl	800972c <_printf_float>
 800bc02:	4607      	mov	r7, r0
 800bc04:	1c78      	adds	r0, r7, #1
 800bc06:	d1d6      	bne.n	800bbb6 <_vfiprintf_r+0x19e>
 800bc08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc0a:	07d9      	lsls	r1, r3, #31
 800bc0c:	d405      	bmi.n	800bc1a <_vfiprintf_r+0x202>
 800bc0e:	89ab      	ldrh	r3, [r5, #12]
 800bc10:	059a      	lsls	r2, r3, #22
 800bc12:	d402      	bmi.n	800bc1a <_vfiprintf_r+0x202>
 800bc14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc16:	f7fe fbdd 	bl	800a3d4 <__retarget_lock_release_recursive>
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	065b      	lsls	r3, r3, #25
 800bc1e:	f53f af1d 	bmi.w	800ba5c <_vfiprintf_r+0x44>
 800bc22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc24:	e71c      	b.n	800ba60 <_vfiprintf_r+0x48>
 800bc26:	ab03      	add	r3, sp, #12
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <_vfiprintf_r+0x22c>)
 800bc2e:	a904      	add	r1, sp, #16
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7fe f81f 	bl	8009c74 <_printf_i>
 800bc36:	e7e4      	b.n	800bc02 <_vfiprintf_r+0x1ea>
 800bc38:	0800c55c 	.word	0x0800c55c
 800bc3c:	0800c566 	.word	0x0800c566
 800bc40:	0800972d 	.word	0x0800972d
 800bc44:	0800b9f3 	.word	0x0800b9f3
 800bc48:	0800c562 	.word	0x0800c562

0800bc4c <__sflush_r>:
 800bc4c:	898a      	ldrh	r2, [r1, #12]
 800bc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc52:	4605      	mov	r5, r0
 800bc54:	0710      	lsls	r0, r2, #28
 800bc56:	460c      	mov	r4, r1
 800bc58:	d458      	bmi.n	800bd0c <__sflush_r+0xc0>
 800bc5a:	684b      	ldr	r3, [r1, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dc05      	bgt.n	800bc6c <__sflush_r+0x20>
 800bc60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	dc02      	bgt.n	800bc6c <__sflush_r+0x20>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d0f9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bc72:	2300      	movs	r3, #0
 800bc74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc78:	682f      	ldr	r7, [r5, #0]
 800bc7a:	6a21      	ldr	r1, [r4, #32]
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	d032      	beq.n	800bce6 <__sflush_r+0x9a>
 800bc80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	075a      	lsls	r2, r3, #29
 800bc86:	d505      	bpl.n	800bc94 <__sflush_r+0x48>
 800bc88:	6863      	ldr	r3, [r4, #4]
 800bc8a:	1ac0      	subs	r0, r0, r3
 800bc8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc8e:	b10b      	cbz	r3, 800bc94 <__sflush_r+0x48>
 800bc90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc92:	1ac0      	subs	r0, r0, r3
 800bc94:	2300      	movs	r3, #0
 800bc96:	4602      	mov	r2, r0
 800bc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9a:	6a21      	ldr	r1, [r4, #32]
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b0      	blx	r6
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	d106      	bne.n	800bcb4 <__sflush_r+0x68>
 800bca6:	6829      	ldr	r1, [r5, #0]
 800bca8:	291d      	cmp	r1, #29
 800bcaa:	d82b      	bhi.n	800bd04 <__sflush_r+0xb8>
 800bcac:	4a29      	ldr	r2, [pc, #164]	; (800bd54 <__sflush_r+0x108>)
 800bcae:	410a      	asrs	r2, r1
 800bcb0:	07d6      	lsls	r6, r2, #31
 800bcb2:	d427      	bmi.n	800bd04 <__sflush_r+0xb8>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	6062      	str	r2, [r4, #4]
 800bcb8:	04d9      	lsls	r1, r3, #19
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	6022      	str	r2, [r4, #0]
 800bcbe:	d504      	bpl.n	800bcca <__sflush_r+0x7e>
 800bcc0:	1c42      	adds	r2, r0, #1
 800bcc2:	d101      	bne.n	800bcc8 <__sflush_r+0x7c>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b903      	cbnz	r3, 800bcca <__sflush_r+0x7e>
 800bcc8:	6560      	str	r0, [r4, #84]	; 0x54
 800bcca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bccc:	602f      	str	r7, [r5, #0]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d0c9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bcd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd6:	4299      	cmp	r1, r3
 800bcd8:	d002      	beq.n	800bce0 <__sflush_r+0x94>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7ff f9f6 	bl	800b0cc <_free_r>
 800bce0:	2000      	movs	r0, #0
 800bce2:	6360      	str	r0, [r4, #52]	; 0x34
 800bce4:	e7c0      	b.n	800bc68 <__sflush_r+0x1c>
 800bce6:	2301      	movs	r3, #1
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b0      	blx	r6
 800bcec:	1c41      	adds	r1, r0, #1
 800bcee:	d1c8      	bne.n	800bc82 <__sflush_r+0x36>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0c5      	beq.n	800bc82 <__sflush_r+0x36>
 800bcf6:	2b1d      	cmp	r3, #29
 800bcf8:	d001      	beq.n	800bcfe <__sflush_r+0xb2>
 800bcfa:	2b16      	cmp	r3, #22
 800bcfc:	d101      	bne.n	800bd02 <__sflush_r+0xb6>
 800bcfe:	602f      	str	r7, [r5, #0]
 800bd00:	e7b1      	b.n	800bc66 <__sflush_r+0x1a>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	e7ad      	b.n	800bc68 <__sflush_r+0x1c>
 800bd0c:	690f      	ldr	r7, [r1, #16]
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	d0a9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bd12:	0793      	lsls	r3, r2, #30
 800bd14:	680e      	ldr	r6, [r1, #0]
 800bd16:	bf08      	it	eq
 800bd18:	694b      	ldreq	r3, [r1, #20]
 800bd1a:	600f      	str	r7, [r1, #0]
 800bd1c:	bf18      	it	ne
 800bd1e:	2300      	movne	r3, #0
 800bd20:	eba6 0807 	sub.w	r8, r6, r7
 800bd24:	608b      	str	r3, [r1, #8]
 800bd26:	f1b8 0f00 	cmp.w	r8, #0
 800bd2a:	dd9c      	ble.n	800bc66 <__sflush_r+0x1a>
 800bd2c:	6a21      	ldr	r1, [r4, #32]
 800bd2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd30:	4643      	mov	r3, r8
 800bd32:	463a      	mov	r2, r7
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b0      	blx	r6
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	dc06      	bgt.n	800bd4a <__sflush_r+0xfe>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	e78e      	b.n	800bc68 <__sflush_r+0x1c>
 800bd4a:	4407      	add	r7, r0
 800bd4c:	eba8 0800 	sub.w	r8, r8, r0
 800bd50:	e7e9      	b.n	800bd26 <__sflush_r+0xda>
 800bd52:	bf00      	nop
 800bd54:	dfbffffe 	.word	0xdfbffffe

0800bd58 <_fflush_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	690b      	ldr	r3, [r1, #16]
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	b913      	cbnz	r3, 800bd68 <_fflush_r+0x10>
 800bd62:	2500      	movs	r5, #0
 800bd64:	4628      	mov	r0, r5
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	b118      	cbz	r0, 800bd72 <_fflush_r+0x1a>
 800bd6a:	6a03      	ldr	r3, [r0, #32]
 800bd6c:	b90b      	cbnz	r3, 800bd72 <_fflush_r+0x1a>
 800bd6e:	f7fe f92f 	bl	8009fd0 <__sinit>
 800bd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0f3      	beq.n	800bd62 <_fflush_r+0xa>
 800bd7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd7c:	07d0      	lsls	r0, r2, #31
 800bd7e:	d404      	bmi.n	800bd8a <_fflush_r+0x32>
 800bd80:	0599      	lsls	r1, r3, #22
 800bd82:	d402      	bmi.n	800bd8a <_fflush_r+0x32>
 800bd84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd86:	f7fe fb24 	bl	800a3d2 <__retarget_lock_acquire_recursive>
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	f7ff ff5d 	bl	800bc4c <__sflush_r>
 800bd92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd94:	07da      	lsls	r2, r3, #31
 800bd96:	4605      	mov	r5, r0
 800bd98:	d4e4      	bmi.n	800bd64 <_fflush_r+0xc>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	059b      	lsls	r3, r3, #22
 800bd9e:	d4e1      	bmi.n	800bd64 <_fflush_r+0xc>
 800bda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bda2:	f7fe fb17 	bl	800a3d4 <__retarget_lock_release_recursive>
 800bda6:	e7dd      	b.n	800bd64 <_fflush_r+0xc>

0800bda8 <__swhatbuf_r>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	460c      	mov	r4, r1
 800bdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	b096      	sub	sp, #88	; 0x58
 800bdb4:	4615      	mov	r5, r2
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	da0d      	bge.n	800bdd6 <__swhatbuf_r+0x2e>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bdc0:	f04f 0100 	mov.w	r1, #0
 800bdc4:	bf0c      	ite	eq
 800bdc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bdca:	2340      	movne	r3, #64	; 0x40
 800bdcc:	2000      	movs	r0, #0
 800bdce:	6031      	str	r1, [r6, #0]
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	b016      	add	sp, #88	; 0x58
 800bdd4:	bd70      	pop	{r4, r5, r6, pc}
 800bdd6:	466a      	mov	r2, sp
 800bdd8:	f000 f87c 	bl	800bed4 <_fstat_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	dbec      	blt.n	800bdba <__swhatbuf_r+0x12>
 800bde0:	9901      	ldr	r1, [sp, #4]
 800bde2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bde6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bdea:	4259      	negs	r1, r3
 800bdec:	4159      	adcs	r1, r3
 800bdee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdf2:	e7eb      	b.n	800bdcc <__swhatbuf_r+0x24>

0800bdf4 <__smakebuf_r>:
 800bdf4:	898b      	ldrh	r3, [r1, #12]
 800bdf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdf8:	079d      	lsls	r5, r3, #30
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	d507      	bpl.n	800be10 <__smakebuf_r+0x1c>
 800be00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	2301      	movs	r3, #1
 800be0a:	6163      	str	r3, [r4, #20]
 800be0c:	b002      	add	sp, #8
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	ab01      	add	r3, sp, #4
 800be12:	466a      	mov	r2, sp
 800be14:	f7ff ffc8 	bl	800bda8 <__swhatbuf_r>
 800be18:	9900      	ldr	r1, [sp, #0]
 800be1a:	4605      	mov	r5, r0
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7ff f9c9 	bl	800b1b4 <_malloc_r>
 800be22:	b948      	cbnz	r0, 800be38 <__smakebuf_r+0x44>
 800be24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be28:	059a      	lsls	r2, r3, #22
 800be2a:	d4ef      	bmi.n	800be0c <__smakebuf_r+0x18>
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	f043 0302 	orr.w	r3, r3, #2
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	e7e3      	b.n	800be00 <__smakebuf_r+0xc>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	6020      	str	r0, [r4, #0]
 800be3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	9b00      	ldr	r3, [sp, #0]
 800be44:	6163      	str	r3, [r4, #20]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	6120      	str	r0, [r4, #16]
 800be4a:	b15b      	cbz	r3, 800be64 <__smakebuf_r+0x70>
 800be4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be50:	4630      	mov	r0, r6
 800be52:	f000 f851 	bl	800bef8 <_isatty_r>
 800be56:	b128      	cbz	r0, 800be64 <__smakebuf_r+0x70>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	431d      	orrs	r5, r3
 800be68:	81a5      	strh	r5, [r4, #12]
 800be6a:	e7cf      	b.n	800be0c <__smakebuf_r+0x18>

0800be6c <_putc_r>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	460d      	mov	r5, r1
 800be70:	4614      	mov	r4, r2
 800be72:	4606      	mov	r6, r0
 800be74:	b118      	cbz	r0, 800be7e <_putc_r+0x12>
 800be76:	6a03      	ldr	r3, [r0, #32]
 800be78:	b90b      	cbnz	r3, 800be7e <_putc_r+0x12>
 800be7a:	f7fe f8a9 	bl	8009fd0 <__sinit>
 800be7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be80:	07d8      	lsls	r0, r3, #31
 800be82:	d405      	bmi.n	800be90 <_putc_r+0x24>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	0599      	lsls	r1, r3, #22
 800be88:	d402      	bmi.n	800be90 <_putc_r+0x24>
 800be8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8c:	f7fe faa1 	bl	800a3d2 <__retarget_lock_acquire_recursive>
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	3b01      	subs	r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	da05      	bge.n	800bea6 <_putc_r+0x3a>
 800be9a:	69a2      	ldr	r2, [r4, #24]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	db12      	blt.n	800bec6 <_putc_r+0x5a>
 800bea0:	b2eb      	uxtb	r3, r5
 800bea2:	2b0a      	cmp	r3, #10
 800bea4:	d00f      	beq.n	800bec6 <_putc_r+0x5a>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	6022      	str	r2, [r4, #0]
 800beac:	701d      	strb	r5, [r3, #0]
 800beae:	b2ed      	uxtb	r5, r5
 800beb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beb2:	07da      	lsls	r2, r3, #31
 800beb4:	d405      	bmi.n	800bec2 <_putc_r+0x56>
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	059b      	lsls	r3, r3, #22
 800beba:	d402      	bmi.n	800bec2 <_putc_r+0x56>
 800bebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bebe:	f7fe fa89 	bl	800a3d4 <__retarget_lock_release_recursive>
 800bec2:	4628      	mov	r0, r5
 800bec4:	bd70      	pop	{r4, r5, r6, pc}
 800bec6:	4629      	mov	r1, r5
 800bec8:	4622      	mov	r2, r4
 800beca:	4630      	mov	r0, r6
 800becc:	f7fe f96f 	bl	800a1ae <__swbuf_r>
 800bed0:	4605      	mov	r5, r0
 800bed2:	e7ed      	b.n	800beb0 <_putc_r+0x44>

0800bed4 <_fstat_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	; (800bef4 <_fstat_r+0x20>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f7f6 ff4a 	bl	8002d7a <_fstat>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d102      	bne.n	800bef0 <_fstat_r+0x1c>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	b103      	cbz	r3, 800bef0 <_fstat_r+0x1c>
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	2000089c 	.word	0x2000089c

0800bef8 <_isatty_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d06      	ldr	r5, [pc, #24]	; (800bf14 <_isatty_r+0x1c>)
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	f7f6 ff49 	bl	8002d9a <_isatty>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_isatty_r+0x1a>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_isatty_r+0x1a>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	2000089c 	.word	0x2000089c

0800bf18 <_sbrk_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d06      	ldr	r5, [pc, #24]	; (800bf34 <_sbrk_r+0x1c>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f6 ff52 	bl	8002dcc <_sbrk>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_sbrk_r+0x1a>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_sbrk_r+0x1a>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	2000089c 	.word	0x2000089c

0800bf38 <memcpy>:
 800bf38:	440a      	add	r2, r1
 800bf3a:	4291      	cmp	r1, r2
 800bf3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf40:	d100      	bne.n	800bf44 <memcpy+0xc>
 800bf42:	4770      	bx	lr
 800bf44:	b510      	push	{r4, lr}
 800bf46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf4e:	4291      	cmp	r1, r2
 800bf50:	d1f9      	bne.n	800bf46 <memcpy+0xe>
 800bf52:	bd10      	pop	{r4, pc}

0800bf54 <__assert_func>:
 800bf54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf56:	4614      	mov	r4, r2
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <__assert_func+0x2c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4605      	mov	r5, r0
 800bf60:	68d8      	ldr	r0, [r3, #12]
 800bf62:	b14c      	cbz	r4, 800bf78 <__assert_func+0x24>
 800bf64:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <__assert_func+0x30>)
 800bf66:	9100      	str	r1, [sp, #0]
 800bf68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf6c:	4906      	ldr	r1, [pc, #24]	; (800bf88 <__assert_func+0x34>)
 800bf6e:	462b      	mov	r3, r5
 800bf70:	f000 f844 	bl	800bffc <fiprintf>
 800bf74:	f000 f854 	bl	800c020 <abort>
 800bf78:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <__assert_func+0x38>)
 800bf7a:	461c      	mov	r4, r3
 800bf7c:	e7f3      	b.n	800bf66 <__assert_func+0x12>
 800bf7e:	bf00      	nop
 800bf80:	20000088 	.word	0x20000088
 800bf84:	0800c577 	.word	0x0800c577
 800bf88:	0800c584 	.word	0x0800c584
 800bf8c:	0800c5b2 	.word	0x0800c5b2

0800bf90 <_calloc_r>:
 800bf90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf92:	fba1 2402 	umull	r2, r4, r1, r2
 800bf96:	b94c      	cbnz	r4, 800bfac <_calloc_r+0x1c>
 800bf98:	4611      	mov	r1, r2
 800bf9a:	9201      	str	r2, [sp, #4]
 800bf9c:	f7ff f90a 	bl	800b1b4 <_malloc_r>
 800bfa0:	9a01      	ldr	r2, [sp, #4]
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	b930      	cbnz	r0, 800bfb4 <_calloc_r+0x24>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	b003      	add	sp, #12
 800bfaa:	bd30      	pop	{r4, r5, pc}
 800bfac:	220c      	movs	r2, #12
 800bfae:	6002      	str	r2, [r0, #0]
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	e7f8      	b.n	800bfa6 <_calloc_r+0x16>
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	f7fe f98f 	bl	800a2d8 <memset>
 800bfba:	e7f4      	b.n	800bfa6 <_calloc_r+0x16>

0800bfbc <__ascii_mbtowc>:
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	b901      	cbnz	r1, 800bfc2 <__ascii_mbtowc+0x6>
 800bfc0:	a901      	add	r1, sp, #4
 800bfc2:	b142      	cbz	r2, 800bfd6 <__ascii_mbtowc+0x1a>
 800bfc4:	b14b      	cbz	r3, 800bfda <__ascii_mbtowc+0x1e>
 800bfc6:	7813      	ldrb	r3, [r2, #0]
 800bfc8:	600b      	str	r3, [r1, #0]
 800bfca:	7812      	ldrb	r2, [r2, #0]
 800bfcc:	1e10      	subs	r0, r2, #0
 800bfce:	bf18      	it	ne
 800bfd0:	2001      	movne	r0, #1
 800bfd2:	b002      	add	sp, #8
 800bfd4:	4770      	bx	lr
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	e7fb      	b.n	800bfd2 <__ascii_mbtowc+0x16>
 800bfda:	f06f 0001 	mvn.w	r0, #1
 800bfde:	e7f8      	b.n	800bfd2 <__ascii_mbtowc+0x16>

0800bfe0 <__ascii_wctomb>:
 800bfe0:	b149      	cbz	r1, 800bff6 <__ascii_wctomb+0x16>
 800bfe2:	2aff      	cmp	r2, #255	; 0xff
 800bfe4:	bf85      	ittet	hi
 800bfe6:	238a      	movhi	r3, #138	; 0x8a
 800bfe8:	6003      	strhi	r3, [r0, #0]
 800bfea:	700a      	strbls	r2, [r1, #0]
 800bfec:	f04f 30ff 	movhi.w	r0, #4294967295
 800bff0:	bf98      	it	ls
 800bff2:	2001      	movls	r0, #1
 800bff4:	4770      	bx	lr
 800bff6:	4608      	mov	r0, r1
 800bff8:	4770      	bx	lr
	...

0800bffc <fiprintf>:
 800bffc:	b40e      	push	{r1, r2, r3}
 800bffe:	b503      	push	{r0, r1, lr}
 800c000:	4601      	mov	r1, r0
 800c002:	ab03      	add	r3, sp, #12
 800c004:	4805      	ldr	r0, [pc, #20]	; (800c01c <fiprintf+0x20>)
 800c006:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00a:	6800      	ldr	r0, [r0, #0]
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	f7ff fd03 	bl	800ba18 <_vfiprintf_r>
 800c012:	b002      	add	sp, #8
 800c014:	f85d eb04 	ldr.w	lr, [sp], #4
 800c018:	b003      	add	sp, #12
 800c01a:	4770      	bx	lr
 800c01c:	20000088 	.word	0x20000088

0800c020 <abort>:
 800c020:	b508      	push	{r3, lr}
 800c022:	2006      	movs	r0, #6
 800c024:	f000 f82c 	bl	800c080 <raise>
 800c028:	2001      	movs	r0, #1
 800c02a:	f7f6 fe57 	bl	8002cdc <_exit>

0800c02e <_raise_r>:
 800c02e:	291f      	cmp	r1, #31
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4604      	mov	r4, r0
 800c034:	460d      	mov	r5, r1
 800c036:	d904      	bls.n	800c042 <_raise_r+0x14>
 800c038:	2316      	movs	r3, #22
 800c03a:	6003      	str	r3, [r0, #0]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c044:	b112      	cbz	r2, 800c04c <_raise_r+0x1e>
 800c046:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c04a:	b94b      	cbnz	r3, 800c060 <_raise_r+0x32>
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 f831 	bl	800c0b4 <_getpid_r>
 800c052:	462a      	mov	r2, r5
 800c054:	4601      	mov	r1, r0
 800c056:	4620      	mov	r0, r4
 800c058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05c:	f000 b818 	b.w	800c090 <_kill_r>
 800c060:	2b01      	cmp	r3, #1
 800c062:	d00a      	beq.n	800c07a <_raise_r+0x4c>
 800c064:	1c59      	adds	r1, r3, #1
 800c066:	d103      	bne.n	800c070 <_raise_r+0x42>
 800c068:	2316      	movs	r3, #22
 800c06a:	6003      	str	r3, [r0, #0]
 800c06c:	2001      	movs	r0, #1
 800c06e:	e7e7      	b.n	800c040 <_raise_r+0x12>
 800c070:	2400      	movs	r4, #0
 800c072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c076:	4628      	mov	r0, r5
 800c078:	4798      	blx	r3
 800c07a:	2000      	movs	r0, #0
 800c07c:	e7e0      	b.n	800c040 <_raise_r+0x12>
	...

0800c080 <raise>:
 800c080:	4b02      	ldr	r3, [pc, #8]	; (800c08c <raise+0xc>)
 800c082:	4601      	mov	r1, r0
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f7ff bfd2 	b.w	800c02e <_raise_r>
 800c08a:	bf00      	nop
 800c08c:	20000088 	.word	0x20000088

0800c090 <_kill_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	; (800c0b0 <_kill_r+0x20>)
 800c094:	2300      	movs	r3, #0
 800c096:	4604      	mov	r4, r0
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	f7f6 fe0d 	bl	8002cbc <_kill>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d102      	bne.n	800c0ac <_kill_r+0x1c>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b103      	cbz	r3, 800c0ac <_kill_r+0x1c>
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	2000089c 	.word	0x2000089c

0800c0b4 <_getpid_r>:
 800c0b4:	f7f6 bdfa 	b.w	8002cac <_getpid>

0800c0b8 <_init>:
 800c0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ba:	bf00      	nop
 800c0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0be:	bc08      	pop	{r3}
 800c0c0:	469e      	mov	lr, r3
 800c0c2:	4770      	bx	lr

0800c0c4 <_fini>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	bf00      	nop
 800c0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ca:	bc08      	pop	{r3}
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	4770      	bx	lr
